{
    "avatar": {
        "description": "Avatar represents people using icons, labels and images.\n\n[Live Demo](https://www.primereact.org/avatar/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "AvatarPassThroughOptions": {
                    "description": "Defines passthrough(pt) options of Avatar component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "AvatarPassThroughOptionType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "AvatarProps": {
                    "description": "Defines valid properties in Avatar component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "ElementType<any, keyof IntrinsicElements>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, unknown>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<Record<string, unknown>, unknown>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "template",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The template to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "\"large\" | \"normal\" | \"xlarge\"",
                            "default": "normal",
                            "description": "Defines the size of the avatar."
                        },
                        {
                            "name": "shape",
                            "optional": true,
                            "readonly": false,
                            "type": "\"circle\" | \"square\"",
                            "default": "square",
                            "description": "Defines the shape of the avatar."
                        },
                        {
                            "name": "delayDuration",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "The delay duration of the avatar."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<useAvatarProps>"
                },
                "AvatarState": {
                    "description": "Defines valid state in Avatar component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "load",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the avatar's image is loading or not."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "useAvatarState"
                },
                "AvatarExposes": {
                    "description": "Defines the methods and properties exposed by Avatar component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "useAvatarState",
                            "default": "",
                            "description": "The state of the useAvatar."
                        },
                        {
                            "name": "handleImageLoad",
                            "optional": false,
                            "readonly": false,
                            "type": "(src?: string) => void",
                            "default": "",
                            "description": "The method to handle image load."
                        },
                        {
                            "name": "handleImageUnload",
                            "optional": false,
                            "readonly": false,
                            "type": "() => void",
                            "default": "",
                            "description": "The method to handle image unload."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "useAvatarExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "AvatarPassThroughOptionType": {
                    "values": "PassThroughOptionType<AvatarInstance, E>",
                    "description": "Defines passthrough(pt) options type in Avatar component."
                },
                "AvatarClassNamesType": {
                    "values": "typeof AvatarClassNames[keyof typeof AvatarClassNames]",
                    "description": "Type representing the CSS class names used in the Avatar component."
                },
                "AvatarInstance": {
                    "values": "ComponentInstance<AvatarProps, AvatarState, AvatarExposes>",
                    "description": "Instance of Avatar component."
                }
            }
        },
        "variables": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "AvatarClassNames": {
                    "description": "Defines the CSS class names used in the Avatar component.",
                    "variables": [
                        {
                            "name": "root",
                            "value": "p-avatar",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "label",
                            "value": "p-avatar-label",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the box element"
                        },
                        {
                            "name": "icon",
                            "value": "p-avatar-icon",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the input element"
                        }
                    ]
                }
            }
        }
    },
    "avatarfallback": {
        "description": "AvatarFallback is a component that displays a fallback icon when the image fails to load or is not provided.\n\n[Live Demo](https://www.primereact.org/avatar/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "AvatarFallbackPassThroughOptions": {
                    "description": "Defines passthrough(pt) options of AvatarFallback component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "AvatarFallbackPassThroughOptionType<HTMLAttributes<HTMLSpanElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "AvatarFallbackProps": {
                    "description": "Defines valid properties in AvatarFallback component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "ElementType<any, keyof IntrinsicElements>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, unknown>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<Record<string, unknown>, unknown>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "template",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The template to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps"
                },
                "AvatarFallbackState": {
                    "description": "Defines valid state in AvatarFallback component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "AvatarFallbackExposes": {
                    "description": "Defines the methods and properties exposed by AvatarFallback component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "avatar",
                            "optional": false,
                            "readonly": false,
                            "type": "AvatarInstance",
                            "default": "",
                            "description": "The Avatar component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "AvatarFallbackPassThroughOptionType": {
                    "values": "PassThroughOptionType<AvatarFallbackInstance, E>",
                    "description": "Defines passthrough(pt) options type in AvatarFallback component."
                },
                "AvatarFallbackInstance": {
                    "values": "ComponentInstance<AvatarFallbackProps, AvatarFallbackState, AvatarFallbackExposes>",
                    "description": "Instance of AvatarFallback component."
                }
            }
        }
    },
    "avatargroup": {
        "description": "AvatarGroup is a component that displays a group of avatars, typically used to represent multiple users or items in a compact way.\n\n[Live Demo](https://www.primereact.org/avatar/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "AvatarGroupPassThroughOptions": {
                    "description": "Defines passthrough(pt) options of AvatarGroup component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "AvatarGroupPassThroughOptionType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "AvatarGroupProps": {
                    "description": "Defines valid properties in AvatarGroup component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "ElementType<any, keyof IntrinsicElements>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, unknown>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<Record<string, unknown>, unknown>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "template",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The template to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps"
                },
                "AvatarGroupState": {
                    "description": "Defines valid state in AvatarGroup component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "AvatarGroupExposes": {
                    "description": "Defines the methods and properties exposed by AvatarGroup component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "AvatarGroupPassThroughOptionType": {
                    "values": "PassThroughOptionType<AvatarGroupInstance, E>",
                    "description": "Defines passthrough(pt) options type in AvatarGroup component."
                },
                "AvatarGroupClassNamesType": {
                    "values": "typeof AvatarGroupClassNames[keyof typeof AvatarGroupClassNames]",
                    "description": "Type representing the CSS class names used in the Avatar component."
                },
                "AvatarGroupInstance": {
                    "values": "ComponentInstance<AvatarGroupProps, AvatarGroupState, AvatarGroupExposes>",
                    "description": "Instance of AvatarGroup component."
                }
            }
        },
        "variables": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "AvatarGroupClassNames": {
                    "description": "Defines the CSS class names used in the Avatar component.",
                    "variables": [
                        {
                            "name": "root",
                            "value": "p-avatar-group",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the root element"
                        }
                    ]
                }
            }
        }
    },
    "avatarimage": {
        "description": "AvatarImage is a component that displays an image inside an Avatar.\n\n[Live Demo](https://www.primereact.org/avatar/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "AvatarImagePassThroughOptions": {
                    "description": "Defines passthrough(pt) options of AvatarImage component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "AvatarImagePassThroughOptionType<HTMLAttributes<HTMLImageElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "AvatarImageProps": {
                    "description": "Defines valid properties in AvatarImage component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "\"img\"",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, unknown>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<Record<string, unknown>, unknown>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "template",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The template to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "The children to render."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<unknown, \"img\">"
                },
                "AvatarImageState": {
                    "description": "Defines valid state in AvatarImage component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "AvatarImageExposes": {
                    "description": "Defines the methods and properties exposed by AvatarImage component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "avatar",
                            "optional": false,
                            "readonly": false,
                            "type": "AvatarInstance",
                            "default": "",
                            "description": "The Avatar component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "AvatarImagePassThroughOptionType": {
                    "values": "PassThroughOptionType<AvatarImageInstance, E>",
                    "description": "Defines passthrough(pt) options type in AvatarImage component."
                },
                "AvatarImageInstance": {
                    "values": "ComponentInstance<AvatarImageProps, AvatarImageState, AvatarImageExposes>",
                    "description": "Instance of AvatarImage component."
                }
            }
        }
    },
    "useavatar": {
        "description": "The useAvatar manages the state and functionality of a Avatar component.\n\n[Live Demo](https://www.primereact.org/avatar/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useAvatarProps": {
                    "description": "Defines valid properties in useAvatar.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "delayDuration",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "The delay duration of the avatar."
                        }
                    ],
                    "methods": []
                },
                "useAvatarState": {
                    "description": "Defines valid state in useAvatar.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "load",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the avatar's image is loading or not."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "AvatarState"
                },
                "useAvatarExposes": {
                    "description": "Defines the methods and properties exposed by useAvatar.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "useAvatarState",
                            "default": "",
                            "description": "The state of the useAvatar."
                        },
                        {
                            "name": "handleImageLoad",
                            "optional": false,
                            "readonly": false,
                            "type": "(src?: string) => void",
                            "default": "",
                            "description": "The method to handle image load."
                        },
                        {
                            "name": "handleImageUnload",
                            "optional": false,
                            "readonly": false,
                            "type": "() => void",
                            "default": "",
                            "description": "The method to handle image unload."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "AvatarExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useAvatarInstance": {
                    "values": "HeadlessInstance<useAvatarProps, useAvatarState, useAvatarExposes>",
                    "description": "Instance of useAvatar headless."
                }
            }
        }
    },
    "badge": {
        "description": "Badge is a small status indicator for another element.\n\n[Live Demo](https://www.primereact.org/badge/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "BadgePassThroughOptions": {
                    "description": "Defines passthrough(pt) options of Badge component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "BadgePassThroughOptionType<HTMLAttributes<HTMLSpanElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "BadgeProps": {
                    "description": "Defines valid properties in Badge component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "ElementType<any, keyof IntrinsicElements>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, unknown>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<Record<string, unknown>, unknown>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "template",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The template to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "shape",
                            "optional": true,
                            "readonly": false,
                            "type": "\"circle\"",
                            "default": "",
                            "description": "Defines the shape of the badge."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "\"small\" | \"large\" | \"xlarge\"",
                            "default": "",
                            "description": "Size of the badge."
                        },
                        {
                            "name": "severity",
                            "optional": true,
                            "readonly": false,
                            "type": "\"secondary\" | \"info\" | \"success\" | \"warn\" | \"danger\" | \"contrast\"",
                            "default": "",
                            "description": "Severity type of the badge."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<useBadgeProps>"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "BadgePassThroughOptionType": {
                    "values": "PassThroughOptionType<BadgeInstance, E>",
                    "description": "Defines passthrough(pt) options type in Badge component."
                },
                "BadgeClassNamesType": {
                    "values": "typeof BadgeClassNames[keyof typeof BadgeClassNames]",
                    "description": "Type representing the CSS class names used in the Badge component."
                },
                "BadgeInstance": {
                    "values": "ComponentInstance<BadgeProps>",
                    "description": "Instance of Badge component."
                }
            }
        },
        "variables": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "BadgeClassNames": {
                    "description": "Defines the CSS class names used in the Badge component.",
                    "variables": [
                        {
                            "name": "root",
                            "value": "p-badge",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the root element"
                        }
                    ]
                }
            }
        }
    },
    "overlaybadge": {
        "description": "OverlayBadge component is used to display a badge on top of another element.\n\n[Live Demo](https://www.primereact.org/badge/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "OverlayBadgePassThroughOptions": {
                    "description": "Defines passthrough(pt) options of OverlayBadge component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "OverlayBadgePassThroughOptionType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "OverlayBadgeProps": {
                    "description": "Defines valid properties in OverlayBadge component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "ElementType<any, keyof IntrinsicElements>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, unknown>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<Record<string, unknown>, unknown>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "template",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The template to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps"
                },
                "OverlayBadgeState": {
                    "description": "Defines valid state in OverlayBadge component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "OverlayBadgeExposes": {
                    "description": "Defines the methods and properties exposed by OverlayBadge component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "OverlayBadgePassThroughOptionType": {
                    "values": "PassThroughOptionType<OverlayBadgeInstance, E>",
                    "description": "Defines passthrough(pt) options type in OverlayBadge component."
                },
                "OverlayBadgeClassNamesType": {
                    "values": "typeof OverlayBadgeClassNames[keyof typeof OverlayBadgeClassNames]",
                    "description": "Type representing the CSS class names used in the OverlayBadge component."
                },
                "OverlayBadgeInstance": {
                    "values": "ComponentInstance<OverlayBadgeProps, OverlayBadgeState, OverlayBadgeExposes>",
                    "description": "Instance of OverlayBadge component."
                }
            }
        },
        "variables": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "OverlayBadgeClassNames": {
                    "description": "Defines the CSS class names used in the OverlayBadge component.",
                    "variables": [
                        {
                            "name": "root",
                            "value": "p-overlaybadge",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the root element"
                        }
                    ]
                }
            }
        }
    },
    "usebadge": {
        "description": "The useBadge manages the state and functionality of a badge component.\n\n[Live Demo](https://www.primereact.org/badge/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useBadgeProps": {
                    "description": "Defines valid properties in useBadge.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "useBadgeState": {
                    "description": "Defines valid state in useBadge.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "useBadgeExposes": {
                    "description": "Defines the methods and properties exposed by useBadge.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useBadgeInstance": {
                    "values": "HeadlessInstance<useBadgeProps, useBadgeState, useBadgeExposes>",
                    "description": "Instance of useBadge headless."
                }
            }
        }
    },
    "button": {
        "description": "Button is an extension to standard input element with icons and theming.\n\n[Live Demo](https://www.primereact.org/button/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ButtonPassThroughOptions": {
                    "description": "Defines passthrough(pt) options of Button component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptionType<HTMLAttributes<HTMLButtonElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "ButtonProps": {
                    "description": "Defines valid properties in Button component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "ElementType<any, keyof IntrinsicElements>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, unknown>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<Record<string, unknown>, unknown>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "template",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The template to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "\"small\" | \"large\" | \"normal\"",
                            "default": "",
                            "description": "Size of the Button."
                        },
                        {
                            "name": "severity",
                            "optional": true,
                            "readonly": false,
                            "type": "string & {} | \"secondary\" | \"info\" | \"success\" | \"warn\" | \"danger\" | \"contrast\" | \"help\"",
                            "default": "",
                            "description": "Severity type of the Button."
                        },
                        {
                            "name": "variant",
                            "optional": true,
                            "readonly": false,
                            "type": "\"link\" | \"text\" | \"outlined\"",
                            "default": "",
                            "description": "Variant of the Button."
                        },
                        {
                            "name": "plain",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether to show the Button with a plain style."
                        },
                        {
                            "name": "rounded",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether to show the Button with a rounded style."
                        },
                        {
                            "name": "raised",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether to show the Button with a raised style."
                        },
                        {
                            "name": "iconOnly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether to show the Button with a borderless style."
                        },
                        {
                            "name": "fluid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether to show the Button with a fluid width."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<useButtonProps>"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ButtonPassThroughOptionType": {
                    "values": "PassThroughOptionType<ButtonInstance, E>",
                    "description": "Defines passthrough(pt) options type in Button component."
                },
                "ButtonClassNamesType": {
                    "values": "typeof ButtonClassNames[keyof typeof ButtonClassNames]",
                    "description": "Type representing the CSS class names used in the Button component."
                },
                "ButtonInstance": {
                    "values": "ComponentInstance<ButtonProps>",
                    "description": "Instance of Button component."
                }
            }
        },
        "variables": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ButtonClassNames": {
                    "description": "Defines the CSS class names used in the Button component.",
                    "variables": [
                        {
                            "name": "root",
                            "value": "p-button",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "loadingIcon",
                            "value": "p-button-loading-icon",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the loading icon element"
                        },
                        {
                            "name": "icon",
                            "value": "p-button-icon",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the icon element"
                        },
                        {
                            "name": "label",
                            "value": "p-button-label",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the label element"
                        }
                    ]
                }
            }
        }
    },
    "buttongroup": {
        "description": "ButtonGroup is a component that groups multiple buttons together.\n\n[Live Demo](https://www.primereact.org/button/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ButtonGroupPassThroughOptions": {
                    "description": "Defines passthrough(pt) options of Button component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonGroupPassThroughOptionType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "ButtonGroupProps": {
                    "description": "Defines valid properties in ButtonGroup component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "ElementType<any, keyof IntrinsicElements>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, unknown>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<Record<string, unknown>, unknown>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "template",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The template to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps"
                },
                "ButtonGroupState": {
                    "description": "Defines valid state in ButtonGroup component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "ButtonGroupExposes": {
                    "description": "Defines the methods and properties exposed by ButtonGroup component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ButtonGroupPassThroughOptionType": {
                    "values": "PassThroughOptionType<ButtonGroupInstance, E>",
                    "description": "Defines passthrough(pt) options type in Button component."
                },
                "ButtonGroupClassNamesType": {
                    "values": "typeof ButtonGroupClassNames[keyof typeof ButtonGroupClassNames]",
                    "description": "Type representing the CSS class names used in the ButtonGroup component."
                },
                "ButtonGroupInstance": {
                    "values": "ComponentInstance<ButtonGroupProps, ButtonGroupState, ButtonGroupExposes>",
                    "description": "Instance of ButtonGroup component."
                }
            }
        },
        "variables": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ButtonGroupClassNames": {
                    "description": "Defines the CSS class names used in the Button component.",
                    "variables": [
                        {
                            "name": "root",
                            "value": "p-buttongroup",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the root element"
                        }
                    ]
                }
            }
        }
    },
    "usebutton": {
        "description": "The useButton manages the state and functionality of a Button component.\n\n[Live Demo](https://www.primereact.org/Button/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useButtonProps": {
                    "description": "Defines valid properties in useButton.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "useButtonState": {
                    "description": "Defines valid state in useButton.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "useButtonExposes": {
                    "description": "Defines the methods and properties exposed by useButton.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useButtonInstance": {
                    "values": "HeadlessInstance<useButtonProps, useButtonState, useButtonExposes>",
                    "description": "Instance of useButton headless."
                }
            }
        }
    },
    "checkbox": {
        "description": "Checkbox is an extension to standard checkbox element with theming.\n\n[Live Demo](https://www.primereact.org/checkbox/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "CheckboxPassThroughOptions": {
                    "description": "Defines passthrough(pt) options of Checkbox component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "CheckboxPassThroughOptionType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "input",
                            "optional": true,
                            "readonly": false,
                            "type": "CheckboxPassThroughOptionType<InputHTMLAttributes<HTMLInputElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the input's DOM element."
                        },
                        {
                            "name": "box",
                            "optional": true,
                            "readonly": false,
                            "type": "CheckboxPassThroughOptionType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the box's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "CheckboxPassThroughOptionType<HTMLAttributes<HTMLSpanElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the icon's DOM element."
                        }
                    ],
                    "methods": []
                },
                "CheckboxChangeEvent": {
                    "description": "Event fired when the checkbox's checked state changes.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "Value of the checkbox."
                        },
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "ChangeEvent",
                            "default": "",
                            "description": "The original event that triggered the change."
                        },
                        {
                            "name": "checked",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "The checked state of the checkbox."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "CheckboxGroupUpdateChangeEvent",
                    "extendedTypes": "useCheckboxChangeEvent<React.ChangeEvent<HTMLInputElement>>"
                },
                "CheckboxProps": {
                    "description": "Defines valid properties in Checkbox component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "ElementType<any, keyof IntrinsicElements>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, unknown>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<Record<string, unknown>, unknown>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "template",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The template to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "Value of the checkbox."
                        },
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "The name of the checkbox."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "\"small\" | \"large\" | \"normal\"",
                            "default": "",
                            "description": "Defines the size of the checkbox."
                        },
                        {
                            "name": "variant",
                            "optional": true,
                            "readonly": false,
                            "type": "\"outlined\" | \"filled\"",
                            "default": "",
                            "description": "Specifies the input variant of the component."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the element should be disabled."
                        },
                        {
                            "name": "readOnly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that an input field is read-only."
                        },
                        {
                            "name": "required",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the element is required."
                        },
                        {
                            "name": "invalid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style."
                        },
                        {
                            "name": "inputId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "inputStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the input field."
                        },
                        {
                            "name": "inputClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the input field."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes a string value that labels the component."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "onFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "(event: FocusEvent<HTMLInputElement>) => void",
                            "default": "",
                            "description": "Callback function that is called when the checkbox is focused."
                        },
                        {
                            "name": "onBlur",
                            "optional": true,
                            "readonly": false,
                            "type": "(event: FocusEvent<HTMLInputElement>) => void",
                            "default": "",
                            "description": "Callback function that is called when the checkbox loses focus."
                        },
                        {
                            "name": "onCheckedChange",
                            "optional": true,
                            "readonly": false,
                            "type": "(event: CheckboxChangeEvent) => void",
                            "default": "",
                            "description": "Callback fired when the checkbox's checked state changes."
                        },
                        {
                            "name": "checked",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "When present, it specifies the input's checked state."
                        },
                        {
                            "name": "defaultChecked",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "The default value for the input when not controlled by  `checked`  and  `onCheckedChange` ."
                        },
                        {
                            "name": "indeterminate",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies input state as indeterminate."
                        },
                        {
                            "name": "trueValue",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | boolean",
                            "default": "true",
                            "description": "Value in checked state."
                        },
                        {
                            "name": "falseValue",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | boolean",
                            "default": "false",
                            "description": "Value in unchecked state."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<Omit<useCheckboxProps, \"onCheckedChange\">>"
                },
                "CheckboxState": {
                    "description": "Defines valid state in Checkbox component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "checked",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "The checked state of the useCheckbox."
                        },
                        {
                            "name": "indeterminate",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "The indeterminate state of the useCheckbox."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "useCheckboxState"
                },
                "CheckboxExposes": {
                    "description": "Defines the methods and properties exposed by Checkbox component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "useCheckboxState",
                            "default": "",
                            "description": "The state of the useCheckbox."
                        },
                        {
                            "name": "onChange",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: useCheckboxChangeEvent) => void",
                            "default": "",
                            "description": "Callback fired when the useCheckbox's checked state changes."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "useCheckboxExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "CheckboxPassThroughOptionType": {
                    "values": "PassThroughOptionType<CheckboxInstance, E>",
                    "description": "Defines passthrough(pt) options type in Checkbox component."
                },
                "CheckboxClassNamesType": {
                    "values": "typeof CheckboxClassNames[keyof typeof CheckboxClassNames]",
                    "description": "Type representing the CSS class names used in the Checkbox component."
                },
                "CheckboxInstance": {
                    "values": "ComponentInstance<CheckboxProps, CheckboxState, CheckboxExposes>",
                    "description": "Instance of Checkbox component."
                }
            }
        },
        "variables": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "CheckboxClassNames": {
                    "description": "Defines the CSS class names used in the Checkbox component.",
                    "variables": [
                        {
                            "name": "root",
                            "value": "p-checkbox",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "box",
                            "value": "p-checkbox-box",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the box element"
                        },
                        {
                            "name": "input",
                            "value": "p-checkbox-input",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the input element"
                        },
                        {
                            "name": "icon",
                            "value": "p-checkbox-icon",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the icon element"
                        }
                    ]
                }
            }
        }
    },
    "checkboxgroup": {
        "description": "CheckboxGroup allows to select multiple options from a set of choices.\n\n[Live Demo](https://www.primereact.org/checkbox/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "CheckboxGroupPassThroughOptions": {
                    "description": "Defines passthrough(pt) options of Checkbox component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "CheckboxGroupPassThroughOptionType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "CheckboxGroupValueChangeEvent": {
                    "description": "Event fired when the checkbox group's value changes.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "unknown[]",
                            "default": "",
                            "description": "The value of the checkbox group."
                        }
                    ],
                    "methods": []
                },
                "CheckboxGroupUpdateChangeEvent": {
                    "description": "Used to update the checkbox group value.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "Value of the checkbox."
                        },
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "ChangeEvent",
                            "default": "",
                            "description": "The original event that triggered the change."
                        },
                        {
                            "name": "checked",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "The checked state of the checkbox."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "CheckboxChangeEvent"
                },
                "CheckboxGroupProps": {
                    "description": "Defines valid properties in CheckboxGroup component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "ElementType<any, keyof IntrinsicElements>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, unknown>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<Record<string, unknown>, unknown>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "template",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The template to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown[]",
                            "default": "",
                            "description": "Value of the checkbox group."
                        },
                        {
                            "name": "defaultValue",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown[]",
                            "default": "",
                            "description": "The default value of the checkbox group."
                        },
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "The name of the checkboxes."
                        },
                        {
                            "name": "onValueChange",
                            "optional": true,
                            "readonly": false,
                            "type": "(event: CheckboxGroupValueChangeEvent) => void",
                            "default": "",
                            "description": "Callback function that is called when the checkbox group value changes."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps"
                },
                "CheckboxGroupState": {
                    "description": "Defines valid state in CheckboxGroup component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "CheckboxGroupExposes": {
                    "description": "Defines the methods and properties exposed by CheckboxGroup component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "updateChange",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: CheckboxGroupUpdateChangeEvent) => void",
                            "default": "",
                            "description": "Updates the value of the checkbox group."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "CheckboxGroupPassThroughOptionType": {
                    "values": "PassThroughOptionType<CheckboxGroupInstance, E>",
                    "description": "Defines passthrough(pt) options type in Checkbox component."
                },
                "CheckboxGroupClassNamesType": {
                    "values": "typeof CheckboxGroupClassNames[keyof typeof CheckboxGroupClassNames]",
                    "description": "Type representing the CSS class names used in the CheckboxGroup component."
                },
                "CheckboxGroupInstance": {
                    "values": "ComponentInstance<CheckboxGroupProps, CheckboxGroupState, CheckboxGroupExposes>",
                    "description": "Instance of CheckboxGroup component."
                }
            }
        },
        "variables": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "CheckboxGroupClassNames": {
                    "description": "Defines the CSS class names used in the CheckboxGroup component.",
                    "variables": [
                        {
                            "name": "root",
                            "value": "p-checkbox-group",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the root element"
                        }
                    ]
                }
            }
        }
    },
    "usecheckbox": {
        "description": "The useCheckbox manages the state and functionality of a checkbox component.\n\n[Live Demo](https://www.primereact.org/checkbox/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useCheckboxChangeEvent": {
                    "description": "Event fired when the checkbox's checked state changes.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "E",
                            "default": "",
                            "description": "The original event that triggered the change."
                        },
                        {
                            "name": "checked",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "The checked state of the checkbox."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "CheckboxChangeEvent"
                },
                "useCheckboxProps": {
                    "description": "Defines valid properties in useCheckbox.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "checked",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "When present, it specifies the input's checked state."
                        },
                        {
                            "name": "defaultChecked",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "The default value for the input when not controlled by  `checked`  and  `onCheckedChange` ."
                        },
                        {
                            "name": "indeterminate",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies input state as indeterminate."
                        },
                        {
                            "name": "trueValue",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | boolean",
                            "default": "true",
                            "description": "Value in checked state."
                        },
                        {
                            "name": "falseValue",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | boolean",
                            "default": "false",
                            "description": "Value in unchecked state."
                        },
                        {
                            "name": "onCheckedChange",
                            "optional": true,
                            "readonly": false,
                            "type": "(event: useCheckboxChangeEvent) => void",
                            "default": "",
                            "description": "Callback fired when the checkbox's checked state changes."
                        }
                    ],
                    "methods": []
                },
                "useCheckboxState": {
                    "description": "Defines valid state in useCheckbox.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "checked",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "The checked state of the useCheckbox."
                        },
                        {
                            "name": "indeterminate",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "The indeterminate state of the useCheckbox."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "CheckboxState"
                },
                "useCheckboxExposes": {
                    "description": "Defines the methods and properties exposed by useCheckbox.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "useCheckboxState",
                            "default": "",
                            "description": "The state of the useCheckbox."
                        },
                        {
                            "name": "onChange",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: useCheckboxChangeEvent) => void",
                            "default": "",
                            "description": "Callback fired when the useCheckbox's checked state changes."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "CheckboxExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useCheckboxInstance": {
                    "values": "HeadlessInstance<useCheckboxProps, useCheckboxState, useCheckboxExposes>",
                    "description": "Instance of useCheckbox headless."
                }
            }
        }
    },
    "chip": {
        "description": "Chip represents entities using icons, labels and images.\n\n[Live Demo](https://www.primereact.org/chip/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ChipPassThroughOptions": {
                    "description": "Defines passthrough(pt) options of Chip component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ChipPassThroughOptionType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "ChipProps": {
                    "description": "Defines valid properties in Chip component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "ElementType<any, keyof IntrinsicElements>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, unknown>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<Record<string, unknown>, unknown>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "template",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The template to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "onRemove",
                            "optional": true,
                            "readonly": false,
                            "type": "(event: useChipRemoveEvent) => void",
                            "default": "",
                            "description": "Callback fired when the chip is removed."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<useChipProps>"
                },
                "ChipState": {
                    "description": "Defines valid state in Chip component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "visible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "The visibility state of the chip."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "useChipState"
                },
                "ChipExposes": {
                    "description": "Defines the methods and properties exposed by Chip component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "useChipState",
                            "default": "",
                            "description": "The state of the useChip."
                        },
                        {
                            "name": "close",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: SyntheticEvent<HTMLElement>) => void",
                            "default": "",
                            "description": "Closes the chip."
                        },
                        {
                            "name": "removeIconProps",
                            "optional": false,
                            "readonly": false,
                            "type": "{ onKeyDown: (event: KeyboardEvent<HTMLElement>) => void }",
                            "default": "",
                            "description": "Props for the remove icon."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "useChipExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ChipPassThroughOptionType": {
                    "values": "PassThroughOptionType<ChipInstance, E>",
                    "description": "Defines passthrough(pt) options type in Chip component."
                },
                "ChipClassNamesType": {
                    "values": "typeof ChipClassNames[keyof typeof ChipClassNames]",
                    "description": "Type representing the CSS class names used in the Chip component."
                },
                "ChipInstance": {
                    "values": "ComponentInstance<ChipProps, ChipState, ChipExposes>",
                    "description": "Instance of Chip component."
                }
            }
        },
        "variables": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ChipClassNames": {
                    "description": "Defines the CSS class names used in the Chip component.",
                    "variables": [
                        {
                            "name": "root",
                            "value": "p-chip",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "image",
                            "value": "p-chip-image",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the image element"
                        },
                        {
                            "name": "icon",
                            "value": "p-chip-icon",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the icon element"
                        },
                        {
                            "name": "label",
                            "value": "p-chip-label",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the label element"
                        },
                        {
                            "name": "removeIcon",
                            "value": "p-chip-remove-icon",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the remove icon element"
                        }
                    ]
                }
            }
        }
    },
    "chipicon": {
        "description": "ChipIcon component is a part of the Chip component.\n\n[Live Demo](https://www.primereact.org/chip/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ChipIconPassThroughOptions": {
                    "description": "Defines passthrough(pt) options of ChipIcon component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ChipIconPassThroughOptionType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "ChipIconProps": {
                    "description": "Defines valid properties in ChipIcon component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "ElementType<any, keyof IntrinsicElements>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, unknown>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<Record<string, unknown>, unknown>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "template",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The template to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps"
                },
                "ChipIconState": {
                    "description": "Defines valid state in ChipIcon component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "ChipIconExposes": {
                    "description": "Defines the methods and properties exposed by ChipIcon component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "chip",
                            "optional": false,
                            "readonly": false,
                            "type": "ChipInstance",
                            "default": "",
                            "description": "The Chip component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ChipIconPassThroughOptionType": {
                    "values": "PassThroughOptionType<ChipIconInstance, E>",
                    "description": "Defines passthrough(pt) options type in ChipIcon component."
                },
                "ChipIconInstance": {
                    "values": "ComponentInstance<ChipIconProps, ChipIconState, ChipIconExposes>",
                    "description": "Instance of ChipIcon component."
                }
            }
        }
    },
    "chipimage": {
        "description": "ChipImage component is a part of the Chip component.\n\n[Live Demo](https://www.primereact.org/chip/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ChipImagePassThroughOptions": {
                    "description": "Defines passthrough(pt) options of ChipImage component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ChipImagePassThroughOptionType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "ChipImageProps": {
                    "description": "Defines valid properties in ChipImage component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "ElementType<any, keyof IntrinsicElements>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, unknown>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<Record<string, unknown>, unknown>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "template",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The template to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps"
                },
                "ChipImageState": {
                    "description": "Defines valid state in ChipImage component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "ChipImageExposes": {
                    "description": "Defines the methods and properties exposed by ChipImage component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "chip",
                            "optional": false,
                            "readonly": false,
                            "type": "ChipInstance",
                            "default": "",
                            "description": "The Chip component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ChipImagePassThroughOptionType": {
                    "values": "PassThroughOptionType<ChipImageInstance, E>",
                    "description": "Defines passthrough(pt) options type in ChipImage component."
                },
                "ChipImageInstance": {
                    "values": "ComponentInstance<ChipImageProps, ChipImageState, ChipImageExposes>",
                    "description": "Instance of ChipImage component."
                }
            }
        }
    },
    "chiplabel": {
        "description": "ChipLabel component is a part of the Chip component.\n\n[Live Demo](https://www.primereact.org/chip/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ChipLabelPassThroughOptions": {
                    "description": "Defines passthrough(pt) options of ChipLabel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ChipLabelPassThroughOptionType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "ChipLabelProps": {
                    "description": "Defines valid properties in ChipLabel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "ElementType<any, keyof IntrinsicElements>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, unknown>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<Record<string, unknown>, unknown>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "template",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The template to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps"
                },
                "ChipLabelState": {
                    "description": "Defines valid state in ChipLabel component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "ChipLabelExposes": {
                    "description": "Defines the methods and properties exposed by ChipLabel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "chip",
                            "optional": false,
                            "readonly": false,
                            "type": "ChipInstance",
                            "default": "",
                            "description": "The Chip component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ChipLabelPassThroughOptionType": {
                    "values": "PassThroughOptionType<ChipLabelInstance, E>",
                    "description": "Defines passthrough(pt) options type in ChipLabel component."
                },
                "ChipLabelInstance": {
                    "values": "ComponentInstance<ChipLabelProps, ChipLabelState, ChipLabelExposes>",
                    "description": "Instance of ChipLabel component."
                }
            }
        }
    },
    "chipremoveicon": {
        "description": "ChipRemoveIcon component is a part of the Chip component.\n\n[Live Demo](https://www.primereact.org/chip/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ChipRemoveIconPassThroughOptions": {
                    "description": "Defines passthrough(pt) options of ChipRemoveIcon component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ChipRemoveIconPassThroughOptionType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "ChipRemoveIconProps": {
                    "description": "Defines valid properties in ChipRemoveIcon component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "ElementType<any, keyof IntrinsicElements>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, unknown>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<Record<string, unknown>, unknown>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "template",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The template to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps"
                },
                "ChipRemoveIconState": {
                    "description": "Defines valid state in ChipRemoveIcon component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "ChipRemoveIconExposes": {
                    "description": "Defines the methods and properties exposed by ChipRemoveIcon component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "chip",
                            "optional": false,
                            "readonly": false,
                            "type": "ChipInstance",
                            "default": "",
                            "description": "The Chip component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ChipRemoveIconPassThroughOptionType": {
                    "values": "PassThroughOptionType<ChipRemoveIconInstance, E>",
                    "description": "Defines passthrough(pt) options type in ChipRemoveIcon component."
                },
                "ChipRemoveIconInstance": {
                    "values": "ComponentInstance<ChipRemoveIconProps, ChipRemoveIconState, ChipRemoveIconExposes>",
                    "description": "Instance of ChipRemoveIcon component."
                }
            }
        }
    },
    "usechip": {
        "description": "The useChip manages the state and functionality of a chip component.\n\n[Live Demo](https://www.primereact.org/chip/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useChipRemoveEvent": {
                    "description": "Event fired when the chip's remove icon is clicked.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "E",
                            "default": "",
                            "description": "The original event that triggered the change."
                        }
                    ],
                    "methods": []
                },
                "useChipProps": {
                    "description": "Defines valid properties in useChip.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "onRemove",
                            "optional": true,
                            "readonly": false,
                            "type": "(event: useChipRemoveEvent) => void",
                            "default": "",
                            "description": "Callback fired when the chip is removed."
                        }
                    ],
                    "methods": []
                },
                "useChipState": {
                    "description": "Defines valid state in useChip.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "visible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "The visibility state of the chip."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "ChipState"
                },
                "useChipExposes": {
                    "description": "Defines the methods and properties exposed by useChip.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "useChipState",
                            "default": "",
                            "description": "The state of the useChip."
                        },
                        {
                            "name": "close",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: SyntheticEvent<HTMLElement>) => void",
                            "default": "",
                            "description": "Closes the chip."
                        },
                        {
                            "name": "removeIconProps",
                            "optional": false,
                            "readonly": false,
                            "type": "{ onKeyDown: (event: KeyboardEvent<HTMLElement>) => void }",
                            "default": "",
                            "description": "Props for the remove icon."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "ChipExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useChipInstance": {
                    "values": "HeadlessInstance<useChipProps, useChipState, useChipExposes>",
                    "description": "Instance of useChip headless."
                }
            }
        }
    },
    "inplace": {
        "description": "Inplace provides an easy to do editing and display at the same time where clicking the output displays the actual content.\n\n[Live Demo](https://www.primereact.org/inplace/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InplacePassThroughOptions": {
                    "description": "Defines passthrough(pt) options of Inplace component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "InplacePassThroughOptionType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "InplaceChangeEvent": {
                    "description": "Event fired when the Inplace's checked state changes.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "Value of the Inplace."
                        },
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "The active state of the inplace."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "useInplaceChangeEvent"
                },
                "InplaceProps": {
                    "description": "Defines valid properties in Inplace component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "ElementType<any, keyof IntrinsicElements>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, unknown>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<Record<string, unknown>, unknown>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "template",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The template to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the element should be disabled."
                        },
                        {
                            "name": "active",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the content is displayed or not."
                        },
                        {
                            "name": "onActiveChange",
                            "optional": true,
                            "readonly": false,
                            "type": "(active: boolean) => void",
                            "default": "",
                            "description": "Callback function that is called when the element is clicked."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<useInplaceProps>"
                },
                "InplaceState": {
                    "description": "Defines valid state in Inplace component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "The active state of the useInplace."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "useInplaceState"
                },
                "InplaceExposes": {
                    "description": "Defines the methods and properties exposed by Inplace component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "useInplaceState",
                            "default": "",
                            "description": "The state of the useInplace."
                        },
                        {
                            "name": "open",
                            "optional": false,
                            "readonly": false,
                            "type": "() => void",
                            "default": "",
                            "description": "Method to open the inplace."
                        },
                        {
                            "name": "close",
                            "optional": false,
                            "readonly": false,
                            "type": "() => void",
                            "default": "",
                            "description": "Method to close the inplace."
                        },
                        {
                            "name": "onActiveChange",
                            "optional": false,
                            "readonly": false,
                            "type": "() => void",
                            "default": "",
                            "description": "Method to handle the active change event."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "useInplaceExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InplacePassThroughOptionType": {
                    "values": "PassThroughOptionType<InplaceInstance, E>",
                    "description": "Defines passthrough(pt) options type in Inplace component."
                },
                "InplaceClassNamesType": {
                    "values": "typeof InplaceClassNames[keyof typeof InplaceClassNames]",
                    "description": "Type representing the CSS class names used in the Inplace component."
                },
                "InplaceInstance": {
                    "values": "ComponentInstance<InplaceProps, InplaceState, InplaceExposes>",
                    "description": "Instance of Inplace component."
                }
            }
        },
        "variables": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "InplaceClassNames": {
                    "description": "Defines the CSS class names used in the Inplace component.",
                    "variables": [
                        {
                            "name": "root",
                            "value": "p-inplace",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "display",
                            "value": "p-inplace-display",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the display element"
                        },
                        {
                            "name": "content",
                            "value": "p-inplace-content",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the content element"
                        }
                    ]
                }
            }
        }
    },
    "inplaceclose": {
        "description": "InplaceClose component is a part of the PrimeReact library.\n\n[Live Demo](https://www.primereact.org/inplace/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InplaceClosePassThroughOptions": {
                    "description": "Defines passthrough(pt) options of InplaceClose component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "InplaceClosePassThroughOptionType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "InplaceCloseProps": {
                    "description": "Defines valid properties in InplaceClose component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "ElementType<any, keyof IntrinsicElements>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, unknown>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<Record<string, unknown>, unknown>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "template",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The template to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps"
                },
                "InplaceCloseState": {
                    "description": "Defines valid state in InplaceClose component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "InplaceCloseExposes": {
                    "description": "Defines the methods and properties exposed by InplaceClose component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "inplace",
                            "optional": false,
                            "readonly": false,
                            "type": "InplaceInstance",
                            "default": "",
                            "description": "The Inplace component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InplaceClosePassThroughOptionType": {
                    "values": "PassThroughOptionType<InplaceCloseInstance, E>",
                    "description": "Defines passthrough(pt) options type in InplaceClose component."
                },
                "InplaceCloseInstance": {
                    "values": "ComponentInstance<InplaceCloseProps, InplaceCloseState, InplaceCloseExposes>",
                    "description": "Instance of InplaceClose component."
                }
            }
        }
    },
    "inplacecontent": {
        "description": "InplaceContent component is a part of the PrimeReact library.\n\n[Live Demo](https://www.primereact.org/inplace/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InplaceContentPassThroughOptions": {
                    "description": "Defines passthrough(pt) options of InplaceContent component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "InplaceContentPassThroughOptionType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "InplaceContentProps": {
                    "description": "Defines valid properties in InplaceContent component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "ElementType<any, keyof IntrinsicElements>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, unknown>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<Record<string, unknown>, unknown>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "template",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The template to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps"
                },
                "InplaceContentState": {
                    "description": "Defines valid state in InplaceContent component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "InplaceContentExposes": {
                    "description": "Defines the methods and properties exposed by InplaceContent component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "inplace",
                            "optional": false,
                            "readonly": false,
                            "type": "InplaceInstance",
                            "default": "",
                            "description": "The Inplace component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InplaceContentPassThroughOptionType": {
                    "values": "PassThroughOptionType<InplaceContentInstance, E>",
                    "description": "Defines passthrough(pt) options type in InplaceContent component."
                },
                "InplaceContentInstance": {
                    "values": "ComponentInstance<InplaceContentProps, InplaceContentState, InplaceContentExposes>",
                    "description": "Instance of InplaceContent component."
                }
            }
        }
    },
    "inplacedisplay": {
        "description": "InplaceDisplay component is a part of the PrimeReact library.\n\n[Live Demo](https://www.primereact.org/inplace/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InplaceDisplayPassThroughOptions": {
                    "description": "Defines passthrough(pt) options of InplaceDisplay component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "InplaceDisplayPassThroughOptionType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "InplaceDisplayProps": {
                    "description": "Defines valid properties in InplaceDisplay component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "ElementType<any, keyof IntrinsicElements>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, unknown>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<Record<string, unknown>, unknown>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "template",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The template to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps"
                },
                "InplaceDisplayState": {
                    "description": "Defines valid state in InplaceDisplay component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "InplaceDisplayExposes": {
                    "description": "Defines the methods and properties exposed by InplaceDisplay component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "inplace",
                            "optional": false,
                            "readonly": false,
                            "type": "InplaceInstance",
                            "default": "",
                            "description": "The Inplace component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InplaceDisplayPassThroughOptionType": {
                    "values": "PassThroughOptionType<InplaceDisplayInstance, E>",
                    "description": "Defines passthrough(pt) options type in InplaceDisplay component."
                },
                "InplaceDisplayInstance": {
                    "values": "ComponentInstance<InplaceDisplayProps, InplaceDisplayState, InplaceDisplayExposes>",
                    "description": "Instance of InplaceDisplay component."
                }
            }
        }
    },
    "useinplace": {
        "description": "The useInplace manages the state and functionality of a inplace component.\n\n[Live Demo](https://www.primereact.org/checkbox/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useInplaceChangeEvent": {
                    "description": "Event fired when the checkbox's checked state changes.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "The active state of the inplace."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "InplaceChangeEvent"
                },
                "useInplaceProps": {
                    "description": "Defines valid properties in useInplace.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "active",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the content is displayed or not."
                        },
                        {
                            "name": "onActiveChange",
                            "optional": true,
                            "readonly": false,
                            "type": "(active: boolean) => void",
                            "default": "",
                            "description": "Callback function that is called when the element is clicked."
                        }
                    ],
                    "methods": []
                },
                "useInplaceState": {
                    "description": "Defines valid state in useInplace.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "The active state of the useInplace."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "InplaceState"
                },
                "useInplaceExposes": {
                    "description": "Defines the methods and properties exposed by useInplace.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "useInplaceState",
                            "default": "",
                            "description": "The state of the useInplace."
                        },
                        {
                            "name": "open",
                            "optional": false,
                            "readonly": false,
                            "type": "() => void",
                            "default": "",
                            "description": "Method to open the inplace."
                        },
                        {
                            "name": "close",
                            "optional": false,
                            "readonly": false,
                            "type": "() => void",
                            "default": "",
                            "description": "Method to close the inplace."
                        },
                        {
                            "name": "onActiveChange",
                            "optional": false,
                            "readonly": false,
                            "type": "() => void",
                            "default": "",
                            "description": "Method to handle the active change event."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "InplaceExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useInplaceInstance": {
                    "values": "HeadlessInstance<useInplaceProps, useInplaceState, useInplaceExposes>",
                    "description": "Instance of useInplace headless."
                }
            }
        }
    },
    "inputtext": {
        "description": "InputText is an extension to standard input element with theming.\n\n[Live Demo](https://www.primereact.org/inputtext/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InputTextPassThroughOptions": {
                    "description": "Defines passthrough(pt) options of InputText component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "InputTextPassThroughOptionType<HTMLAttributes<HTMLInputElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "InputTextProps": {
                    "description": "Defines valid properties in InputText component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "ElementType<any, keyof IntrinsicElements>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, unknown>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<Record<string, unknown>, unknown>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "template",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The template to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "\"small\" | \"large\" | \"normal\"",
                            "default": "",
                            "description": "Defines the size of the InputText."
                        },
                        {
                            "name": "variant",
                            "optional": true,
                            "readonly": false,
                            "type": "\"outlined\" | \"filled\"",
                            "default": "",
                            "description": "Specifies the input variant of the component."
                        },
                        {
                            "name": "fluid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "When enabled, the component will stretch to occupy the full width of its container."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<useInputTextProps>"
                },
                "InputTextState": {
                    "description": "Defines valid state in InputText component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "useInputTextState"
                },
                "InputTextExposes": {
                    "description": "Defines the methods and properties exposed by InputText component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "useInputTextExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InputTextPassThroughOptionType": {
                    "values": "PassThroughOptionType<InputTextInstance, E>",
                    "description": "Defines passthrough(pt) options type in InputText component."
                },
                "InputTextClassNamesType": {
                    "values": "typeof InputTextClassNames[keyof typeof InputTextClassNames]",
                    "description": "Type representing the CSS class names used in the InputText component."
                },
                "InputTextInstance": {
                    "values": "ComponentInstance<InputTextProps, InputTextState, InputTextExposes>",
                    "description": "Instance of InputText component."
                }
            }
        },
        "variables": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "InputTextClassNames": {
                    "description": "Defines the CSS class names used in the InputText component.",
                    "variables": [
                        {
                            "name": "root",
                            "value": "p-inputtext",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the root element"
                        }
                    ]
                }
            }
        }
    },
    "useInputText": {
        "description": "The useInputText manages the state and functionality of an input text component.\n\n[Live Demo](https://www.primereact.org/inputtext/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useInputTextProps": {
                    "description": "Defines valid properties in useInputText.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "useInputTextState": {
                    "description": "Defines valid state in useInputText.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedBy": "InputTextState"
                },
                "useInputTextExposes": {
                    "description": "Defines the methods and properties exposed by useInputText.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedBy": "InputTextExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useInputTextInstance": {
                    "values": "HeadlessInstance<useInputTextProps, useInputTextState, useInputTextExposes>",
                    "description": "Instance of useInputText headless."
                }
            }
        }
    },
    "metergroup": {
        "description": "MeterGroup displays scalar measurements within a known range.\n\n[Live Demo](https://www.primereact.org/metergroup/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MeterGroupPassThroughOptions": {
                    "description": "Defines passthrough(pt) options of MeterGroup component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "MeterGroupPassThroughOptionType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "MeterGroupProps": {
                    "description": "Defines valid properties in MeterGroup component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "ElementType<any, keyof IntrinsicElements>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, unknown>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<Record<string, unknown>, unknown>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "template",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The template to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "orientation",
                            "optional": true,
                            "readonly": false,
                            "type": "\"horizontal\" | \"vertical\"",
                            "default": "horizontal",
                            "description": "Specifies the layout of the component."
                        },
                        {
                            "name": "min",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Minimum boundary value."
                        },
                        {
                            "name": "max",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "100",
                            "description": "Maximum boundary value."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<useMeterGroupProps>"
                },
                "MeterGroupState": {
                    "description": "Defines valid state in MeterGroup component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "totalPercent",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "The total percentage of the meter group."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "useMeterGroupState"
                },
                "MeterGroupExposes": {
                    "description": "Defines the methods and properties exposed by MeterGroup component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "useMeterGroupState",
                            "default": "",
                            "description": "The state of the useMeterGroup."
                        },
                        {
                            "name": "percent",
                            "optional": false,
                            "readonly": false,
                            "type": "(meterValue: number) => number",
                            "default": "",
                            "description": "Converts a meter value to a percentage."
                        },
                        {
                            "name": "percentAsString",
                            "optional": false,
                            "readonly": false,
                            "type": "(meterValue: number) => string",
                            "default": "",
                            "description": "Converts a meter value to a percentage string."
                        },
                        {
                            "name": "updateTotalPercent",
                            "optional": false,
                            "readonly": false,
                            "type": "(percent: number) => void",
                            "default": "",
                            "description": "Updates the total percentage of the meter group."
                        },
                        {
                            "name": "resetTotalPercent",
                            "optional": false,
                            "readonly": false,
                            "type": "() => void",
                            "default": "",
                            "description": "Resets the total percentage of the meter group to 0."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "useMeterGroupExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MeterGroupPassThroughOptionType": {
                    "values": "PassThroughOptionType<MeterGroupInstance, E>",
                    "description": "Defines passthrough(pt) options type in MeterGroup component."
                },
                "MeterGroupClassNamesType": {
                    "values": "typeof MeterGroupClassNames[keyof typeof MeterGroupClassNames]",
                    "description": "Type representing the CSS class names used in the MeterGroup component."
                },
                "MeterGroupInstance": {
                    "values": "ComponentInstance<MeterGroupProps, MeterGroupState, MeterGroupExposes>",
                    "description": "Instance of MeterGroup component."
                }
            }
        },
        "variables": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "MeterGroupClassNames": {
                    "description": "Defines the CSS class names used in the MeterGroup component.",
                    "variables": [
                        {
                            "name": "root",
                            "value": "p-metergroup",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "meters",
                            "value": "p-metergroup-meters",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the meters element"
                        },
                        {
                            "name": "meter",
                            "value": "p-metergroup-meter",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the meter element"
                        },
                        {
                            "name": "labelList",
                            "value": "p-metergroup-label-list",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the label list element"
                        },
                        {
                            "name": "label",
                            "value": "p-metergroup-label",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the label element"
                        },
                        {
                            "name": "labelIcon",
                            "value": "p-metergroup-label-icon",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the label icon element"
                        },
                        {
                            "name": "labelMarker",
                            "value": "p-metergroup-label-marker",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the label marker element"
                        },
                        {
                            "name": "labelText",
                            "value": "p-metergroup-label-text",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the label text element"
                        }
                    ]
                }
            }
        }
    },
    "metergroupicon": {
        "description": "MeterGroupIcon is a component that displays an icon.\n\n[Live Demo](https://www.primereact.org/metergroup/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MeterGroupIconPassThroughOptions": {
                    "description": "Defines passthrough(pt) options of MeterGroupIcon component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "MeterGroupIconPassThroughOptionType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "MeterGroupIconProps": {
                    "description": "Defines valid properties in MeterGroupIcon component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "ElementType<any, keyof IntrinsicElements>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, unknown>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<Record<string, unknown>, unknown>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "template",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The template to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "color",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines the color of the icon."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps"
                },
                "MeterGroupIconState": {
                    "description": "Defines valid state in MeterGroupIcon component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "MeterGroupIconExposes": {
                    "description": "Defines the methods and properties exposed by MeterGroupIcon component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "metergroup",
                            "optional": false,
                            "readonly": false,
                            "type": "MeterGroupInstance",
                            "default": "",
                            "description": "The MeterGroup component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MeterGroupIconPassThroughOptionType": {
                    "values": "PassThroughOptionType<MeterGroupIconInstance, E>",
                    "description": "Defines passthrough(pt) options type in MeterGroupIcon component."
                },
                "MeterGroupIconInstance": {
                    "values": "ComponentInstance<MeterGroupIconProps, MeterGroupIconState, MeterGroupIconExposes>",
                    "description": "Instance of MeterGroupIcon component."
                }
            }
        }
    },
    "metergrouplabel": {
        "description": "MeterGroupLabel is a component that displays a label.\n\n[Live Demo](https://www.primereact.org/metergroup/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MeterGroupLabelPassThroughOptions": {
                    "description": "Defines passthrough(pt) options of MeterGroupLabel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "MeterGroupLabelPassThroughOptionType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "MeterGroupLabelProps": {
                    "description": "Defines valid properties in MeterGroupLabel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "ElementType<any, keyof IntrinsicElements>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, unknown>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<Record<string, unknown>, unknown>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "template",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The template to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "color",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines the color of the label."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps"
                },
                "MeterGroupLabelState": {
                    "description": "Defines valid state in MeterGroupLabel component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "MeterGroupLabelExposes": {
                    "description": "Defines the methods and properties exposed by MeterGroupLabel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "metergroup",
                            "optional": false,
                            "readonly": false,
                            "type": "MeterGroupInstance",
                            "default": "",
                            "description": "The MeterGroup component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MeterGroupLabelPassThroughOptionType": {
                    "values": "PassThroughOptionType<MeterGroupLabelInstance, E>",
                    "description": "Defines passthrough(pt) options type in MeterGroupLabel component."
                },
                "MeterGroupLabelInstance": {
                    "values": "ComponentInstance<MeterGroupLabelProps, MeterGroupLabelState, MeterGroupLabelExposes>",
                    "description": "Instance of MeterGroupLabel component."
                }
            }
        }
    },
    "metergrouplabels": {
        "description": "MeterGroupLabels is a component that displays a group of labels.\n\n[Live Demo](https://www.primereact.org/metergroup/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MeterGroupLabelsPassThroughOptions": {
                    "description": "Defines passthrough(pt) options of MeterGroupLabels component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "MeterGroupLabelsPassThroughOptionType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "MeterGroupLabelsProps": {
                    "description": "Defines valid properties in MeterGroupLabels component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "ElementType<any, keyof IntrinsicElements>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, unknown>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<Record<string, unknown>, unknown>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "template",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The template to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "orientation",
                            "optional": true,
                            "readonly": false,
                            "type": "\"horizontal\" | \"vertical\"",
                            "default": "horizontal",
                            "description": "Specifies the label orientation of the component."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps"
                },
                "MeterGroupLabelsState": {
                    "description": "Defines valid state in MeterGroupLabels component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "MeterGroupLabelsExposes": {
                    "description": "Defines the methods and properties exposed by MeterGroupLabels component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "metergroup",
                            "optional": false,
                            "readonly": false,
                            "type": "MeterGroupInstance",
                            "default": "",
                            "description": "The MeterGroup component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MeterGroupLabelsPassThroughOptionType": {
                    "values": "PassThroughOptionType<MeterGroupLabelsInstance, E>",
                    "description": "Defines passthrough(pt) options type in MeterGroupLabels component."
                },
                "MeterGroupLabelsInstance": {
                    "values": "ComponentInstance<MeterGroupLabelsProps, MeterGroupLabelsState, MeterGroupLabelsExposes>",
                    "description": "Instance of MeterGroupLabels component."
                }
            }
        }
    },
    "metergroupmarker": {
        "description": "MeterGroupMarker is a component that represents a marker in a MeterGroup component.\n\n[Live Demo](https://www.primereact.org/metergroup/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MeterGroupMarkerPassThroughOptions": {
                    "description": "Defines passthrough(pt) options of MeterGroupMarker component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "MeterGroupMarkerPassThroughOptionType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "MeterGroupMarkerProps": {
                    "description": "Defines valid properties in MeterGroupMarker component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "ElementType<any, keyof IntrinsicElements>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, unknown>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<Record<string, unknown>, unknown>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "template",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The template to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "color",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines the color of the marker."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps"
                },
                "MeterGroupMarkerState": {
                    "description": "Defines valid state in MeterGroupMarker component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "MeterGroupMarkerExposes": {
                    "description": "Defines the methods and properties exposed by MeterGroupMarker component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "metergroup",
                            "optional": false,
                            "readonly": false,
                            "type": "MeterGroupInstance",
                            "default": "",
                            "description": "The MeterGroup component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MeterGroupMarkerPassThroughOptionType": {
                    "values": "PassThroughOptionType<MeterGroupMarkerInstance, E>",
                    "description": "Defines passthrough(pt) options type in MeterGroupMarker component."
                },
                "MeterGroupMarkerInstance": {
                    "values": "ComponentInstance<MeterGroupMarkerProps, MeterGroupMarkerState, MeterGroupMarkerExposes>",
                    "description": "Instance of MeterGroupMarker component."
                }
            }
        }
    },
    "metergroupmeter": {
        "description": "MeterGroupMeter is a component that displays a meter.\n\n[Live Demo](https://www.primereact.org/metergroup/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MeterGroupMeterPassThroughOptions": {
                    "description": "Defines passthrough(pt) options of MeterGroupMeter component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "MeterGroupMeterPassThroughOptionType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "MeterGroupMeterProps": {
                    "description": "Defines valid properties in MeterGroupMeter component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "ElementType<any, keyof IntrinsicElements>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, unknown>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<Record<string, unknown>, unknown>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "template",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The template to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Defines the value of the meter."
                        },
                        {
                            "name": "color",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines the color of the meter."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps"
                },
                "MeterGroupMeterState": {
                    "description": "Defines valid state in MeterGroupMeter component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "MeterGroupMeterExposes": {
                    "description": "Defines the methods and properties exposed by MeterGroupMeter component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "metergroup",
                            "optional": false,
                            "readonly": false,
                            "type": "MeterGroupInstance",
                            "default": "",
                            "description": "The MeterGroup component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MeterGroupMeterPassThroughOptionType": {
                    "values": "PassThroughOptionType<MeterGroupMeterInstance, E>",
                    "description": "Defines passthrough(pt) options type in MeterGroupMeter component."
                },
                "MeterGroupMeterInstance": {
                    "values": "ComponentInstance<MeterGroupMeterProps, MeterGroupMeterState, MeterGroupMeterExposes>",
                    "description": "Instance of MeterGroupMeter component."
                }
            }
        }
    },
    "metergroupmeters": {
        "description": "MeterGroupMeters is a component that displays a group of meters.\n\n[Live Demo](https://www.primereact.org/metergroup/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MeterGroupMetersPassThroughOptions": {
                    "description": "Defines passthrough(pt) options of MeterGroupMeters component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "MeterGroupMetersPassThroughOptionType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "MeterGroupMetersProps": {
                    "description": "Defines valid properties in MeterGroupMeters component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "ElementType<any, keyof IntrinsicElements>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, unknown>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<Record<string, unknown>, unknown>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "template",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The template to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps"
                },
                "MeterGroupMetersState": {
                    "description": "Defines valid state in MeterGroupMeters component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "MeterGroupMetersExposes": {
                    "description": "Defines the methods and properties exposed by MeterGroupMeters component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "metergroup",
                            "optional": false,
                            "readonly": false,
                            "type": "MeterGroupInstance",
                            "default": "",
                            "description": "The MeterGroup component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MeterGroupMetersPassThroughOptionType": {
                    "values": "PassThroughOptionType<MeterGroupMetersInstance, E>",
                    "description": "Defines passthrough(pt) options type in MeterGroupMeters component."
                },
                "MeterGroupMetersInstance": {
                    "values": "ComponentInstance<MeterGroupMetersProps, MeterGroupMetersState, MeterGroupMetersExposes>",
                    "description": "Instance of MeterGroupMeters component."
                }
            }
        }
    },
    "metergrouptext": {
        "description": "MeterGroupText is a component that displays text inside a MeterGroup.\n\n[Live Demo](https://www.primereact.org/metergroup/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MeterGroupTextPassThroughOptions": {
                    "description": "Defines passthrough(pt) options of MeterGroupText component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "MeterGroupTextPassThroughOptionType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "MeterGroupTextProps": {
                    "description": "Defines valid properties in MeterGroupText component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "ElementType<any, keyof IntrinsicElements>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, unknown>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<Record<string, unknown>, unknown>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "template",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The template to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps"
                },
                "MeterGroupTextState": {
                    "description": "Defines valid state in MeterGroupText component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "MeterGroupTextExposes": {
                    "description": "Defines the methods and properties exposed by MeterGroupText component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "metergroup",
                            "optional": false,
                            "readonly": false,
                            "type": "MeterGroupInstance",
                            "default": "",
                            "description": "The MeterGroup component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MeterGroupTextPassThroughOptionType": {
                    "values": "PassThroughOptionType<MeterGroupTextInstance, E>",
                    "description": "Defines passthrough(pt) options type in MeterGroupText component."
                },
                "MeterGroupTextInstance": {
                    "values": "ComponentInstance<MeterGroupTextProps, MeterGroupTextState, MeterGroupTextExposes>",
                    "description": "Instance of MeterGroupText component."
                }
            }
        }
    },
    "usemetergroup": {
        "description": "The useMeterGroup manages the state and functionality of a meter group component.\n\n[Live Demo](https://www.primereact.org/metergroup/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useMeterGroupProps": {
                    "description": "Defines valid properties in useMeterGroup.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "min",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Minimum boundary value."
                        },
                        {
                            "name": "max",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "100",
                            "description": "Maximum boundary value."
                        }
                    ],
                    "methods": []
                },
                "useMeterGroupState": {
                    "description": "Defines valid state in useMeterGroup.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "totalPercent",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "The total percentage of the meter group."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "MeterGroupState"
                },
                "useMeterGroupExposes": {
                    "description": "Defines the methods and properties exposed by useMeterGroup.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "useMeterGroupState",
                            "default": "",
                            "description": "The state of the useMeterGroup."
                        },
                        {
                            "name": "percent",
                            "optional": false,
                            "readonly": false,
                            "type": "(meterValue: number) => number",
                            "default": "",
                            "description": "Converts a meter value to a percentage."
                        },
                        {
                            "name": "percentAsString",
                            "optional": false,
                            "readonly": false,
                            "type": "(meterValue: number) => string",
                            "default": "",
                            "description": "Converts a meter value to a percentage string."
                        },
                        {
                            "name": "updateTotalPercent",
                            "optional": false,
                            "readonly": false,
                            "type": "(percent: number) => void",
                            "default": "",
                            "description": "Updates the total percentage of the meter group."
                        },
                        {
                            "name": "resetTotalPercent",
                            "optional": false,
                            "readonly": false,
                            "type": "() => void",
                            "default": "",
                            "description": "Resets the total percentage of the meter group to 0."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "MeterGroupExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useMeterGroupInstance": {
                    "values": "HeadlessInstance<useMeterGroupProps, useMeterGroupState, useMeterGroupExposes>",
                    "description": "Instance of useMeterGroup headless."
                }
            }
        }
    },
    "panel": {
        "description": "Panel is a grouping component providing with content toggle feature.\n\n[Live Demo](https://www.primereact.org/panel/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PanelPassThroughOptions": {
                    "description": "Defines passthrough(pt) options of Panel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelPassThroughOptionType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "PanelProps": {
                    "description": "Defines valid properties in Panel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "ElementType<any, keyof IntrinsicElements>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, unknown>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<Record<string, unknown>, unknown>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "template",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The template to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "toggleable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, the content of panel can be expanded and collapsed by clicking the header."
                        },
                        {
                            "name": "collapsed",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the panel is collapsed."
                        },
                        {
                            "name": "onCollapse",
                            "optional": true,
                            "readonly": false,
                            "type": "(event: SyntheticEvent) => void",
                            "default": "",
                            "description": "Callback triggered when the panel is collapsed."
                        },
                        {
                            "name": "onExpand",
                            "optional": true,
                            "readonly": false,
                            "type": "(event: SyntheticEvent) => void",
                            "default": "",
                            "description": "Callback triggered when the panel is expanded."
                        },
                        {
                            "name": "onToggle",
                            "optional": true,
                            "readonly": false,
                            "type": "(event: usePanelToggleEvent) => void",
                            "default": "",
                            "description": "Callback triggered when the panel's toggle state changes."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<usePanelProps>"
                },
                "PanelState": {
                    "description": "Defines valid state in Panel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "collapsed",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the panel is collapsed."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "usePanelState"
                },
                "PanelExposes": {
                    "description": "Defines the methods and properties exposed by Panel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "usePanelState",
                            "default": "",
                            "description": "The state of the usePanel."
                        },
                        {
                            "name": "contentRef",
                            "optional": false,
                            "readonly": false,
                            "type": "RefObject<HTMLDivElement>",
                            "default": "",
                            "description": "Reference to the content element of the panel."
                        },
                        {
                            "name": "toggle",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: SyntheticEvent) => void",
                            "default": "",
                            "description": "Toggles the collapsed state of the panel."
                        },
                        {
                            "name": "expand",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: SyntheticEvent) => void",
                            "default": "",
                            "description": "Expands the panel."
                        },
                        {
                            "name": "collapse",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: SyntheticEvent) => void",
                            "default": "",
                            "description": "Collapses the panel."
                        },
                        {
                            "name": "onButtonClick",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: SyntheticEvent) => void",
                            "default": "",
                            "description": "Callback for when the toggle button is clicked."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "usePanelExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PanelPassThroughOptionType": {
                    "values": "PassThroughOptionType<PanelInstance, E>",
                    "description": "Defines passthrough(pt) options type in Panel component."
                },
                "PanelClassNamesType": {
                    "values": "typeof PanelClassNames[keyof typeof PanelClassNames]",
                    "description": "Type representing the CSS class names used in the Panel component."
                },
                "PanelInstance": {
                    "values": "ComponentInstance<PanelProps, PanelState, PanelExposes>",
                    "description": "Instance of Panel component."
                }
            }
        },
        "variables": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "PanelClassNames": {
                    "description": "Defines the CSS class names used in the Panel component.",
                    "variables": [
                        {
                            "name": "root",
                            "value": "p-panel",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "header",
                            "value": "p-panel-header",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the header element"
                        },
                        {
                            "name": "title",
                            "value": "p-panel-title",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the title element"
                        },
                        {
                            "name": "headerActions",
                            "value": "p-panel-header-actions",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the header actions element"
                        },
                        {
                            "name": "pcToggleButton",
                            "value": "p-panel-toggle-button",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the toggle button element"
                        },
                        {
                            "name": "content",
                            "value": "p-panel-content",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the content element"
                        }
                    ]
                }
            }
        }
    },
    "panelcollapse": {
        "description": "PanelCollapse is a component that displays a collapse button.\n\n[Live Demo](https://www.primereact.org/panel/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PanelCollapsePassThroughOptions": {
                    "description": "Defines passthrough(pt) options of PanelCollapse component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelCollapsePassThroughOptionType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "PanelCollapseProps": {
                    "description": "Defines valid properties in PanelCollapse component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "ElementType<any, keyof IntrinsicElements>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, unknown>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<Record<string, unknown>, unknown>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "template",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The template to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "iconOnly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show the PanelCollapse with a borderless style."
                        },
                        {
                            "name": "severity",
                            "optional": true,
                            "readonly": false,
                            "type": "string & {} | \"secondary\" | \"info\" | \"success\" | \"warn\" | \"danger\" | \"contrast\" | \"help\"",
                            "default": "'secondary'",
                            "description": "Severity type of the PanelCollapse."
                        },
                        {
                            "name": "variant",
                            "optional": true,
                            "readonly": false,
                            "type": "\"link\" | \"text\" | \"outlined\" | \"contained\"",
                            "default": "'text'",
                            "description": "Variant of the PanelCollapse."
                        },
                        {
                            "name": "rounded",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show the PanelCollapse with a rounded style."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps"
                },
                "PanelCollapseState": {
                    "description": "Defines valid state in PanelCollapse component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "PanelCollapseExposes": {
                    "description": "Defines the methods and properties exposed by PanelCollapse component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PanelCollapsePassThroughOptionType": {
                    "values": "PassThroughOptionType<PanelCollapseInstance, E>",
                    "description": "Defines passthrough(pt) options type in PanelCollapse component."
                },
                "PanelCollapseInstance": {
                    "values": "ComponentInstance<PanelCollapseProps, PanelCollapseState, PanelCollapseExposes>",
                    "description": "Instance of PanelCollapse component."
                }
            }
        }
    },
    "panelcontent": {
        "description": "PanelContent is a component that displays a content.\n\n[Live Demo](https://www.primereact.org/panel/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PanelContentPassThroughOptions": {
                    "description": "Defines passthrough(pt) options of PanelContent component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelContentPassThroughOptionType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "PanelContentProps": {
                    "description": "Defines valid properties in PanelContent component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "ElementType<any, keyof IntrinsicElements>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, unknown>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<Record<string, unknown>, unknown>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "template",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The template to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps"
                },
                "PanelContentState": {
                    "description": "Defines valid state in PanelContent component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "PanelContentExposes": {
                    "description": "Defines the methods and properties exposed by PanelContent component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PanelContentPassThroughOptionType": {
                    "values": "PassThroughOptionType<PanelContentInstance, E>",
                    "description": "Defines passthrough(pt) options type in PanelContent component."
                },
                "PanelContentInstance": {
                    "values": "ComponentInstance<PanelContentProps, PanelContentState, PanelContentExposes>",
                    "description": "Instance of PanelContent component."
                }
            }
        }
    },
    "panelfooter": {
        "description": "PanelFooter is a component that displays a footer.\n\n[Live Demo](https://www.primereact.org/panel/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PanelFooterPassThroughOptions": {
                    "description": "Defines passthrough(pt) options of PanelFooter component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelFooterPassThroughOptionType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "PanelFooterProps": {
                    "description": "Defines valid properties in PanelFooter component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "ElementType<any, keyof IntrinsicElements>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, unknown>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<Record<string, unknown>, unknown>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "template",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The template to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps"
                },
                "PanelFooterState": {
                    "description": "Defines valid state in PanelFooter component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "PanelFooterExposes": {
                    "description": "Defines the methods and properties exposed by PanelFooter component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PanelFooterPassThroughOptionType": {
                    "values": "PassThroughOptionType<PanelFooterInstance, E>",
                    "description": "Defines passthrough(pt) options type in PanelFooter component."
                },
                "PanelFooterInstance": {
                    "values": "ComponentInstance<PanelFooterProps, PanelFooterState, PanelFooterExposes>",
                    "description": "Instance of PanelFooter component."
                }
            }
        }
    },
    "panelheader": {
        "description": "PanelHeader is a component that displays a header.\n\n[Live Demo](https://www.primereact.org/panel/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PanelHeaderPassThroughOptions": {
                    "description": "Defines passthrough(pt) options of PanelHeadercomponent.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelHeaderPassThroughOptionType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "PanelHeaderProps": {
                    "description": "Defines valid properties in PanelHeadercomponent.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "ElementType<any, keyof IntrinsicElements>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, unknown>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<Record<string, unknown>, unknown>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "template",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The template to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps"
                },
                "PanelHeaderState": {
                    "description": "Defines valid state in PanelHeadercomponent.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "PanelHeaderExposes": {
                    "description": "Defines the methods and properties exposed by PanelHeadercomponent.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PanelHeaderPassThroughOptionType": {
                    "values": "PassThroughOptionType<PanelHeaderInstance, E>",
                    "description": "Defines passthrough(pt) options type in PanelHeadercomponent."
                },
                "PanelHeaderInstance": {
                    "values": "ComponentInstance<PanelHeaderProps, PanelHeaderState, PanelHeaderExposes>",
                    "description": "Instance of PanelHeadercomponent."
                }
            }
        }
    },
    "panelheaderactions": {
        "description": "PanelHeaderActions is a component that displays a header actions.\n\n[Live Demo](https://www.primereact.org/panel/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PanelHeaderActionsPassThroughOptions": {
                    "description": "Defines passthrough(pt) options of PanelHeaderActions component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelHeaderActionsPassThroughOptionType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "PanelHeaderActionsProps": {
                    "description": "Defines valid properties in PanelHeaderActions component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "ElementType<any, keyof IntrinsicElements>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, unknown>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<Record<string, unknown>, unknown>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "template",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The template to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps"
                },
                "PanelHeaderActionsState": {
                    "description": "Defines valid state in PanelHeaderActions component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "PanelHeaderActionsExposes": {
                    "description": "Defines the methods and properties exposed by PanelHeaderActions component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PanelHeaderActionsPassThroughOptionType": {
                    "values": "PassThroughOptionType<PanelHeaderActionsInstance, E>",
                    "description": "Defines passthrough(pt) options type in PanelHeaderActions component."
                },
                "PanelHeaderActionsInstance": {
                    "values": "ComponentInstance<PanelHeaderActionsProps, PanelHeaderActionsState, PanelHeaderActionsExposes>",
                    "description": "Instance of PanelHeaderActions component."
                }
            }
        }
    },
    "paneltitle": {
        "description": "PanelTitle is a component that displays a title.\n\n[Live Demo](https://www.primereact.org/panel/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PanelTitlePassThroughOptions": {
                    "description": "Defines passthrough(pt) options of PanelTitlecomponent.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelTitlePassThroughOptionType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "PanelTitleProps": {
                    "description": "Defines valid properties in PanelTitlecomponent.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "ElementType<any, keyof IntrinsicElements>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, unknown>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<Record<string, unknown>, unknown>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "template",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The template to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps"
                },
                "PanelTitleState": {
                    "description": "Defines valid state in PanelTitlecomponent.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "PanelTitleExposes": {
                    "description": "Defines the methods and properties exposed by PanelTitlecomponent.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PanelTitlePassThroughOptionType": {
                    "values": "PassThroughOptionType<PanelTitleInstance, E>",
                    "description": "Defines passthrough(pt) options type in PanelTitlecomponent."
                },
                "PanelTitleInstance": {
                    "values": "ComponentInstance<PanelTitleProps, PanelTitleState, PanelTitleExposes>",
                    "description": "Instance of PanelTitlecomponent."
                }
            }
        }
    },
    "usepanel": {
        "description": "The usePanel manages the state and functionality of a panel component.\n\n[Live Demo](https://www.primereact.org/panel/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "usePanelToggleEvent": {
                    "description": "Event object for the onToggle callback.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent",
                            "default": "",
                            "description": "The original event that triggered the toggle."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "The new value of the panel's toggle state."
                        }
                    ],
                    "methods": []
                },
                "usePanelProps": {
                    "description": "Props for the usePanel hook.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "collapsed",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the panel is collapsed."
                        },
                        {
                            "name": "toggleable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Indicates if the panel can be toggled."
                        },
                        {
                            "name": "onCollapse",
                            "optional": true,
                            "readonly": false,
                            "type": "(event: SyntheticEvent) => void",
                            "default": "",
                            "description": "Callback triggered when the panel is collapsed."
                        },
                        {
                            "name": "onExpand",
                            "optional": true,
                            "readonly": false,
                            "type": "(event: SyntheticEvent) => void",
                            "default": "",
                            "description": "Callback triggered when the panel is expanded."
                        },
                        {
                            "name": "onToggle",
                            "optional": true,
                            "readonly": false,
                            "type": "(event: usePanelToggleEvent) => void",
                            "default": "",
                            "description": "Callback triggered when the panel's toggle state changes."
                        }
                    ],
                    "methods": []
                },
                "usePanelState": {
                    "description": "Defines valid state in usePanel.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "collapsed",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the panel is collapsed."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "PanelState"
                },
                "usePanelExposes": {
                    "description": "Defines the methods and properties exposed by usePanel.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "usePanelState",
                            "default": "",
                            "description": "The state of the usePanel."
                        },
                        {
                            "name": "contentRef",
                            "optional": false,
                            "readonly": false,
                            "type": "RefObject<HTMLDivElement>",
                            "default": "",
                            "description": "Reference to the content element of the panel."
                        },
                        {
                            "name": "toggle",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: SyntheticEvent) => void",
                            "default": "",
                            "description": "Toggles the collapsed state of the panel."
                        },
                        {
                            "name": "expand",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: SyntheticEvent) => void",
                            "default": "",
                            "description": "Expands the panel."
                        },
                        {
                            "name": "collapse",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: SyntheticEvent) => void",
                            "default": "",
                            "description": "Collapses the panel."
                        },
                        {
                            "name": "onButtonClick",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: SyntheticEvent) => void",
                            "default": "",
                            "description": "Callback for when the toggle button is clicked."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "PanelExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "usePanelInstance": {
                    "values": "HeadlessInstance<usePanelProps, usePanelState, usePanelExposes>",
                    "description": "Instance of usePanel headless."
                }
            }
        }
    },
    "progressbar": {
        "description": "ProgressBar is a process status indicator.\n\n[Live Demo](https://www.primereact.org/progressbar/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ProgressBarPassThroughOptions": {
                    "description": "Defines passthrough(pt) options of ProgressBar component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ProgressBarPassThroughOptionType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "ProgressBarPassThroughOptionType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the value's DOM element."
                        }
                    ],
                    "methods": []
                },
                "ProgressBarProps": {
                    "description": "Defines valid properties in ProgressBar component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "ElementType<any, keyof IntrinsicElements>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, unknown>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<Record<string, unknown>, unknown>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "template",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The template to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current value of the progress."
                        },
                        {
                            "name": "mode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"indeterminate\" | \"determinate\"",
                            "default": "determinate",
                            "description": "Defines the mode of the progress"
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<useProgressBarProps>"
                },
                "ProgressBarState": {
                    "description": "Defines valid state in ProgressBar component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "useProgressBarState"
                },
                "ProgressBarExposes": {
                    "description": "Defines the methods and properties exposed by ProgressBar component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "useProgressBarExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ProgressBarPassThroughOptionType": {
                    "values": "PassThroughOptionType<ProgressBarInstance, E>",
                    "description": "Defines passthrough(pt) options type in ProgressBar component."
                },
                "ProgressBarClassNamesType": {
                    "values": "typeof ProgressBarClassNames[keyof typeof ProgressBarClassNames]",
                    "description": "Type representing the CSS class names used in the ProgressBar component."
                },
                "ProgressBarInstance": {
                    "values": "ComponentInstance<ProgressBarProps, ProgressBarState, ProgressBarExposes>",
                    "description": "Instance of ProgressBar component."
                }
            }
        },
        "variables": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ProgressBarClassNames": {
                    "description": "Defines the CSS class names used in the ProgressBar component.",
                    "variables": [
                        {
                            "name": "root",
                            "value": "p-progressbar",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "value",
                            "value": "p-progressbar-value",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the value element"
                        },
                        {
                            "name": "label",
                            "value": "p-progressbar-label",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the label element"
                        }
                    ]
                }
            }
        }
    },
    "progressbarlabel": {
        "description": "ProgressBarLabel component is used to display the label of ProgressBar.\n\n[Live Demo](https://www.primereact.org/progressbar/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ProgressBarLabelPassThroughOptions": {
                    "description": "Defines passthrough(pt) options of ProgressBarLabel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ProgressBarLabelPassThroughOptionType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "ProgressBarLabelProps": {
                    "description": "Defines valid properties in ProgressBarLabel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "ElementType<any, keyof IntrinsicElements>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, unknown>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<Record<string, unknown>, unknown>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "template",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The template to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps"
                },
                "ProgressBarLabelState": {
                    "description": "Defines valid state in ProgressBarLabel component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "ProgressBarLabelExposes": {
                    "description": "Defines the methods and properties exposed by ProgressBarLabel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "progressbar",
                            "optional": false,
                            "readonly": false,
                            "type": "ProgressBarInstance",
                            "default": "",
                            "description": "The ProgressBar component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ProgressBarLabelPassThroughOptionType": {
                    "values": "PassThroughOptionType<ProgressBarLabelInstance, E>",
                    "description": "Defines passthrough(pt) options type in ProgressBarLabel component."
                },
                "ProgressBarLabelInstance": {
                    "values": "ComponentInstance<ProgressBarLabelProps, ProgressBarLabelState, ProgressBarLabelExposes>",
                    "description": "Instance of ProgressBarLabel component."
                }
            }
        }
    },
    "useprogressbar": {
        "description": "The useProgressBar manages the state and functionality of a progress bar component.\n\n[Live Demo](https://www.primereact.org/progressbar/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useProgressBarProps": {
                    "description": "Defines valid properties in useProgressBar.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "useProgressBarState": {
                    "description": "Defines valid state in useProgressBar.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedBy": "ProgressBarState"
                },
                "useProgressBarExposes": {
                    "description": "Defines the methods and properties exposed by useProgressBar.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedBy": "ProgressBarExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useProgressBarInstance": {
                    "values": "HeadlessInstance<useProgressBarProps, useProgressBarState, useProgressBarExposes>",
                    "description": "Instance of useProgressBar headless."
                }
            }
        }
    },
    "progressspinner": {
        "description": "ProgressSpinner is a process status indicator.\n\n[Live Demo](https://www.primereact.org/progressspinner/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ProgressSpinnerPassThroughOptions": {
                    "description": "Defines passthrough(pt) options of ProgressSpinner component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ProgressSpinnerPassThroughOptionType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "spin",
                            "optional": true,
                            "readonly": false,
                            "type": "ProgressSpinnerPassThroughOptionType<HTMLAttributes<SVGElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the spin's DOM element."
                        },
                        {
                            "name": "circle",
                            "optional": true,
                            "readonly": false,
                            "type": "ProgressSpinnerPassThroughOptionType<HTMLAttributes<SVGCircleElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the circle's DOM element."
                        }
                    ],
                    "methods": []
                },
                "ProgressSpinnerProps": {
                    "description": "Defines valid properties in ProgressSpinner component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "ElementType<any, keyof IntrinsicElements>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, unknown>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<Record<string, unknown>, unknown>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "template",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The template to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "strokeWidth",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "2",
                            "description": "Width of the circle stroke."
                        },
                        {
                            "name": "fill",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Color for the background of the circle."
                        },
                        {
                            "name": "animationDuration",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "2s",
                            "description": "Duration of the rotate animation."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<useProgressSpinnerProps>"
                },
                "ProgressSpinnerState": {
                    "description": "Defines valid state in ProgressSpinner component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "useProgressSpinnerState"
                },
                "ProgressSpinnerExposes": {
                    "description": "Defines the methods and properties exposed by ProgressSpinner component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "useProgressSpinnerExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ProgressSpinnerPassThroughOptionType": {
                    "values": "PassThroughOptionType<ProgressSpinnerInstance, E>",
                    "description": "Defines passthrough(pt) options type in ProgressSpinner component."
                },
                "ProgressSpinnerClassNamesType": {
                    "values": "typeof ProgressSpinnerClassNames[keyof typeof ProgressSpinnerClassNames]",
                    "description": "Type representing the CSS class names used in the ProgressSpinner component."
                },
                "ProgressSpinnerInstance": {
                    "values": "ComponentInstance<ProgressSpinnerProps, ProgressSpinnerState, ProgressSpinnerExposes>",
                    "description": "Instance of ProgressSpinner component."
                }
            }
        },
        "variables": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ProgressSpinnerClassNames": {
                    "description": "Defines the CSS class names used in the ProgressSpinner component.",
                    "variables": [
                        {
                            "name": "root",
                            "value": "p-progressspinner",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "spin",
                            "value": "p-progressspinner-spin",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the spin element"
                        },
                        {
                            "name": "circle",
                            "value": "p-progressspinner-circle",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the circle element"
                        }
                    ]
                }
            }
        }
    },
    "useprogressspinner": {
        "description": "The useProgressSpinner manages the state and functionality of a progress spinner component.\n\n[Live Demo](https://www.primereact.org/progressspinner/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useProgressSpinnerProps": {
                    "description": "Defines valid properties in useProgressSpinner.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "useProgressSpinnerState": {
                    "description": "Defines valid state in useProgressSpinner.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedBy": "ProgressSpinnerState"
                },
                "useProgressSpinnerExposes": {
                    "description": "Defines the methods and properties exposed by useProgressSpinner.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedBy": "ProgressSpinnerExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useProgressSpinnerInstance": {
                    "values": "HeadlessInstance<useProgressSpinnerProps, useProgressSpinnerState, useProgressSpinnerExposes>",
                    "description": "Instance of useProgressSpinner headless."
                }
            }
        }
    },
    "radiobutton": {
        "description": "RadioButton is an extension to standard radio button element with theming.\n\n[Live Demo](https://www.primereact.org/radiobutton/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "RadioButtonPassThroughOptions": {
                    "description": "Defines passthrough(pt) options of RadioButton component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "RadioButtonPassThroughOptionType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "input",
                            "optional": true,
                            "readonly": false,
                            "type": "RadioButtonPassThroughOptionType<InputHTMLAttributes<HTMLInputElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the input's DOM element."
                        },
                        {
                            "name": "box",
                            "optional": true,
                            "readonly": false,
                            "type": "RadioButtonPassThroughOptionType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the box's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "RadioButtonPassThroughOptionType<HTMLAttributes<HTMLSpanElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the icon's DOM element."
                        }
                    ],
                    "methods": []
                },
                "RadioButtonChangeEvent": {
                    "description": "Event fired when the radio button's checked state changes.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "Value of the radio button."
                        },
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "ChangeEvent",
                            "default": "",
                            "description": "The original event that triggered the change."
                        },
                        {
                            "name": "checked",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "The checked state of the radio button."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "RadioButtonGroupUpdateChangeEvent",
                    "extendedTypes": "useRadioButtonChangeEvent<React.ChangeEvent<HTMLInputElement>>"
                },
                "RadioButtonProps": {
                    "description": "Defines valid properties in RadioButton component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "ElementType<any, keyof IntrinsicElements>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, unknown>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<Record<string, unknown>, unknown>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "template",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The template to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "Value of the radio button."
                        },
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "The name of the radio button."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "\"small\" | \"large\" | \"normal\"",
                            "default": "",
                            "description": "Defines the size of the radio button."
                        },
                        {
                            "name": "variant",
                            "optional": true,
                            "readonly": false,
                            "type": "\"outlined\" | \"filled\"",
                            "default": "",
                            "description": "Specifies the input variant of the component."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the element should be disabled."
                        },
                        {
                            "name": "readOnly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that an input field is read-only."
                        },
                        {
                            "name": "required",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the element is required."
                        },
                        {
                            "name": "invalid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style."
                        },
                        {
                            "name": "inputId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "inputStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the input field."
                        },
                        {
                            "name": "inputClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the input field."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes a string value that labels the component."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "onFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "(event: FocusEvent<HTMLInputElement>) => void",
                            "default": "",
                            "description": "Callback function that is called when the checkbox is focused."
                        },
                        {
                            "name": "onBlur",
                            "optional": true,
                            "readonly": false,
                            "type": "(event: FocusEvent<HTMLInputElement>) => void",
                            "default": "",
                            "description": "Callback function that is called when the checkbox loses focus."
                        },
                        {
                            "name": "onCheckedChange",
                            "optional": true,
                            "readonly": false,
                            "type": "(event: RadioButtonChangeEvent) => void",
                            "default": "",
                            "description": "Callback fired when the radio button's checked state changes."
                        },
                        {
                            "name": "checked",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "When present, it specifies the input's checked state."
                        },
                        {
                            "name": "defaultChecked",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "The default value for the input when not controlled by  `checked`  and  `onCheckedChange` ."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<Omit<useRadioButtonProps, \"onCheckedChange\">>"
                },
                "RadioButtonState": {
                    "description": "Defines valid state in RadioButton component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "checked",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "The checked state of the useRadioButton."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "useRadioButtonState"
                },
                "RadioButtonExposes": {
                    "description": "Defines the methods and properties exposed by RadioButton component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "useRadioButtonState",
                            "default": "",
                            "description": "The state of the useRadioButton."
                        },
                        {
                            "name": "onChange",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: useRadioButtonChangeEvent) => void",
                            "default": "",
                            "description": "Callback fired when the useRadioButton's checked state changes."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "useRadioButtonExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "RadioButtonPassThroughOptionType": {
                    "values": "PassThroughOptionType<RadioButtonInstance, E>",
                    "description": "Defines passthrough(pt) options type in RadioButton component."
                },
                "RadioButtonClassNamesType": {
                    "values": "typeof RadioButtonClassNames[keyof typeof RadioButtonClassNames]",
                    "description": "Type representing the CSS class names used in the RadioButton component."
                },
                "RadioButtonInstance": {
                    "values": "ComponentInstance<RadioButtonProps, RadioButtonState, RadioButtonExposes>",
                    "description": "Instance of RadioButton component."
                }
            }
        },
        "variables": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "RadioButtonClassNames": {
                    "description": "Defines the CSS class names used in the RadioButton component.",
                    "variables": [
                        {
                            "name": "root",
                            "value": "p-radiobutton",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "box",
                            "value": "p-radiobutton-box",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the box element"
                        },
                        {
                            "name": "input",
                            "value": "p-radiobutton-input",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the input element"
                        },
                        {
                            "name": "icon",
                            "value": "p-radiobutton-icon",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the icon element"
                        }
                    ]
                }
            }
        }
    },
    "radiobuttongroup": {
        "description": "RadioButtonGroup is a wrapper for the RadioButton component.\n\n[Live Demo](https://www.primereact.org/radiobutton/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "RadioButtonGroupPassThroughOptions": {
                    "description": "Defines passthrough(pt) options of RadioButtonGroup component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "RadioButtonGroupPassThroughOptionType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "RadioButtonGroupValueChangeEvent": {
                    "description": "Event fired when the radio button group's value changes.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The value of the radio button group."
                        }
                    ],
                    "methods": []
                },
                "RadioButtonGroupUpdateChangeEvent": {
                    "description": "Used to update the radio button group value.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "Value of the radio button."
                        },
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "ChangeEvent",
                            "default": "",
                            "description": "The original event that triggered the change."
                        },
                        {
                            "name": "checked",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "The checked state of the radio button."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "RadioButtonChangeEvent"
                },
                "RadioButtonGroupProps": {
                    "description": "Defines valid properties in RadioButtonGroup component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "ElementType<any, keyof IntrinsicElements>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, unknown>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<Record<string, unknown>, unknown>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "template",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The template to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "Value of the radio button group."
                        },
                        {
                            "name": "defaultValue",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The default value of the radio button group."
                        },
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "The name of the radio buttons."
                        },
                        {
                            "name": "onValueChange",
                            "optional": true,
                            "readonly": false,
                            "type": "(event: RadioButtonGroupValueChangeEvent) => void",
                            "default": "",
                            "description": "Callback function that is called when the radio button group value changes."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps"
                },
                "RadioButtonGroupState": {
                    "description": "Defines valid state in RadioButtonGroup component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "RadioButtonGroupExposes": {
                    "description": "Defines the methods and properties exposed by RadioButtonGroup component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "updateChange",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: RadioButtonGroupUpdateChangeEvent) => void",
                            "default": "",
                            "description": "Updates the value of the radio button group."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "RadioButtonGroupPassThroughOptionType": {
                    "values": "PassThroughOptionType<RadioButtonGroupInstance, E>",
                    "description": "Defines passthrough(pt) options type in RadioButtonGroup component."
                },
                "RadioButtonGroupClassNamesType": {
                    "values": "typeof RadioButtonGroupClassNames[keyof typeof RadioButtonGroupClassNames]",
                    "description": "Type representing the CSS class names used in the RadioButton component."
                },
                "RadioButtonGroupInstance": {
                    "values": "ComponentInstance<RadioButtonGroupProps, RadioButtonGroupState, RadioButtonGroupExposes>",
                    "description": "Instance of RadioButtonGroup component."
                }
            }
        },
        "variables": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "RadioButtonGroupClassNames": {
                    "description": "Defines the CSS class names used in the RadioButtonGroup component",
                    "variables": [
                        {
                            "name": "root",
                            "value": "p-radiobutton-group",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the root element"
                        }
                    ]
                }
            }
        }
    },
    "useradiobutton": {
        "description": "The useRadioButton manages the state and functionality of a radio button component.\n\n[Live Demo](https://www.primereact.org/radiobutton/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useRadioButtonChangeEvent": {
                    "description": "Event fired when the radio button's checked state changes.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "E",
                            "default": "",
                            "description": "The original event that triggered the change."
                        },
                        {
                            "name": "checked",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "The checked state of the radio button."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "RadioButtonChangeEvent"
                },
                "useRadioButtonProps": {
                    "description": "Defines valid properties in useRadioButton.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "checked",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "When present, it specifies the input's checked state."
                        },
                        {
                            "name": "defaultChecked",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "The default value for the input when not controlled by  `checked`  and  `onCheckedChange` ."
                        },
                        {
                            "name": "onCheckedChange",
                            "optional": true,
                            "readonly": false,
                            "type": "(event: useRadioButtonChangeEvent) => void",
                            "default": "",
                            "description": "Callback fired when the radio button's checked state changes."
                        }
                    ],
                    "methods": []
                },
                "useRadioButtonState": {
                    "description": "Defines valid state in useRadioButton.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "checked",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "The checked state of the useRadioButton."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "RadioButtonState"
                },
                "useRadioButtonExposes": {
                    "description": "Defines the methods and properties exposed by useRadioButton.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "useRadioButtonState",
                            "default": "",
                            "description": "The state of the useRadioButton."
                        },
                        {
                            "name": "onChange",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: useRadioButtonChangeEvent) => void",
                            "default": "",
                            "description": "Callback fired when the useRadioButton's checked state changes."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "RadioButtonExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useRadioButtonInstance": {
                    "values": "HeadlessInstance<useRadioButtonProps, useRadioButtonState, useRadioButtonExposes>",
                    "description": "Instance of useRadioButton headless."
                }
            }
        }
    },
    "skeleton": {
        "description": "Skeleton is a placeholder to display instead of the actual content.\n\n[Live Demo](https://www.primereact.org/skeleton/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "SkeletonPassThroughOptions": {
                    "description": "Defines passthrough(pt) options of Skeleton component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "SkeletonPassThroughOptionType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "SkeletonProps": {
                    "description": "Defines valid properties in Skeleton component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "ElementType<any, keyof IntrinsicElements>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, unknown>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<Record<string, unknown>, unknown>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "template",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The template to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "shape",
                            "optional": true,
                            "readonly": false,
                            "type": "\"circle\" | \"rectangle\"",
                            "default": "rectangle",
                            "description": "Shape of the element."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Size of the Circle or Square."
                        },
                        {
                            "name": "width",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "100%",
                            "description": "Width of the element."
                        },
                        {
                            "name": "height",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "1rem",
                            "description": "Height of the element."
                        },
                        {
                            "name": "borderRadius",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Border radius of the element, defaults to value from theme."
                        },
                        {
                            "name": "animation",
                            "optional": true,
                            "readonly": false,
                            "type": "\"none\" | \"wave\"",
                            "default": "wave",
                            "description": "Type of the animation."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<useSkeletonProps>"
                },
                "SkeletonState": {
                    "description": "Defines valid state in Skeleton component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "useSkeletonState"
                },
                "SkeletonExposes": {
                    "description": "Defines the methods and properties exposed by Skeleton component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "useSkeletonExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "SkeletonPassThroughOptionType": {
                    "values": "PassThroughOptionType<SkeletonInstance, E>",
                    "description": "Defines passthrough(pt) options type in Skeleton component."
                },
                "SkeletonClassNamesType": {
                    "values": "typeof SkeletonClassNames[keyof typeof SkeletonClassNames]",
                    "description": "Type representing the CSS class names used in the Skeleton component."
                },
                "SkeletonInstance": {
                    "values": "ComponentInstance<SkeletonProps, SkeletonState, SkeletonExposes>",
                    "description": "Instance of Skeleton component."
                }
            }
        },
        "variables": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "SkeletonClassNames": {
                    "description": "Defines the CSS class names used in the Skeleton component.",
                    "variables": [
                        {
                            "name": "root",
                            "value": "p-skeleton",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the root element"
                        }
                    ]
                }
            }
        }
    },
    "useskeleton": {
        "description": "The useSkeleton manages the state and functionality of a skeleton component.\n\n[Live Demo](https://www.primereact.org/skeleton/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useSkeletonProps": {
                    "description": "Defines valid properties in useSkeleton.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "useSkeletonState": {
                    "description": "Defines valid state in useSkeleton.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedBy": "SkeletonState"
                },
                "useSkeletonExposes": {
                    "description": "Defines the methods and properties exposed by useSkeleton.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedBy": "SkeletonExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useSkeletonInstance": {
                    "values": "HeadlessInstance<useSkeletonProps, useSkeletonState, useSkeletonExposes>",
                    "description": "Instance of useSkeleton headless."
                }
            }
        }
    },
    "styleclass": {
        "description": "StyleClass manages css classes declaratively to during enter/leave animations or just to toggle classes on an element.\n\n[Live Demo](https://www.primereact.org/styleclass/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "StyleClassPassThroughOptions": {
                    "description": "Defines passthrough(pt) options of StyleClass component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "StyleClassProps": {
                    "description": "Defines valid properties in StyleClass component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "ElementType<any, keyof IntrinsicElements>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, unknown>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<Record<string, unknown>, unknown>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "template",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The template to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "nodeRef",
                            "optional": true,
                            "readonly": false,
                            "type": "RefObject<ReactNode>",
                            "default": "",
                            "description": "A React reference to DOM element that need to specify."
                        },
                        {
                            "name": "selector",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Selector to define the target element."
                        },
                        {
                            "name": "enterFromClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class to add when item begins to get displayed."
                        },
                        {
                            "name": "enterActiveClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class to add during enter animation."
                        },
                        {
                            "name": "enterToClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class to add when item begins to get displayed."
                        },
                        {
                            "name": "leaveFromClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class to add when item begins to get hidden."
                        },
                        {
                            "name": "leaveActiveClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class to add during leave animation."
                        },
                        {
                            "name": "leaveToClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class to add when leave animation is completed."
                        },
                        {
                            "name": "hiddenClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class to apply when the component is hidden."
                        },
                        {
                            "name": "hideOnOutsideClick",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to trigger leave animation when outside of the element is clicked."
                        },
                        {
                            "name": "toggleClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Adds or removes a class when no enter-leave animation is required."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<useStyleClassProps>"
                },
                "StyleClassState": {
                    "description": "Defines valid state in StyleClass component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "useStyleClassState"
                },
                "StyleClassExposes": {
                    "description": "Defines the methods and properties exposed by StyleClass component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "useStyleClassState",
                            "default": "",
                            "description": "The state of the useStyleClass."
                        },
                        {
                            "name": "targetRef",
                            "optional": false,
                            "readonly": false,
                            "type": "RefObject<ReactNode>",
                            "default": "",
                            "description": "The target element."
                        },
                        {
                            "name": "enter",
                            "optional": false,
                            "readonly": false,
                            "type": "() => void",
                            "default": "",
                            "description": "The method to trigger the enter animation."
                        },
                        {
                            "name": "leave",
                            "optional": false,
                            "readonly": false,
                            "type": "() => void",
                            "default": "",
                            "description": "The method to trigger the leave animation."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "useStyleClassExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "StyleClassPassThroughOptionType": {
                    "values": "PassThroughOptionType<StyleClassInstance, E>",
                    "description": "Defines passthrough(pt) options type in StyleClass component."
                },
                "StyleClassInstance": {
                    "values": "ComponentInstance<StyleClassProps, StyleClassState, StyleClassExposes>",
                    "description": "Instance of StyleClass component."
                }
            }
        }
    },
    "usestyleclass": {
        "description": "The useStyleClass manages the state and functionality of a StyleClass component.\n\n[Live Demo](https://www.primereact.org/styleclass/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useStyleClassProps": {
                    "description": "Defines valid properties in useStyleClass.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "nodeRef",
                            "optional": true,
                            "readonly": false,
                            "type": "RefObject<ReactNode>",
                            "default": "",
                            "description": "A React reference to DOM element that need to specify."
                        },
                        {
                            "name": "selector",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Selector to define the target element."
                        },
                        {
                            "name": "enterFromClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class to add when item begins to get displayed."
                        },
                        {
                            "name": "enterActiveClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class to add during enter animation."
                        },
                        {
                            "name": "enterToClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class to add when item begins to get displayed."
                        },
                        {
                            "name": "leaveFromClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class to add when item begins to get hidden."
                        },
                        {
                            "name": "leaveActiveClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class to add during leave animation."
                        },
                        {
                            "name": "leaveToClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class to add when leave animation is completed."
                        },
                        {
                            "name": "hiddenClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class to apply when the component is hidden."
                        },
                        {
                            "name": "hideOnOutsideClick",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to trigger leave animation when outside of the element is clicked."
                        },
                        {
                            "name": "toggleClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Adds or removes a class when no enter-leave animation is required."
                        }
                    ],
                    "methods": []
                },
                "useStyleClassState": {
                    "description": "Defines valid state in useStyleClass.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedBy": "StyleClassState"
                },
                "useStyleClassExposes": {
                    "description": "Defines the methods and properties exposed by useStyleClass.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "useStyleClassState",
                            "default": "",
                            "description": "The state of the useStyleClass."
                        },
                        {
                            "name": "targetRef",
                            "optional": false,
                            "readonly": false,
                            "type": "RefObject<ReactNode>",
                            "default": "",
                            "description": "The target element."
                        },
                        {
                            "name": "enter",
                            "optional": false,
                            "readonly": false,
                            "type": "() => void",
                            "default": "",
                            "description": "The method to trigger the enter animation."
                        },
                        {
                            "name": "leave",
                            "optional": false,
                            "readonly": false,
                            "type": "() => void",
                            "default": "",
                            "description": "The method to trigger the leave animation."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "StyleClassExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useStyleClassInstance": {
                    "values": "HeadlessInstance<useStyleClassProps, useStyleClassState, useStyleClassExposes>",
                    "description": "Instance of useStyleClass headless."
                }
            }
        }
    },
    "tag": {
        "description": "Tag component is used to categorize content.\n\n[Live Demo](https://www.primereact.org/tag/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TagPassThroughOptions": {
                    "description": "Defines passthrough(pt) options of Tag component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "TagPassThroughOptionType<HTMLAttributes<HTMLSpanElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "TagProps": {
                    "description": "Defines valid properties in Tag component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "ElementType<any, keyof IntrinsicElements>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, unknown>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<Record<string, unknown>, unknown>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "template",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The template to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "severity",
                            "optional": true,
                            "readonly": false,
                            "type": "\"secondary\" | \"info\" | \"success\" | \"warn\" | \"danger\" | \"contrast\"",
                            "default": "",
                            "description": "Severity type of the tag."
                        },
                        {
                            "name": "rounded",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the corners of the tag are rounded."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<useTagProps>"
                },
                "TagState": {
                    "description": "Defines valid state in Tag component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "useTagState"
                },
                "TagExposes": {
                    "description": "Defines the methods and properties exposed by Tag component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "useTagExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TagPassThroughOptionType": {
                    "values": "PassThroughOptionType<TagInstance, E>",
                    "description": "Defines passthrough(pt) options type in Tag component."
                },
                "TagClassNamesType": {
                    "values": "typeof TagClassNames[keyof typeof TagClassNames]",
                    "description": "Type representing the CSS class names used in the Tag component."
                },
                "TagInstance": {
                    "values": "ComponentInstance<TagProps, TagState, TagExposes>",
                    "description": "Instance of Tag component."
                }
            }
        },
        "variables": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "TagClassNames": {
                    "description": "Defines the CSS class names used in the Tag component.",
                    "variables": [
                        {
                            "name": "root",
                            "value": "p-tag",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "icon",
                            "value": "p-tag-icon",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the icon element"
                        },
                        {
                            "name": "label",
                            "value": "p-tag-label",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the label element"
                        }
                    ]
                }
            }
        }
    },
    "tagicon": {
        "description": "TagIcon is a component that displays an icon.\n\n[Live Demo](https://www.primereact.org/tag/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TagIconPassThroughOptions": {
                    "description": "Defines passthrough(pt) options of TagIcon component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "TagIconPassThroughOptionType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "TagIconProps": {
                    "description": "Defines valid properties in TagIcon component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "ElementType<any, keyof IntrinsicElements>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, unknown>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<Record<string, unknown>, unknown>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "template",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The template to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps"
                },
                "TagIconState": {
                    "description": "Defines valid state in TagIcon component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "TagIconExposes": {
                    "description": "Defines the methods and properties exposed by TagIcon component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "tag",
                            "optional": false,
                            "readonly": false,
                            "type": "TagInstance",
                            "default": "",
                            "description": "The Tag component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TagIconPassThroughOptionType": {
                    "values": "PassThroughOptionType<TagIconInstance, E>",
                    "description": "Defines passthrough(pt) options type in TagIcon component."
                },
                "TagIconInstance": {
                    "values": "ComponentInstance<TagIconProps, TagIconState, TagIconExposes>",
                    "description": "Instance of TagIcon component."
                }
            }
        }
    },
    "taglabel": {
        "description": "TagLabel is a component that displays a label.\n\n[Live Demo](https://www.primereact.org/tag/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TagLabelPassThroughOptions": {
                    "description": "Defines passthrough(pt) options of TagLabel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "TagLabelPassThroughOptionType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "TagLabelProps": {
                    "description": "Defines valid properties in TagLabel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "ElementType<any, keyof IntrinsicElements>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, unknown>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<Record<string, unknown>, unknown>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "template",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The template to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps"
                },
                "TagLabelState": {
                    "description": "Defines valid state in TagLabel component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "TagLabelExposes": {
                    "description": "Defines the methods and properties exposed by TagLabel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "tag",
                            "optional": false,
                            "readonly": false,
                            "type": "TagInstance",
                            "default": "",
                            "description": "The Tag component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TagLabelPassThroughOptionType": {
                    "values": "PassThroughOptionType<TagLabelInstance, E>",
                    "description": "Defines passthrough(pt) options type in TagLabel component."
                },
                "TagLabelInstance": {
                    "values": "ComponentInstance<TagLabelProps, TagLabelState, TagLabelExposes>",
                    "description": "Instance of TagLabel component."
                }
            }
        }
    },
    "usetag": {
        "description": "The useTag manages the state and functionality of a tag component.\n\n[Live Demo](https://www.primereact.org/tag/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useTagProps": {
                    "description": "Defines valid properties in useTag.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "useTagState": {
                    "description": "Defines valid state in useTag.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedBy": "TagState"
                },
                "useTagExposes": {
                    "description": "Defines the methods and properties exposed by useTag.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedBy": "TagExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useTagInstance": {
                    "values": "HeadlessInstance<useTagProps, useTagState, useTagExposes>",
                    "description": "Instance of useTag headless."
                }
            }
        }
    }
}