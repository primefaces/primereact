{
    "accordion": {
        "description": "Accordion groups a collection of contents in panels.\n\n[Live Demo](https://www.primereact.org/accordion/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "AccordionPassThrough": {
                    "description": "Defines passthrough(pt) options of Accordion component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "AccordionPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "panel",
                            "optional": true,
                            "readonly": false,
                            "type": "AccordionPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the panel's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "AccordionPassThroughType<HTMLAttributes<HTMLButtonElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "AccordionPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "headerindicator",
                            "optional": true,
                            "readonly": false,
                            "type": "AccordionPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the header indicator's DOM element."
                        }
                    ],
                    "methods": []
                },
                "AccordionProps": {
                    "description": "Defines valid properties in Accordion component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: AccordionInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: AccordionInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<AccordionPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: AccordionInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "lazy",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, hidden tabs are not rendered at all. Defaults to false that hides tabs with css."
                        },
                        {
                            "name": "tabIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "defaultValue",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | (string | number)[]",
                            "default": "null",
                            "description": "Default value of the active panel or an array of values in multiple mode."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | (string | number)[]",
                            "default": "null",
                            "description": "Value of the active panel or an array of values in multiple mode."
                        },
                        {
                            "name": "multiple",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, multiple tabs can be activated at the same time."
                        },
                        {
                            "name": "selectOnFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, the accordion will be selected on focus."
                        },
                        {
                            "name": "onValueChange",
                            "optional": true,
                            "readonly": false,
                            "type": "(event: useAccordionChangeEvent) => void",
                            "default": "",
                            "description": "Callback fired when the accordion's value changes."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<AccordionInstance, useAccordionProps>"
                },
                "AccordionState": {
                    "description": "Defines valid state in Avatar component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "string | number | (string | number)[]",
                            "default": "",
                            "description": "Value of the active panel or an array of values in multiple mode."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "useAccordionState"
                },
                "AccordionExposes": {
                    "description": "Defines the methods and properties exposed by Avatar component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "useAccordionState",
                            "default": "",
                            "description": "The state of the useAccordion."
                        },
                        {
                            "name": "updateValue",
                            "optional": false,
                            "readonly": false,
                            "type": "(key: string | number) => void",
                            "default": "",
                            "description": "The method to update the value of the active panel."
                        },
                        {
                            "name": "isItemActive",
                            "optional": false,
                            "readonly": false,
                            "type": "(key: string | number) => boolean",
                            "default": "",
                            "description": "The method to check if the panel is active."
                        },
                        {
                            "name": "onHeaderClick",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: MouseEvent<HTMLButtonElement>, value: string | number) => void",
                            "default": "",
                            "description": "The method to handle the click event of the accordion header."
                        },
                        {
                            "name": "onHeaderFocus",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: FocusEvent<HTMLButtonElement>, value: string | number) => void",
                            "default": "",
                            "description": "The method to handle the focus event of the accordion header."
                        },
                        {
                            "name": "onHeaderKeyDown",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: KeyboardEvent<HTMLButtonElement>, value: string | number) => void",
                            "default": "",
                            "description": "The method to handle the key down event of the accordion header."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "useAccordionExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "AccordionPassThroughType": {
                    "values": "PassThroughType<AccordionInstance, E>",
                    "description": "Defines passthrough(pt) options type in Accordion component."
                },
                "AccordionClassNamesType": {
                    "values": "typeof AccordionClassNames[keyof typeof AccordionClassNames]",
                    "description": "Type representing the CSS class names used in the Avatar component."
                },
                "AccordionInstance": {
                    "values": "ComponentInstance<AccordionProps, AccordionState, AccordionExposes, AccordionPassThrough>",
                    "description": "Instance of Avatar component."
                }
            }
        },
        "variables": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "AccordionClassNames": {
                    "description": "Defines the CSS class names used in the Avatar component.",
                    "variables": [
                        {
                            "name": "root",
                            "value": "p-accordion",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "content",
                            "value": "p-accordioncontent",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the content element"
                        },
                        {
                            "name": "header",
                            "value": "p-accordionheader",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the header element"
                        },
                        {
                            "name": "panel",
                            "value": "p-accordionpanel",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the panel element"
                        },
                        {
                            "name": "toggleicon",
                            "value": "p-accordionheader-toggle-icon",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the toggle icon element"
                        }
                    ]
                }
            }
        }
    },
    "accordioncontent": {
        "description": "AccordionContent is a component that displays a content of a panel.\n\n[Live Demo](https://www.primereact.org/accordion/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "AccordionContentPassThrough": {
                    "description": "Defines passthrough(pt) options of AccordionContent component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "AccordionContentPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "AccordionContentProps": {
                    "description": "Defines valid properties in AccordionContent component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: AccordionContentInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: AccordionContentInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<AccordionContentPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: AccordionContentInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<AccordionContentInstance>"
                },
                "AccordionContentState": {
                    "description": "Defines valid state in AccordionContent component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "AccordionContentExposes": {
                    "description": "Defines the methods and properties exposed by AccordionContent component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "accordion",
                            "optional": false,
                            "readonly": false,
                            "type": "AccordionInstance",
                            "default": "",
                            "description": "The Accordion component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "AccordionContentPassThroughType": {
                    "values": "PassThroughType<AccordionContentInstance, E>",
                    "description": "Defines passthrough(pt) options type in AccordionContent component."
                },
                "AccordionContentInstance": {
                    "values": "ComponentInstance<AccordionContentProps, AccordionContentState, AccordionContentExposes, AccordionContentPassThrough>",
                    "description": "Instance of AccordionContent component."
                }
            }
        }
    },
    "accordionheader": {
        "description": "AccordionHeader is a component that displays a header of content.\n\n[Live Demo](https://www.primereact.org/accordion/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "AccordionHeaderPassThrough": {
                    "description": "Defines passthrough(pt) options of AccordionHeader component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "AccordionHeaderPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "AccordionHeaderProps": {
                    "description": "Defines valid properties in AccordionHeader component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: AccordionHeaderInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: AccordionHeaderInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<AccordionHeaderPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: AccordionHeaderInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<AccordionHeaderInstance>"
                },
                "AccordionHeaderState": {
                    "description": "Defines valid state in AccordionHeader component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "AccordionHeaderExposes": {
                    "description": "Defines the methods and properties exposed by AccordionHeader component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "accordion",
                            "optional": false,
                            "readonly": false,
                            "type": "AccordionInstance",
                            "default": "",
                            "description": "The Accordion component instance."
                        },
                        {
                            "name": "accordionpanel",
                            "optional": false,
                            "readonly": false,
                            "type": "AccordionPanelInstance",
                            "default": "",
                            "description": "The AccordionPanel component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "AccordionHeaderPassThroughType": {
                    "values": "PassThroughType<AccordionHeaderInstance, E>",
                    "description": "Defines passthrough(pt) options type in AccordionHeader component."
                },
                "AccordionHeaderInstance": {
                    "values": "ComponentInstance<AccordionHeaderProps, AccordionHeaderState, AccordionHeaderExposes, AccordionHeaderPassThrough>",
                    "description": "Instance of AccordionHeader component."
                }
            }
        }
    },
    "accordionheaderindicator": {
        "description": "AccordionHeaderIndicator is a component that displays an indicator of content.\n\n[Live Demo](https://www.primereact.org/accordion/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "AccordionHeaderIndicatorPassThrough": {
                    "description": "Defines passthrough(pt) options of AccordionHeaderIndicator component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "AccordionHeaderIndicatorPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "AccordionHeaderIndicatorProps": {
                    "description": "Defines valid properties in AccordionHeaderIndicator component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: AccordionHeaderIndicatorInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: AccordionHeaderIndicatorInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<AccordionHeaderIndicatorPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: AccordionHeaderIndicatorInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<AccordionHeaderIndicatorInstance>"
                },
                "AccordionHeaderIndicatorState": {
                    "description": "Defines valid state in AccordionHeaderIndicator component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "AccordionHeaderIndicatorExposes": {
                    "description": "Defines the methods and properties exposed by AccordionHeaderIndicator component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "accordion",
                            "optional": false,
                            "readonly": false,
                            "type": "AccordionInstance",
                            "default": "",
                            "description": "The Accordion component instance."
                        },
                        {
                            "name": "accordionpanel",
                            "optional": false,
                            "readonly": false,
                            "type": "AccordionPanelInstance",
                            "default": "",
                            "description": "The AccordionPanel component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "AccordionHeaderIndicatorPassThroughType": {
                    "values": "PassThroughType<AccordionHeaderIndicatorInstance, E>",
                    "description": "Defines passthrough(pt) options type in AccordionHeaderIndicator component."
                },
                "AccordionHeaderIndicatorInstance": {
                    "values": "ComponentInstance<AccordionHeaderIndicatorProps, AccordionHeaderIndicatorState, AccordionHeaderIndicatorExposes, AccordionHeaderIndicatorPassThrough>",
                    "description": "Instance of AccordionHeaderIndicator component."
                }
            }
        }
    },
    "accordionpanel": {
        "description": "AccordionPanel is a component that displays a panel of content.\n\n[Live Demo](https://www.primereact.org/accordion/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "AccordionPanelPassThrough": {
                    "description": "Defines passthrough(pt) options of AccordionPanel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "AccordionPanelPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "AccordionPanelProps": {
                    "description": "Defines valid properties in AccordionPanel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: AccordionPanelInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: AccordionPanelInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<AccordionPanelPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: AccordionPanelInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "null",
                            "description": "Unique value of item."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the item is disabled."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<AccordionPanelInstance>"
                },
                "AccordionPanelState": {
                    "description": "Defines valid state in AccordionPanel component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "AccordionPanelExposes": {
                    "description": "Defines the methods and properties exposed by AccordionPanel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "accordion",
                            "optional": false,
                            "readonly": false,
                            "type": "AccordionInstance",
                            "default": "",
                            "description": "The Accordion component instance."
                        },
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the item is active."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "AccordionPanelPassThroughType": {
                    "values": "PassThroughType<AccordionPanelInstance, E>",
                    "description": "Defines passthrough(pt) options type in AccordionPanel component."
                },
                "AccordionPanelInstance": {
                    "values": "ComponentInstance<AccordionPanelProps, AccordionPanelState, AccordionPanelExposes, AccordionPanelPassThrough>",
                    "description": "Instance of AccordionPanel component."
                }
            }
        }
    },
    "useaccordion": {
        "description": "The useAccordion manages the state and functionality of a Accordion component.\n\n[Live Demo](https://www.primereact.org/accordion/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useAccordionChangeEvent": {
                    "description": "Event fired when the accordion's value changes.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "E",
                            "default": "",
                            "description": "The original event that triggered the change."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "string | number | (string | number)[]",
                            "default": "",
                            "description": "The value of the accordion."
                        }
                    ],
                    "methods": []
                },
                "useAccordionProps": {
                    "description": "Defines valid properties in useAccordion.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "defaultValue",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | (string | number)[]",
                            "default": "null",
                            "description": "Default value of the active panel or an array of values in multiple mode."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | (string | number)[]",
                            "default": "null",
                            "description": "Value of the active panel or an array of values in multiple mode."
                        },
                        {
                            "name": "multiple",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, multiple tabs can be activated at the same time."
                        },
                        {
                            "name": "selectOnFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, the accordion will be selected on focus."
                        },
                        {
                            "name": "onValueChange",
                            "optional": true,
                            "readonly": false,
                            "type": "(event: useAccordionChangeEvent) => void",
                            "default": "",
                            "description": "Callback fired when the accordion's value changes."
                        }
                    ],
                    "methods": []
                },
                "useAccordionState": {
                    "description": "Defines valid state in useAccordion.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "string | number | (string | number)[]",
                            "default": "",
                            "description": "Value of the active panel or an array of values in multiple mode."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "AccordionState"
                },
                "useAccordionExposes": {
                    "description": "Defines the methods and properties exposed by useAccordion.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "useAccordionState",
                            "default": "",
                            "description": "The state of the useAccordion."
                        },
                        {
                            "name": "updateValue",
                            "optional": false,
                            "readonly": false,
                            "type": "(key: string | number) => void",
                            "default": "",
                            "description": "The method to update the value of the active panel."
                        },
                        {
                            "name": "isItemActive",
                            "optional": false,
                            "readonly": false,
                            "type": "(key: string | number) => boolean",
                            "default": "",
                            "description": "The method to check if the panel is active."
                        },
                        {
                            "name": "onHeaderClick",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: MouseEvent<HTMLButtonElement>, value: string | number) => void",
                            "default": "",
                            "description": "The method to handle the click event of the accordion header."
                        },
                        {
                            "name": "onHeaderFocus",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: FocusEvent<HTMLButtonElement>, value: string | number) => void",
                            "default": "",
                            "description": "The method to handle the focus event of the accordion header."
                        },
                        {
                            "name": "onHeaderKeyDown",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: KeyboardEvent<HTMLButtonElement>, value: string | number) => void",
                            "default": "",
                            "description": "The method to handle the key down event of the accordion header."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "AccordionExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "NavigationDirection": {
                    "values": "\"next\" | \"previous\" | \"first\" | \"last\""
                },
                "useAccordionInstance": {
                    "values": "HeadlessInstance<useAccordionProps, useAccordionState, useAccordionExposes>",
                    "description": "Instance of useAccordion headless."
                }
            }
        }
    },
    "avatar": {
        "description": "Avatar represents people using icons, labels and images.\n\n[Live Demo](https://www.primereact.org/avatar/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "AvatarPassThrough": {
                    "description": "Defines passthrough(pt) options of Avatar component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "AvatarPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "fallback",
                            "optional": true,
                            "readonly": false,
                            "type": "AvatarPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the fallback's DOM element."
                        },
                        {
                            "name": "image",
                            "optional": true,
                            "readonly": false,
                            "type": "AvatarPassThroughType<HTMLAttributes<HTMLImageElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the image's DOM element."
                        }
                    ],
                    "methods": []
                },
                "AvatarProps": {
                    "description": "Defines valid properties in Avatar component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: AvatarInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: AvatarInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<AvatarPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: AvatarInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "\"large\" | \"normal\" | \"xlarge\"",
                            "default": "normal",
                            "description": "Defines the size of the avatar."
                        },
                        {
                            "name": "shape",
                            "optional": true,
                            "readonly": false,
                            "type": "\"circle\" | \"square\"",
                            "default": "square",
                            "description": "Defines the shape of the avatar."
                        },
                        {
                            "name": "delayDuration",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "The delay duration of the avatar."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<AvatarInstance, useAvatarProps>"
                },
                "AvatarState": {
                    "description": "Defines valid state in Avatar component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "load",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the avatar's image is loading or not."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "useAvatarState"
                },
                "AvatarExposes": {
                    "description": "Defines the methods and properties exposed by Avatar component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "useAvatarState",
                            "default": "",
                            "description": "The state of the useAvatar."
                        },
                        {
                            "name": "handleImageLoad",
                            "optional": false,
                            "readonly": false,
                            "type": "(src?: string) => void",
                            "default": "",
                            "description": "The method to handle image load."
                        },
                        {
                            "name": "handleImageUnload",
                            "optional": false,
                            "readonly": false,
                            "type": "() => void",
                            "default": "",
                            "description": "The method to handle image unload."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "useAvatarExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "AvatarPassThroughType": {
                    "values": "PassThroughType<AvatarInstance, E>",
                    "description": "Defines passthrough(pt) options type in Avatar component."
                },
                "AvatarClassNamesType": {
                    "values": "typeof AvatarClassNames[keyof typeof AvatarClassNames]",
                    "description": "Type representing the CSS class names used in the Avatar component."
                },
                "AvatarInstance": {
                    "values": "ComponentInstance<AvatarProps, AvatarState, AvatarExposes, AvatarPassThrough>",
                    "description": "Instance of Avatar component."
                }
            }
        },
        "variables": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "AvatarClassNames": {
                    "description": "Defines the CSS class names used in the Avatar component.",
                    "variables": [
                        {
                            "name": "root",
                            "value": "p-avatar",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "label",
                            "value": "p-avatar-label",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the box element"
                        },
                        {
                            "name": "icon",
                            "value": "p-avatar-icon",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the input element"
                        }
                    ]
                }
            }
        }
    },
    "avatarfallback": {
        "description": "AvatarFallback is a component that displays a fallback icon when the image fails to load or is not provided.\n\n[Live Demo](https://www.primereact.org/avatar/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "AvatarFallbackPassThrough": {
                    "description": "Defines passthrough(pt) options of AvatarFallback component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "AvatarFallbackPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "AvatarFallbackProps": {
                    "description": "Defines valid properties in AvatarFallback component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: AvatarFallbackInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: AvatarFallbackInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<AvatarFallbackPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: AvatarFallbackInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<AvatarFallbackInstance>"
                },
                "AvatarFallbackState": {
                    "description": "Defines valid state in AvatarFallback component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "AvatarFallbackExposes": {
                    "description": "Defines the methods and properties exposed by AvatarFallback component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "avatar",
                            "optional": false,
                            "readonly": false,
                            "type": "AvatarInstance",
                            "default": "",
                            "description": "The Avatar component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "AvatarFallbackPassThroughType": {
                    "values": "PassThroughType<AvatarFallbackInstance, E>",
                    "description": "Defines passthrough(pt) options type in AvatarFallback component."
                },
                "AvatarFallbackInstance": {
                    "values": "ComponentInstance<AvatarFallbackProps, AvatarFallbackState, AvatarFallbackExposes, AvatarFallbackPassThrough>",
                    "description": "Instance of AvatarFallback component."
                }
            }
        }
    },
    "avatargroup": {
        "description": "AvatarGroup is a component that displays a group of avatars, typically used to represent multiple users or items in a compact way.\n\n[Live Demo](https://www.primereact.org/avatar/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "AvatarGroupPassThrough": {
                    "description": "Defines passthrough(pt) options of AvatarGroup component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "AvatarGroupPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "AvatarGroupProps": {
                    "description": "Defines valid properties in AvatarGroup component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: AvatarGroupInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: AvatarGroupInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<AvatarGroupPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: AvatarGroupInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<AvatarGroupInstance>"
                },
                "AvatarGroupState": {
                    "description": "Defines valid state in AvatarGroup component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "AvatarGroupExposes": {
                    "description": "Defines the methods and properties exposed by AvatarGroup component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "AvatarGroupPassThroughType": {
                    "values": "PassThroughType<AvatarGroupInstance, E>",
                    "description": "Defines passthrough(pt) options type in AvatarGroup component."
                },
                "AvatarGroupClassNamesType": {
                    "values": "typeof AvatarGroupClassNames[keyof typeof AvatarGroupClassNames]",
                    "description": "Type representing the CSS class names used in the Avatar component."
                },
                "AvatarGroupInstance": {
                    "values": "ComponentInstance<AvatarGroupProps, AvatarGroupState, AvatarGroupExposes, AvatarGroupPassThrough>",
                    "description": "Instance of AvatarGroup component."
                }
            }
        },
        "variables": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "AvatarGroupClassNames": {
                    "description": "Defines the CSS class names used in the Avatar component.",
                    "variables": [
                        {
                            "name": "root",
                            "value": "p-avatar-group",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the root element"
                        }
                    ]
                }
            }
        }
    },
    "avatarimage": {
        "description": "AvatarImage is a component that displays an image inside an Avatar.\n\n[Live Demo](https://www.primereact.org/avatar/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "AvatarImagePassThrough": {
                    "description": "Defines passthrough(pt) options of AvatarImage component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "AvatarImagePassThroughType<HTMLAttributes<HTMLImageElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "AvatarImageProps": {
                    "description": "Defines valid properties in AvatarImage component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: AvatarImageInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: AvatarImageInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<AvatarImagePassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: AvatarImageInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "src",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Specifies the path to the image to display."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<AvatarImageInstance, unknown, \"img\">"
                },
                "AvatarImageState": {
                    "description": "Defines valid state in AvatarImage component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "AvatarImageExposes": {
                    "description": "Defines the methods and properties exposed by AvatarImage component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "avatar",
                            "optional": false,
                            "readonly": false,
                            "type": "AvatarInstance",
                            "default": "",
                            "description": "The Avatar component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "AvatarImagePassThroughType": {
                    "values": "PassThroughType<AvatarImageInstance, E>",
                    "description": "Defines passthrough(pt) options type in AvatarImage component."
                },
                "AvatarImageInstance": {
                    "values": "ComponentInstance<AvatarImageProps, AvatarImageState, AvatarImageExposes, AvatarImagePassThrough>",
                    "description": "Instance of AvatarImage component."
                }
            }
        }
    },
    "useavatar": {
        "description": "The useAvatar manages the state and functionality of a Avatar component.\n\n[Live Demo](https://www.primereact.org/avatar/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useAvatarProps": {
                    "description": "Defines valid properties in useAvatar.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "delayDuration",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "The delay duration of the avatar."
                        }
                    ],
                    "methods": []
                },
                "useAvatarState": {
                    "description": "Defines valid state in useAvatar.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "load",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the avatar's image is loading or not."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "AvatarState"
                },
                "useAvatarExposes": {
                    "description": "Defines the methods and properties exposed by useAvatar.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "useAvatarState",
                            "default": "",
                            "description": "The state of the useAvatar."
                        },
                        {
                            "name": "handleImageLoad",
                            "optional": false,
                            "readonly": false,
                            "type": "(src?: string) => void",
                            "default": "",
                            "description": "The method to handle image load."
                        },
                        {
                            "name": "handleImageUnload",
                            "optional": false,
                            "readonly": false,
                            "type": "() => void",
                            "default": "",
                            "description": "The method to handle image unload."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "AvatarExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useAvatarInstance": {
                    "values": "HeadlessInstance<useAvatarProps, useAvatarState, useAvatarExposes>",
                    "description": "Instance of useAvatar headless."
                }
            }
        }
    },
    "badge": {
        "description": "Badge is a small status indicator for another element.\n\n[Live Demo](https://www.primereact.org/badge/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "BadgePassThrough": {
                    "description": "Defines passthrough(pt) options of Badge component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "BadgePassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "BadgeProps": {
                    "description": "Defines valid properties in Badge component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: BadgeInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: BadgeInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<BadgePassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: BadgeInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "shape",
                            "optional": true,
                            "readonly": false,
                            "type": "\"circle\"",
                            "default": "",
                            "description": "Defines the shape of the badge."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "\"small\" | \"large\" | \"xlarge\"",
                            "default": "",
                            "description": "Size of the badge."
                        },
                        {
                            "name": "severity",
                            "optional": true,
                            "readonly": false,
                            "type": "\"secondary\" | \"info\" | \"success\" | \"warn\" | \"danger\" | \"contrast\"",
                            "default": "",
                            "description": "Severity type of the badge."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<BadgeInstance, useBadgeProps>"
                },
                "BadgeState": {
                    "description": "Defines valid state in Badge component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "useBadgeState"
                },
                "BadgeExposes": {
                    "description": "Defines the methods and properties exposed by Badge component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "useBadgeExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "BadgePassThroughType": {
                    "values": "PassThroughType<BadgeInstance, E>",
                    "description": "Defines passthrough(pt) options type in Badge component."
                },
                "BadgeClassNamesType": {
                    "values": "typeof BadgeClassNames[keyof typeof BadgeClassNames]",
                    "description": "Type representing the CSS class names used in the Badge component."
                },
                "BadgeInstance": {
                    "values": "ComponentInstance<BadgeProps, BadgeState, BadgeExposes, BadgePassThrough>",
                    "description": "Instance of Badge component."
                }
            }
        },
        "variables": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "BadgeClassNames": {
                    "description": "Defines the CSS class names used in the Badge component.",
                    "variables": [
                        {
                            "name": "root",
                            "value": "p-badge",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the root element"
                        }
                    ]
                }
            }
        }
    },
    "overlaybadge": {
        "description": "OverlayBadge component is used to display a badge on top of another element.\n\n[Live Demo](https://www.primereact.org/badge/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "OverlayBadgePassThrough": {
                    "description": "Defines passthrough(pt) options of OverlayBadge component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "OverlayBadgePassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "OverlayBadgeProps": {
                    "description": "Defines valid properties in OverlayBadge component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: OverlayBadgeInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: OverlayBadgeInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<OverlayBadgePassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: OverlayBadgeInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<OverlayBadgeInstance>"
                },
                "OverlayBadgeState": {
                    "description": "Defines valid state in OverlayBadge component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "OverlayBadgeExposes": {
                    "description": "Defines the methods and properties exposed by OverlayBadge component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "OverlayBadgePassThroughType": {
                    "values": "PassThroughType<OverlayBadgeInstance, E>",
                    "description": "Defines passthrough(pt) options type in OverlayBadge component."
                },
                "OverlayBadgeClassNamesType": {
                    "values": "typeof OverlayBadgeClassNames[keyof typeof OverlayBadgeClassNames]",
                    "description": "Type representing the CSS class names used in the OverlayBadge component."
                },
                "OverlayBadgeInstance": {
                    "values": "ComponentInstance<OverlayBadgeProps, OverlayBadgeState, OverlayBadgeExposes, OverlayBadgePassThrough>",
                    "description": "Instance of OverlayBadge component."
                }
            }
        },
        "variables": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "OverlayBadgeClassNames": {
                    "description": "Defines the CSS class names used in the OverlayBadge component.",
                    "variables": [
                        {
                            "name": "root",
                            "value": "p-overlaybadge",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the root element"
                        }
                    ]
                }
            }
        }
    },
    "usebadge": {
        "description": "The useBadge manages the state and functionality of a badge component.\n\n[Live Demo](https://www.primereact.org/badge/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useBadgeProps": {
                    "description": "Defines valid properties in useBadge.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "useBadgeState": {
                    "description": "Defines valid state in useBadge.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedBy": "BadgeState"
                },
                "useBadgeExposes": {
                    "description": "Defines the methods and properties exposed by useBadge.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedBy": "BadgeExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useBadgeInstance": {
                    "values": "HeadlessInstance<useBadgeProps, useBadgeState, useBadgeExposes>",
                    "description": "Instance of useBadge headless."
                }
            }
        }
    },
    "button": {
        "description": "Button is an extension to standard input element with icons and theming.\n\n[Live Demo](https://www.primereact.org/button/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ButtonPassThrough": {
                    "description": "Defines passthrough(pt) options of Button component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughType<HTMLAttributes<HTMLButtonElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "ButtonProps": {
                    "description": "Defines valid properties in Button component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: ButtonInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: ButtonInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<ButtonPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: ButtonInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "\"small\" | \"large\" | \"normal\"",
                            "default": "",
                            "description": "Size of the Button."
                        },
                        {
                            "name": "severity",
                            "optional": true,
                            "readonly": false,
                            "type": "\"secondary\" | \"info\" | \"success\" | \"warn\" | \"danger\" | \"contrast\" | \"help\" | string & {}",
                            "default": "",
                            "description": "Severity type of the Button."
                        },
                        {
                            "name": "variant",
                            "optional": true,
                            "readonly": false,
                            "type": "\"link\" | \"text\" | \"outlined\"",
                            "default": "",
                            "description": "Variant of the Button."
                        },
                        {
                            "name": "plain",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether to show the Button with a plain style."
                        },
                        {
                            "name": "rounded",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether to show the Button with a rounded style."
                        },
                        {
                            "name": "raised",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether to show the Button with a raised style."
                        },
                        {
                            "name": "iconOnly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether to show the Button with a borderless style."
                        },
                        {
                            "name": "fluid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether to show the Button with a fluid width."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<ButtonInstance, useButtonProps>"
                },
                "ButtonState": {
                    "description": "Defines valid state in Button component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "useButtonState"
                },
                "ButtonExposes": {
                    "description": "Defines the methods and properties exposed by Button component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "useButtonExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ButtonPassThroughType": {
                    "values": "PassThroughType<ButtonInstance, E>",
                    "description": "Defines passthrough(pt) options type in Button component."
                },
                "ButtonClassNamesType": {
                    "values": "typeof ButtonClassNames[keyof typeof ButtonClassNames]",
                    "description": "Type representing the CSS class names used in the Button component."
                },
                "ButtonInstance": {
                    "values": "ComponentInstance<ButtonProps, ButtonState, ButtonExposes, ButtonPassThrough>",
                    "description": "Instance of Button component."
                }
            }
        },
        "variables": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ButtonClassNames": {
                    "description": "Defines the CSS class names used in the Button component.",
                    "variables": [
                        {
                            "name": "root",
                            "value": "p-button",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "loadingIcon",
                            "value": "p-button-loading-icon",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the loading icon element"
                        },
                        {
                            "name": "icon",
                            "value": "p-button-icon",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the icon element"
                        },
                        {
                            "name": "label",
                            "value": "p-button-label",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the label element"
                        }
                    ]
                }
            }
        }
    },
    "buttongroup": {
        "description": "ButtonGroup is a component that groups multiple buttons together.\n\n[Live Demo](https://www.primereact.org/button/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ButtonGroupPassThrough": {
                    "description": "Defines passthrough(pt) options of Button component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonGroupPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "ButtonGroupProps": {
                    "description": "Defines valid properties in ButtonGroup component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: ButtonGroupInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: ButtonGroupInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<ButtonGroupPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: ButtonGroupInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<ButtonGroupInstance>"
                },
                "ButtonGroupState": {
                    "description": "Defines valid state in ButtonGroup component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "ButtonGroupExposes": {
                    "description": "Defines the methods and properties exposed by ButtonGroup component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ButtonGroupPassThroughType": {
                    "values": "PassThroughType<ButtonGroupInstance, E>",
                    "description": "Defines passthrough(pt) options type in Button component."
                },
                "ButtonGroupClassNamesType": {
                    "values": "typeof ButtonGroupClassNames[keyof typeof ButtonGroupClassNames]",
                    "description": "Type representing the CSS class names used in the ButtonGroup component."
                },
                "ButtonGroupInstance": {
                    "values": "ComponentInstance<ButtonGroupProps, ButtonGroupState, ButtonGroupExposes, ButtonGroupPassThrough>",
                    "description": "Instance of ButtonGroup component."
                }
            }
        },
        "variables": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ButtonGroupClassNames": {
                    "description": "Defines the CSS class names used in the Button component.",
                    "variables": [
                        {
                            "name": "root",
                            "value": "p-buttongroup",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the root element"
                        }
                    ]
                }
            }
        }
    },
    "usebutton": {
        "description": "The useButton manages the state and functionality of a Button component.\n\n[Live Demo](https://www.primereact.org/Button/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useButtonProps": {
                    "description": "Defines valid properties in useButton.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "useButtonState": {
                    "description": "Defines valid state in useButton.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedBy": "ButtonState"
                },
                "useButtonExposes": {
                    "description": "Defines the methods and properties exposed by useButton.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedBy": "ButtonExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useButtonInstance": {
                    "values": "HeadlessInstance<useButtonProps, useButtonState, useButtonExposes>",
                    "description": "Instance of useButton headless."
                }
            }
        }
    },
    "card": {
        "description": "Card is a flexible container component.\n\n[Live Demo](https://www.primereact.org/card/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "CardPassThrough": {
                    "description": "Defines passthrough(pt) options of Card component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "CardPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "CardProps": {
                    "description": "Defines valid properties in Card component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: CardInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: CardInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<CardPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: CardInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<CardInstance, useCardProps>"
                },
                "CardState": {
                    "description": "Defines valid state in Card component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "useCardState"
                },
                "CardExposes": {
                    "description": "Defines the methods and properties exposed by Card component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "useCardExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "CardPassThroughType": {
                    "values": "PassThroughType<CardInstance, E>",
                    "description": "Defines passthrough(pt) options type in Card component."
                },
                "CardClassNamesType": {
                    "values": "typeof CardClassNames[keyof typeof CardClassNames]",
                    "description": "Type representing the CSS class names used in the Card component."
                },
                "CardInstance": {
                    "values": "ComponentInstance<CardProps, CardState, CardExposes, CardPassThrough>",
                    "description": "Instance of Card component."
                }
            }
        },
        "variables": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "CardClassNames": {
                    "description": "Defines the CSS class names used in the Card component.",
                    "variables": [
                        {
                            "name": "root",
                            "value": "p-card",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "header",
                            "value": "p-card-header",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the header element"
                        },
                        {
                            "name": "body",
                            "value": "p-card-body",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the body element"
                        },
                        {
                            "name": "caption",
                            "value": "p-card-caption",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the caption element"
                        },
                        {
                            "name": "title",
                            "value": "p-card-title",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the title element"
                        },
                        {
                            "name": "subtitle",
                            "value": "p-card-subtitle",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the subtitle element"
                        },
                        {
                            "name": "content",
                            "value": "p-card-content",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the content element"
                        },
                        {
                            "name": "footer",
                            "value": "p-card-footer",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the footer element"
                        }
                    ]
                }
            }
        }
    },
    "cardbody": {
        "description": "CardBody is a component that displays a body inside a Card.\n\n[Live Demo](https://www.primereact.org/card/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "CardBodyPassThrough": {
                    "description": "Defines passthrough(pt) options of CardBody component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "CardBodyPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "CardBodyProps": {
                    "description": "Defines valid properties in CardBody component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: CardBodyInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: CardBodyInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<CardBodyPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: CardBodyInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<CardBodyInstance, unknown, \"div\">"
                },
                "CardBodyState": {
                    "description": "Defines valid state in CardBody component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "CardBodyExposes": {
                    "description": "Defines the methods and properties exposed by CardBody component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "card",
                            "optional": false,
                            "readonly": false,
                            "type": "CardInstance",
                            "default": "",
                            "description": "The Card component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "CardBodyPassThroughType": {
                    "values": "PassThroughType<CardBodyInstance, E>",
                    "description": "Defines passthrough(pt) options type in CardBody component."
                },
                "CardBodyInstance": {
                    "values": "ComponentInstance<CardBodyProps, CardBodyState, CardBodyExposes, CardBodyPassThrough>",
                    "description": "Instance of CardBody component."
                }
            }
        }
    },
    "cardcaption": {
        "description": "CardCaption is a component that displays a caption inside a Card.\n\n[Live Demo](https://www.primereact.org/card/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "CardCaptionPassThrough": {
                    "description": "Defines passthrough(pt) options of CardCaption component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "CardCaptionPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "CardCaptionProps": {
                    "description": "Defines valid properties in CardCaption component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: CardCaptionInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: CardCaptionInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<CardCaptionPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: CardCaptionInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<CardCaptionInstance, unknown, \"div\">"
                },
                "CardCaptionState": {
                    "description": "Defines valid state in CardCaption component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "CardCaptionExposes": {
                    "description": "Defines the methods and properties exposed by CardCaption component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "card",
                            "optional": false,
                            "readonly": false,
                            "type": "CardInstance",
                            "default": "",
                            "description": "The Card component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "CardCaptionPassThroughType": {
                    "values": "PassThroughType<CardCaptionInstance, E>",
                    "description": "Defines passthrough(pt) options type in CardCaption component."
                },
                "CardCaptionInstance": {
                    "values": "ComponentInstance<CardCaptionProps, CardCaptionState, CardCaptionExposes, CardCaptionPassThrough>",
                    "description": "Instance of CardCaption component."
                }
            }
        }
    },
    "cardcontent": {
        "description": "CardContent is a component that displays a content inside a Card.\n\n[Live Demo](https://www.primereact.org/card/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "CardContentPassThrough": {
                    "description": "Defines passthrough(pt) options of CardContent component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "CardContentPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "CardContentProps": {
                    "description": "Defines valid properties in CardContent component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: CardContentInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: CardContentInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<CardContentPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: CardContentInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<CardContentInstance, unknown, \"div\">"
                },
                "CardContentState": {
                    "description": "Defines valid state in CardContent component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "CardContentExposes": {
                    "description": "Defines the methods and properties exposed by CardContent component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "card",
                            "optional": false,
                            "readonly": false,
                            "type": "CardInstance",
                            "default": "",
                            "description": "The Card component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "CardContentPassThroughType": {
                    "values": "PassThroughType<CardContentInstance, E>",
                    "description": "Defines passthrough(pt) options type in CardContent component."
                },
                "CardContentInstance": {
                    "values": "ComponentInstance<CardContentProps, CardContentState, CardContentExposes, CardContentPassThrough>",
                    "description": "Instance of CardContent component."
                }
            }
        }
    },
    "cardfooter": {
        "description": "CardFooter is a component that displays a footer inside a Card.\n\n[Live Demo](https://www.primereact.org/card/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "CardFooterPassThrough": {
                    "description": "Defines passthrough(pt) options of CardFooter component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "CardFooterPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "CardFooterProps": {
                    "description": "Defines valid properties in CardFooter component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: CardFooterInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: CardFooterInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<CardFooterPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: CardFooterInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<CardFooterInstance, unknown, \"div\">"
                },
                "CardFooterState": {
                    "description": "Defines valid state in CardFooter component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "CardFooterExposes": {
                    "description": "Defines the methods and properties exposed by CardFooter component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "card",
                            "optional": false,
                            "readonly": false,
                            "type": "CardInstance",
                            "default": "",
                            "description": "The Card component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "CardFooterPassThroughType": {
                    "values": "PassThroughType<CardFooterInstance, E>",
                    "description": "Defines passthrough(pt) options type in CardFooter component."
                },
                "CardFooterInstance": {
                    "values": "ComponentInstance<CardFooterProps, CardFooterState, CardFooterExposes, CardFooterPassThrough>",
                    "description": "Instance of CardFooter component."
                }
            }
        }
    },
    "cardheader": {
        "description": "CardHeader is a component that displays a header inside a Card.\n\n[Live Demo](https://www.primereact.org/card/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "CardHeaderPassThrough": {
                    "description": "Defines passthrough(pt) options of CardHeader component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "CardHeaderPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "CardHeaderProps": {
                    "description": "Defines valid properties in CardHeader component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: CardHeaderInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: CardHeaderInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<CardHeaderPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: CardHeaderInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<CardHeaderInstance, unknown, \"div\">"
                },
                "CardHeaderState": {
                    "description": "Defines valid state in CardHeader component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "CardHeaderExposes": {
                    "description": "Defines the methods and properties exposed by CardHeader component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "card",
                            "optional": false,
                            "readonly": false,
                            "type": "CardInstance",
                            "default": "",
                            "description": "The Card component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "CardHeaderPassThroughType": {
                    "values": "PassThroughType<CardHeaderInstance, E>",
                    "description": "Defines passthrough(pt) options type in CardHeader component."
                },
                "CardHeaderInstance": {
                    "values": "ComponentInstance<CardHeaderProps, CardHeaderState, CardHeaderExposes, CardHeaderPassThrough>",
                    "description": "Instance of CardHeader component."
                }
            }
        }
    },
    "cardsubtitle": {
        "description": "CardSubtitle is a component that displays a subtitle inside a Card.\n\n[Live Demo](https://www.primereact.org/card/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "CardSubtitlePassThrough": {
                    "description": "Defines passthrough(pt) options of CardSubtitle component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "CardSubtitlePassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "CardSubtitleProps": {
                    "description": "Defines valid properties in CardSubtitle component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: CardSubtitleInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: CardSubtitleInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<CardSubtitlePassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: CardSubtitleInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<CardSubtitleInstance, unknown, \"div\">"
                },
                "CardSubtitleState": {
                    "description": "Defines valid state in CardSubtitle component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "CardSubtitleExposes": {
                    "description": "Defines the methods and properties exposed by CardSubtitle component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "card",
                            "optional": false,
                            "readonly": false,
                            "type": "CardInstance",
                            "default": "",
                            "description": "The Card component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "CardSubtitlePassThroughType": {
                    "values": "PassThroughType<CardSubtitleInstance, E>",
                    "description": "Defines passthrough(pt) options type in CardSubtitle component."
                },
                "CardSubtitleInstance": {
                    "values": "ComponentInstance<CardSubtitleProps, CardSubtitleState, CardSubtitleExposes, CardSubtitlePassThrough>",
                    "description": "Instance of CardSubtitle component."
                }
            }
        }
    },
    "cardtitle": {
        "description": "CardTitle is a component that displays a title inside a Card.\n\n[Live Demo](https://www.primereact.org/card/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "CardTitlePassThrough": {
                    "description": "Defines passthrough(pt) options of CardTitle component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "CardTitlePassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "CardTitleProps": {
                    "description": "Defines valid properties in CardTitle component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: CardTitleInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: CardTitleInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<CardTitlePassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: CardTitleInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<CardTitleInstance, unknown, \"div\">"
                },
                "CardTitleState": {
                    "description": "Defines valid state in CardTitle component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "CardTitleExposes": {
                    "description": "Defines the methods and properties exposed by CardTitle component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "card",
                            "optional": false,
                            "readonly": false,
                            "type": "CardInstance",
                            "default": "",
                            "description": "The Card component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "CardTitlePassThroughType": {
                    "values": "PassThroughType<CardTitleInstance, E>",
                    "description": "Defines passthrough(pt) options type in CardTitle component."
                },
                "CardTitleInstance": {
                    "values": "ComponentInstance<CardTitleProps, CardTitleState, CardTitleExposes, CardTitlePassThrough>",
                    "description": "Instance of CardTitle component."
                }
            }
        }
    },
    "usecard": {
        "description": "The useCard manages the state and functionality of a Card component.\n\n[Live Demo](https://www.primereact.org/Card/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useCardProps": {
                    "description": "Defines valid properties in useCard.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "useCardState": {
                    "description": "Defines valid state in useCard.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedBy": "CardState"
                },
                "useCardExposes": {
                    "description": "Defines the methods and properties exposed by useCard.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedBy": "CardExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useCardInstance": {
                    "values": "HeadlessInstance<useCardProps, useCardState, useCardExposes>",
                    "description": "Instance of useCard headless."
                }
            }
        }
    },
    "checkbox": {
        "description": "Checkbox is an extension to standard checkbox element with theming.\n\n[Live Demo](https://www.primereact.org/checkbox/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "CheckboxPassThrough": {
                    "description": "Defines passthrough(pt) options of Checkbox component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "CheckboxPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "input",
                            "optional": true,
                            "readonly": false,
                            "type": "CheckboxPassThroughType<InputHTMLAttributes<HTMLInputElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the input's DOM element."
                        },
                        {
                            "name": "box",
                            "optional": true,
                            "readonly": false,
                            "type": "CheckboxPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the box's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "CheckboxPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the icon's DOM element."
                        }
                    ],
                    "methods": []
                },
                "CheckboxChangeEvent": {
                    "description": "Event fired when the checkbox's checked state changes.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "Value of the checkbox."
                        },
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "ChangeEvent",
                            "default": "",
                            "description": "The original event that triggered the change."
                        },
                        {
                            "name": "checked",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "The checked state of the checkbox."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "CheckboxGroupUpdateChangeEvent",
                    "extendedTypes": "useCheckboxChangeEvent<React.ChangeEvent<HTMLInputElement>>"
                },
                "CheckboxProps": {
                    "description": "Defines valid properties in Checkbox component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: CheckboxInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: CheckboxInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<CheckboxPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: CheckboxInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "Value of the checkbox."
                        },
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "The name of the checkbox."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "\"small\" | \"large\" | \"normal\"",
                            "default": "",
                            "description": "Defines the size of the checkbox."
                        },
                        {
                            "name": "variant",
                            "optional": true,
                            "readonly": false,
                            "type": "\"outlined\" | \"filled\"",
                            "default": "",
                            "description": "Specifies the input variant of the component."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the element should be disabled."
                        },
                        {
                            "name": "readOnly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that an input field is read-only."
                        },
                        {
                            "name": "required",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the element is required."
                        },
                        {
                            "name": "invalid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style."
                        },
                        {
                            "name": "inputId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "inputStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the input field."
                        },
                        {
                            "name": "inputClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the input field."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes a string value that labels the component."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "onFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "(event: FocusEvent<HTMLInputElement>) => void",
                            "default": "",
                            "description": "Callback function that is called when the checkbox is focused."
                        },
                        {
                            "name": "onBlur",
                            "optional": true,
                            "readonly": false,
                            "type": "(event: FocusEvent<HTMLInputElement>) => void",
                            "default": "",
                            "description": "Callback function that is called when the checkbox loses focus."
                        },
                        {
                            "name": "onCheckedChange",
                            "optional": true,
                            "readonly": false,
                            "type": "(event: CheckboxChangeEvent) => void",
                            "default": "",
                            "description": "Callback fired when the checkbox's checked state changes."
                        },
                        {
                            "name": "checked",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "When present, it specifies the input's checked state."
                        },
                        {
                            "name": "defaultChecked",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "The default value for the input when not controlled by  `checked`  and  `onCheckedChange` ."
                        },
                        {
                            "name": "indeterminate",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies input state as indeterminate."
                        },
                        {
                            "name": "trueValue",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | boolean",
                            "default": "true",
                            "description": "Value in checked state."
                        },
                        {
                            "name": "falseValue",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | boolean",
                            "default": "false",
                            "description": "Value in unchecked state."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<CheckboxInstance, Omit<useCheckboxProps, \"onCheckedChange\">>"
                },
                "CheckboxState": {
                    "description": "Defines valid state in Checkbox component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "checked",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "The checked state of the useCheckbox."
                        },
                        {
                            "name": "indeterminate",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "The indeterminate state of the useCheckbox."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "useCheckboxState"
                },
                "CheckboxExposes": {
                    "description": "Defines the methods and properties exposed by Checkbox component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "group",
                            "optional": true,
                            "readonly": false,
                            "type": "CheckboxGroupInstance",
                            "default": "",
                            "description": "The group instance of the checkbox."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "useCheckboxState",
                            "default": "",
                            "description": "The state of the useCheckbox."
                        },
                        {
                            "name": "onChange",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: useCheckboxChangeEvent) => void",
                            "default": "",
                            "description": "Callback fired when the useCheckbox's checked state changes."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "useCheckboxExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "CheckboxPassThroughType": {
                    "values": "PassThroughType<CheckboxInstance, E>",
                    "description": "Defines passthrough(pt) options type in Checkbox component."
                },
                "CheckboxClassNamesType": {
                    "values": "typeof CheckboxClassNames[keyof typeof CheckboxClassNames]",
                    "description": "Type representing the CSS class names used in the Checkbox component."
                },
                "CheckboxInstance": {
                    "values": "ComponentInstance<CheckboxProps, CheckboxState, CheckboxExposes, CheckboxPassThrough>",
                    "description": "Instance of Checkbox component."
                }
            }
        },
        "variables": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "CheckboxClassNames": {
                    "description": "Defines the CSS class names used in the Checkbox component.",
                    "variables": [
                        {
                            "name": "root",
                            "value": "p-checkbox",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "box",
                            "value": "p-checkbox-box",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the box element"
                        },
                        {
                            "name": "input",
                            "value": "p-checkbox-input",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the input element"
                        },
                        {
                            "name": "icon",
                            "value": "p-checkbox-icon",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the icon element"
                        }
                    ]
                }
            }
        }
    },
    "checkboxgroup": {
        "description": "CheckboxGroup allows to select multiple options from a set of choices.\n\n[Live Demo](https://www.primereact.org/checkbox/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "CheckboxGroupPassThrough": {
                    "description": "Defines passthrough(pt) options of Checkbox component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "CheckboxGroupPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "CheckboxGroupValueChangeEvent": {
                    "description": "Event fired when the checkbox group's value changes.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "unknown[]",
                            "default": "",
                            "description": "The value of the checkbox group."
                        }
                    ],
                    "methods": []
                },
                "CheckboxGroupUpdateChangeEvent": {
                    "description": "Used to update the checkbox group value.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "Value of the checkbox."
                        },
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "ChangeEvent",
                            "default": "",
                            "description": "The original event that triggered the change."
                        },
                        {
                            "name": "checked",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "The checked state of the checkbox."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "CheckboxChangeEvent"
                },
                "CheckboxGroupProps": {
                    "description": "Defines valid properties in CheckboxGroup component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: CheckboxGroupInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: CheckboxGroupInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<CheckboxGroupPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: CheckboxGroupInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown[]",
                            "default": "",
                            "description": "Value of the checkbox group."
                        },
                        {
                            "name": "defaultValue",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown[]",
                            "default": "",
                            "description": "The default value of the checkbox group."
                        },
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "The name of the checkboxes."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the checkbox group should be disabled."
                        },
                        {
                            "name": "invalid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the checkbox group is invalid."
                        },
                        {
                            "name": "onValueChange",
                            "optional": true,
                            "readonly": false,
                            "type": "(event: CheckboxGroupValueChangeEvent) => void",
                            "default": "",
                            "description": "Callback function that is called when the checkbox group value changes."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<CheckboxGroupInstance>"
                },
                "CheckboxGroupState": {
                    "description": "Defines valid state in CheckboxGroup component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "unknown[]",
                            "default": "",
                            "description": "Value of the checkbox group."
                        }
                    ],
                    "methods": []
                },
                "CheckboxGroupExposes": {
                    "description": "Defines the methods and properties exposed by CheckboxGroup component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "CheckboxGroupState",
                            "default": "",
                            "description": "The state of the checkbox group."
                        },
                        {
                            "name": "updateChange",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: CheckboxGroupUpdateChangeEvent) => void",
                            "default": "",
                            "description": "Updates the value of the checkbox group."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "CheckboxGroupPassThroughType": {
                    "values": "PassThroughType<CheckboxGroupInstance, E>",
                    "description": "Defines passthrough(pt) options type in Checkbox component."
                },
                "CheckboxGroupClassNamesType": {
                    "values": "typeof CheckboxGroupClassNames[keyof typeof CheckboxGroupClassNames]",
                    "description": "Type representing the CSS class names used in the CheckboxGroup component."
                },
                "CheckboxGroupInstance": {
                    "values": "ComponentInstance<CheckboxGroupProps, CheckboxGroupState, CheckboxGroupExposes, CheckboxGroupPassThrough>",
                    "description": "Instance of CheckboxGroup component."
                }
            }
        },
        "variables": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "CheckboxGroupClassNames": {
                    "description": "Defines the CSS class names used in the CheckboxGroup component.",
                    "variables": [
                        {
                            "name": "root",
                            "value": "p-checkbox-group",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the root element"
                        }
                    ]
                }
            }
        }
    },
    "usecheckbox": {
        "description": "The useCheckbox manages the state and functionality of a checkbox component.\n\n[Live Demo](https://www.primereact.org/checkbox/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useCheckboxChangeEvent": {
                    "description": "Event fired when the checkbox's checked state changes.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "E",
                            "default": "",
                            "description": "The original event that triggered the change."
                        },
                        {
                            "name": "checked",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "The checked state of the checkbox."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "CheckboxChangeEvent"
                },
                "useCheckboxProps": {
                    "description": "Defines valid properties in useCheckbox.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "checked",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "When present, it specifies the input's checked state."
                        },
                        {
                            "name": "defaultChecked",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "The default value for the input when not controlled by  `checked`  and  `onCheckedChange` ."
                        },
                        {
                            "name": "indeterminate",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies input state as indeterminate."
                        },
                        {
                            "name": "trueValue",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | boolean",
                            "default": "true",
                            "description": "Value in checked state."
                        },
                        {
                            "name": "falseValue",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | boolean",
                            "default": "false",
                            "description": "Value in unchecked state."
                        },
                        {
                            "name": "onCheckedChange",
                            "optional": true,
                            "readonly": false,
                            "type": "(event: useCheckboxChangeEvent) => void",
                            "default": "",
                            "description": "Callback fired when the checkbox's checked state changes."
                        }
                    ],
                    "methods": []
                },
                "useCheckboxState": {
                    "description": "Defines valid state in useCheckbox.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "checked",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "The checked state of the useCheckbox."
                        },
                        {
                            "name": "indeterminate",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "The indeterminate state of the useCheckbox."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "CheckboxState"
                },
                "useCheckboxExposes": {
                    "description": "Defines the methods and properties exposed by useCheckbox.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "useCheckboxState",
                            "default": "",
                            "description": "The state of the useCheckbox."
                        },
                        {
                            "name": "onChange",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: useCheckboxChangeEvent) => void",
                            "default": "",
                            "description": "Callback fired when the useCheckbox's checked state changes."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "CheckboxExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useCheckboxInstance": {
                    "values": "HeadlessInstance<useCheckboxProps, useCheckboxState, useCheckboxExposes>",
                    "description": "Instance of useCheckbox headless."
                }
            }
        }
    },
    "chip": {
        "description": "Chip represents entities using icons, labels and images.\n\n[Live Demo](https://www.primereact.org/chip/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ChipPassThrough": {
                    "description": "Defines passthrough(pt) options of Chip component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ChipPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "ChipPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the icon's DOM element."
                        },
                        {
                            "name": "image",
                            "optional": true,
                            "readonly": false,
                            "type": "ChipPassThroughType<HTMLAttributes<HTMLImageElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the image's DOM element."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "ChipPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the label's DOM element."
                        },
                        {
                            "name": "removeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ChipPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the remove icon's DOM element."
                        }
                    ],
                    "methods": []
                },
                "ChipProps": {
                    "description": "Defines valid properties in Chip component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: ChipInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: ChipInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<ChipPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: ChipInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "onRemove",
                            "optional": true,
                            "readonly": false,
                            "type": "(event: useChipRemoveEvent) => void",
                            "default": "",
                            "description": "Callback fired when the chip is removed."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<ChipInstance, useChipProps>"
                },
                "ChipState": {
                    "description": "Defines valid state in Chip component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "visible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "The visibility state of the chip."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "useChipState"
                },
                "ChipExposes": {
                    "description": "Defines the methods and properties exposed by Chip component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "useChipState",
                            "default": "",
                            "description": "The state of the useChip."
                        },
                        {
                            "name": "close",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: SyntheticEvent<HTMLElement>) => void",
                            "default": "",
                            "description": "Closes the chip."
                        },
                        {
                            "name": "removeIconProps",
                            "optional": false,
                            "readonly": false,
                            "type": "{ onKeyDown: (event: KeyboardEvent<HTMLElement>) => void }",
                            "default": "",
                            "description": "Props for the remove icon."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "useChipExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ChipPassThroughType": {
                    "values": "PassThroughType<ChipInstance, E>",
                    "description": "Defines passthrough(pt) options type in Chip component."
                },
                "ChipClassNamesType": {
                    "values": "typeof ChipClassNames[keyof typeof ChipClassNames]",
                    "description": "Type representing the CSS class names used in the Chip component."
                },
                "ChipInstance": {
                    "values": "ComponentInstance<ChipProps, ChipState, ChipExposes, ChipPassThrough>",
                    "description": "Instance of Chip component."
                }
            }
        },
        "variables": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ChipClassNames": {
                    "description": "Defines the CSS class names used in the Chip component.",
                    "variables": [
                        {
                            "name": "root",
                            "value": "p-chip",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "image",
                            "value": "p-chip-image",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the image element"
                        },
                        {
                            "name": "icon",
                            "value": "p-chip-icon",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the icon element"
                        },
                        {
                            "name": "label",
                            "value": "p-chip-label",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the label element"
                        },
                        {
                            "name": "removeIcon",
                            "value": "p-chip-remove-icon",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the remove icon element"
                        }
                    ]
                }
            }
        }
    },
    "chipicon": {
        "description": "ChipIcon component is a part of the Chip component.\n\n[Live Demo](https://www.primereact.org/chip/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ChipIconPassThrough": {
                    "description": "Defines passthrough(pt) options of ChipIcon component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ChipIconPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "ChipIconProps": {
                    "description": "Defines valid properties in ChipIcon component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: ChipIconInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: ChipIconInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<ChipIconPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: ChipIconInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<ChipIconInstance>"
                },
                "ChipIconState": {
                    "description": "Defines valid state in ChipIcon component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "ChipIconExposes": {
                    "description": "Defines the methods and properties exposed by ChipIcon component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "chip",
                            "optional": false,
                            "readonly": false,
                            "type": "ChipInstance",
                            "default": "",
                            "description": "The Chip component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ChipIconPassThroughType": {
                    "values": "PassThroughType<ChipIconInstance, E>",
                    "description": "Defines passthrough(pt) options type in ChipIcon component."
                },
                "ChipIconInstance": {
                    "values": "ComponentInstance<ChipIconProps, ChipIconState, ChipIconExposes, ChipIconPassThrough>",
                    "description": "Instance of ChipIcon component."
                }
            }
        }
    },
    "chipimage": {
        "description": "ChipImage component is a part of the Chip component.\n\n[Live Demo](https://www.primereact.org/chip/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ChipImagePassThrough": {
                    "description": "Defines passthrough(pt) options of ChipImage component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ChipImagePassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "ChipImageProps": {
                    "description": "Defines valid properties in ChipImage component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: ChipImageInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: ChipImageInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<ChipImagePassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: ChipImageInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<ChipImageInstance>"
                },
                "ChipImageState": {
                    "description": "Defines valid state in ChipImage component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "ChipImageExposes": {
                    "description": "Defines the methods and properties exposed by ChipImage component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "chip",
                            "optional": false,
                            "readonly": false,
                            "type": "ChipInstance",
                            "default": "",
                            "description": "The Chip component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ChipImagePassThroughType": {
                    "values": "PassThroughType<ChipImageInstance, E>",
                    "description": "Defines passthrough(pt) options type in ChipImage component."
                },
                "ChipImageInstance": {
                    "values": "ComponentInstance<ChipImageProps, ChipImageState, ChipImageExposes, ChipImagePassThrough>",
                    "description": "Instance of ChipImage component."
                }
            }
        }
    },
    "chiplabel": {
        "description": "ChipLabel component is a part of the Chip component.\n\n[Live Demo](https://www.primereact.org/chip/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ChipLabelPassThrough": {
                    "description": "Defines passthrough(pt) options of ChipLabel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ChipLabelPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "ChipLabelProps": {
                    "description": "Defines valid properties in ChipLabel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: ChipLabelInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: ChipLabelInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<ChipLabelPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: ChipLabelInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<ChipLabelInstance>"
                },
                "ChipLabelState": {
                    "description": "Defines valid state in ChipLabel component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "ChipLabelExposes": {
                    "description": "Defines the methods and properties exposed by ChipLabel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "chip",
                            "optional": false,
                            "readonly": false,
                            "type": "ChipInstance",
                            "default": "",
                            "description": "The Chip component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ChipLabelPassThroughType": {
                    "values": "PassThroughType<ChipLabelInstance, E>",
                    "description": "Defines passthrough(pt) options type in ChipLabel component."
                },
                "ChipLabelInstance": {
                    "values": "ComponentInstance<ChipLabelProps, ChipLabelState, ChipLabelExposes, ChipLabelPassThrough>",
                    "description": "Instance of ChipLabel component."
                }
            }
        }
    },
    "chipremoveicon": {
        "description": "ChipRemoveIcon component is a part of the Chip component.\n\n[Live Demo](https://www.primereact.org/chip/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ChipRemoveIconPassThrough": {
                    "description": "Defines passthrough(pt) options of ChipRemoveIcon component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ChipRemoveIconPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "ChipRemoveIconProps": {
                    "description": "Defines valid properties in ChipRemoveIcon component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: ChipRemoveIconInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: ChipRemoveIconInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<ChipRemoveIconPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: ChipRemoveIconInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<ChipRemoveIconInstance>"
                },
                "ChipRemoveIconState": {
                    "description": "Defines valid state in ChipRemoveIcon component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "ChipRemoveIconExposes": {
                    "description": "Defines the methods and properties exposed by ChipRemoveIcon component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "chip",
                            "optional": false,
                            "readonly": false,
                            "type": "ChipInstance",
                            "default": "",
                            "description": "The Chip component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ChipRemoveIconPassThroughType": {
                    "values": "PassThroughType<ChipRemoveIconInstance, E>",
                    "description": "Defines passthrough(pt) options type in ChipRemoveIcon component."
                },
                "ChipRemoveIconInstance": {
                    "values": "ComponentInstance<ChipRemoveIconProps, ChipRemoveIconState, ChipRemoveIconExposes, ChipRemoveIconPassThrough>",
                    "description": "Instance of ChipRemoveIcon component."
                }
            }
        }
    },
    "usechip": {
        "description": "The useChip manages the state and functionality of a chip component.\n\n[Live Demo](https://www.primereact.org/chip/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useChipRemoveEvent": {
                    "description": "Event fired when the chip's remove icon is clicked.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "E",
                            "default": "",
                            "description": "The original event that triggered the change."
                        }
                    ],
                    "methods": []
                },
                "useChipProps": {
                    "description": "Defines valid properties in useChip.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "onRemove",
                            "optional": true,
                            "readonly": false,
                            "type": "(event: useChipRemoveEvent) => void",
                            "default": "",
                            "description": "Callback fired when the chip is removed."
                        }
                    ],
                    "methods": []
                },
                "useChipState": {
                    "description": "Defines valid state in useChip.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "visible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "The visibility state of the chip."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "ChipState"
                },
                "useChipExposes": {
                    "description": "Defines the methods and properties exposed by useChip.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "useChipState",
                            "default": "",
                            "description": "The state of the useChip."
                        },
                        {
                            "name": "close",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: SyntheticEvent<HTMLElement>) => void",
                            "default": "",
                            "description": "Closes the chip."
                        },
                        {
                            "name": "removeIconProps",
                            "optional": false,
                            "readonly": false,
                            "type": "{ onKeyDown: (event: KeyboardEvent<HTMLElement>) => void }",
                            "default": "",
                            "description": "Props for the remove icon."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "ChipExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useChipInstance": {
                    "values": "HeadlessInstance<useChipProps, useChipState, useChipExposes>",
                    "description": "Instance of useChip headless."
                }
            }
        }
    },
    "divider": {
        "description": "Divider is used to separate contents.\n\n[Live Demo](https://www.primereact.org/divider/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "DividerPassThrough": {
                    "description": "Defines passthrough(pt) options of Divider component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "DividerPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "DividerPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        }
                    ],
                    "methods": []
                },
                "DividerProps": {
                    "description": "Defines valid properties in Divider component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: DividerInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: DividerInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<DividerPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: DividerInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "align",
                            "optional": true,
                            "readonly": false,
                            "type": "\"center\" | \"left\" | \"right\" | \"top\" | \"bottom\"",
                            "default": "",
                            "description": "Alignment of the content."
                        },
                        {
                            "name": "orientation",
                            "optional": true,
                            "readonly": false,
                            "type": "\"horizontal\" | \"vertical\"",
                            "default": "horizontal",
                            "description": "Specifies the orientation, valid values are 'horizontal' and 'vertical'."
                        },
                        {
                            "name": "type",
                            "optional": true,
                            "readonly": false,
                            "type": "\"solid\" | \"dashed\" | \"dotted\"",
                            "default": "solid",
                            "description": "Border style type."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<DividerInstance, useDividerProps>"
                },
                "DividerState": {
                    "description": "Defines valid state in Divider component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "useDividerState"
                },
                "DividerExposes": {
                    "description": "Defines the methods and properties exposed by Divider component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "useDividerExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "DividerPassThroughType": {
                    "values": "PassThroughType<DividerInstance, E>",
                    "description": "Defines passthrough(pt) options type in Divider component."
                },
                "DividerClassNamesType": {
                    "values": "typeof DividerClassNames[keyof typeof DividerClassNames]",
                    "description": "Type representing the CSS class names used in the Divider component."
                },
                "DividerInstance": {
                    "values": "ComponentInstance<DividerProps, DividerState, DividerExposes, DividerPassThrough>",
                    "description": "Instance of Divider component."
                }
            }
        },
        "variables": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "DividerClassNames": {
                    "description": "Defines the CSS class names used in the Divider component.",
                    "variables": [
                        {
                            "name": "root",
                            "value": "p-divider",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "content",
                            "value": "p-divider-content",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the content element"
                        }
                    ]
                }
            }
        }
    },
    "dividercontent": {
        "description": "DividerContent is a component that displays the content.\n\n[Live Demo](https://www.primereact.org/divider/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "DividerContentPassThrough": {
                    "description": "Defines passthrough(pt) options of DividerContent component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "DividerContentPassThroughType<HTMLAttributes<HTMLButtonElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "DividerContentProps": {
                    "description": "Defines valid properties in DividerContent component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: DividerContentInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: DividerContentInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<DividerContentPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: DividerContentInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<DividerContentInstance>"
                },
                "DividerContentState": {
                    "description": "Defines valid state in DividerContent component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "DividerContentExposes": {
                    "description": "Defines the methods and properties exposed by DividerContent component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "divider",
                            "optional": false,
                            "readonly": false,
                            "type": "DividerInstance",
                            "default": "",
                            "description": "Instance of the Divider component."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "DividerContentPassThroughType": {
                    "values": "PassThroughType<DividerContentInstance, E>",
                    "description": "Defines passthrough(pt) options type in DividerContent component."
                },
                "DividerContentInstance": {
                    "values": "ComponentInstance<DividerContentProps, DividerContentState, DividerContentExposes, DividerContentPassThrough>",
                    "description": "Instance of DividerContent component."
                }
            }
        }
    },
    "usedivider": {
        "description": "The useDivider manages the state and functionality of a divider component.\n\n[Live Demo](https://www.primereact.org/divider/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useDividerProps": {
                    "description": "Defines valid properties in useDivider.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "useDividerState": {
                    "description": "Defines valid state in useDivider.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedBy": "DividerState"
                },
                "useDividerExposes": {
                    "description": "Defines the methods and properties exposed by useDivider.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedBy": "DividerExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useDividerInstance": {
                    "values": "HeadlessInstance<useDividerProps, useDividerState, useDividerExposes>",
                    "description": "Instance of useDivider headless."
                }
            }
        }
    },
    "fieldset": {
        "description": "Fieldset component is used to select a boolean value.\n\n[Live Demo](https://www.primereact.org/fieldset/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "FieldsetPassThrough": {
                    "description": "Defines passthrough(pt) options of Fieldset component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "FieldsetPassThroughType<HTMLAttributes<HTMLFieldSetElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "legend",
                            "optional": true,
                            "readonly": false,
                            "type": "FieldsetPassThroughType<HTMLAttributes<HTMLLegendElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the legend's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "FieldsetPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        }
                    ],
                    "methods": []
                },
                "FieldsetProps": {
                    "description": "Defines valid properties in Fieldset component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: FieldsetInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: FieldsetInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<FieldsetPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: FieldsetInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<FieldsetInstance, useFieldsetProps>"
                },
                "FieldsetState": {
                    "description": "Defines valid state in Fieldset component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "useFieldsetState"
                },
                "FieldsetExposes": {
                    "description": "Defines the methods and properties exposed by Fieldset component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "useFieldsetExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "FieldsetPassThroughType": {
                    "values": "PassThroughType<FieldsetInstance, E>",
                    "description": "Defines passthrough(pt) options type in Fieldset component."
                },
                "FieldsetClassNamesType": {
                    "values": "typeof FieldsetClassNames[keyof typeof FieldsetClassNames]",
                    "description": "Type representing the CSS class names used in the Fieldset component."
                },
                "FieldsetInstance": {
                    "values": "ComponentInstance<FieldsetProps, FieldsetState, FieldsetExposes, FieldsetPassThrough>",
                    "description": "Instance of Fieldset component."
                }
            }
        },
        "variables": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "FieldsetClassNames": {
                    "description": "Defines the CSS class names used in the Fieldset component.",
                    "variables": [
                        {
                            "name": "root",
                            "value": "p-fieldset",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "legend",
                            "value": "p-fieldset-legend",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the legend element"
                        },
                        {
                            "name": "content",
                            "value": "p-fieldset-content",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the content element"
                        }
                    ]
                }
            }
        }
    },
    "fieldsetcontent": {
        "description": "FieldsetContent is a component that displays content.\n\n[Live Demo](https://www.primereact.org/fieldset/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "FieldsetContentPassThrough": {
                    "description": "Defines passthrough(pt) options of FieldsetContent component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "FieldsetContentPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "FieldsetContentProps": {
                    "description": "Defines valid properties in FieldsetContent component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: FieldsetContentInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: FieldsetContentInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<FieldsetContentPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: FieldsetContentInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<FieldsetContentInstance>"
                },
                "FieldsetContentState": {
                    "description": "Defines valid state in FieldsetContent component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "FieldsetContentExposes": {
                    "description": "Defines the methods and properties exposed by FieldsetContent component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "fieldset",
                            "optional": false,
                            "readonly": false,
                            "type": "FieldsetInstance",
                            "default": "",
                            "description": "The Switch component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "FieldsetContentPassThroughType": {
                    "values": "PassThroughType<FieldsetContentInstance, E>",
                    "description": "Defines passthrough(pt) options type in FieldsetContent component."
                },
                "FieldsetContentInstance": {
                    "values": "ComponentInstance<FieldsetContentProps, FieldsetContentState, FieldsetContentExposes, FieldsetContentPassThrough>",
                    "description": "Instance of FieldsetContent component."
                }
            }
        }
    },
    "fieldsetlegend": {
        "description": "FieldsetLegend is a component that displays a container for legend.\n\n[Live Demo](https://www.primereact.org/fieldset/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "FieldsetLegendPassThrough": {
                    "description": "Defines passthrough(pt) options of FieldsetLegend component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "FieldsetLegendPassThroughType<HTMLAttributes<HTMLLegendElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "FieldsetLegendProps": {
                    "description": "Defines valid properties in FieldsetLegend component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: FieldsetLegendInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: FieldsetLegendInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<FieldsetLegendPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: FieldsetLegendInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<FieldsetLegendInstance>"
                },
                "FieldsetLegendState": {
                    "description": "Defines valid state in FieldsetLegend component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "FieldsetLegendExposes": {
                    "description": "Defines the methods and properties exposed by FieldsetLegend component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "fieldset",
                            "optional": false,
                            "readonly": false,
                            "type": "FieldsetInstance",
                            "default": "",
                            "description": "The Fieldset component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "FieldsetLegendPassThroughType": {
                    "values": "PassThroughType<FieldsetLegendInstance, E>",
                    "description": "Defines passthrough(pt) options type in FieldsetLegend component."
                },
                "FieldsetLegendInstance": {
                    "values": "ComponentInstance<FieldsetLegendProps, FieldsetLegendState, FieldsetLegendExposes, FieldsetLegendPassThrough>",
                    "description": "Instance of FieldsetLegend component."
                }
            }
        }
    },
    "usefieldset": {
        "description": "The useFieldset manages the state and functionality of a fieldset component.\n\n[Live Demo](https://www.primereact.org/fieldset/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useFieldsetProps": {
                    "description": "Defines valid properties in useFieldset.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "useFieldsetState": {
                    "description": "Defines valid state in useFieldset.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedBy": "FieldsetState"
                },
                "useFieldsetExposes": {
                    "description": "Defines the methods and properties exposed by useFieldset.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedBy": "FieldsetExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useFieldsetInstance": {
                    "values": "HeadlessInstance<useFieldsetProps, useFieldsetState, useFieldsetExposes>",
                    "description": "Instance of useFieldset headless."
                }
            }
        }
    },
    "inplace": {
        "description": "Inplace provides an easy to do editing and display at the same time where clicking the output displays the actual content.\n\n[Live Demo](https://www.primereact.org/inplace/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InplacePassThrough": {
                    "description": "Defines passthrough(pt) options of Inplace component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "InplacePassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "InplacePassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "display",
                            "optional": true,
                            "readonly": false,
                            "type": "InplacePassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the display's DOM element."
                        },
                        {
                            "name": "close",
                            "optional": true,
                            "readonly": false,
                            "type": "InplacePassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the close's DOM element."
                        }
                    ],
                    "methods": []
                },
                "InplaceChangeEvent": {
                    "description": "Event fired when the Inplace's checked state changes.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "Value of the Inplace."
                        },
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "The active state of the inplace."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "useInplaceChangeEvent"
                },
                "InplaceProps": {
                    "description": "Defines valid properties in Inplace component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: InplaceInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: InplaceInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<InplacePassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: InplaceInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the element should be disabled."
                        },
                        {
                            "name": "active",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the content is displayed or not."
                        },
                        {
                            "name": "onActiveChange",
                            "optional": true,
                            "readonly": false,
                            "type": "(active: boolean) => void",
                            "default": "",
                            "description": "Callback function that is called when the element is clicked."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<InplaceInstance, useInplaceProps>"
                },
                "InplaceState": {
                    "description": "Defines valid state in Inplace component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "The active state of the useInplace."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "useInplaceState"
                },
                "InplaceExposes": {
                    "description": "Defines the methods and properties exposed by Inplace component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "useInplaceState",
                            "default": "",
                            "description": "The state of the useInplace."
                        },
                        {
                            "name": "open",
                            "optional": false,
                            "readonly": false,
                            "type": "() => void",
                            "default": "",
                            "description": "Method to open the inplace."
                        },
                        {
                            "name": "close",
                            "optional": false,
                            "readonly": false,
                            "type": "() => void",
                            "default": "",
                            "description": "Method to close the inplace."
                        },
                        {
                            "name": "onActiveChange",
                            "optional": false,
                            "readonly": false,
                            "type": "() => void",
                            "default": "",
                            "description": "Method to handle the active change event."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "useInplaceExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InplacePassThroughType": {
                    "values": "PassThroughType<InplaceInstance, E>",
                    "description": "Defines passthrough(pt) options type in Inplace component."
                },
                "InplaceClassNamesType": {
                    "values": "typeof InplaceClassNames[keyof typeof InplaceClassNames]",
                    "description": "Type representing the CSS class names used in the Inplace component."
                },
                "InplaceInstance": {
                    "values": "ComponentInstance<InplaceProps, InplaceState, InplaceExposes, InplacePassThrough>",
                    "description": "Instance of Inplace component."
                }
            }
        },
        "variables": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "InplaceClassNames": {
                    "description": "Defines the CSS class names used in the Inplace component.",
                    "variables": [
                        {
                            "name": "root",
                            "value": "p-inplace",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "display",
                            "value": "p-inplace-display",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the display element"
                        },
                        {
                            "name": "content",
                            "value": "p-inplace-content",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the content element"
                        }
                    ]
                }
            }
        }
    },
    "inplaceclose": {
        "description": "InplaceClose component is a part of the PrimeReact library.\n\n[Live Demo](https://www.primereact.org/inplace/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InplaceClosePassThrough": {
                    "description": "Defines passthrough(pt) options of InplaceClose component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "InplaceClosePassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "InplaceCloseProps": {
                    "description": "Defines valid properties in InplaceClose component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: InplaceCloseInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: InplaceCloseInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<InplaceClosePassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: InplaceCloseInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<InplaceCloseInstance>"
                },
                "InplaceCloseState": {
                    "description": "Defines valid state in InplaceClose component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "InplaceCloseExposes": {
                    "description": "Defines the methods and properties exposed by InplaceClose component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "inplace",
                            "optional": false,
                            "readonly": false,
                            "type": "InplaceInstance",
                            "default": "",
                            "description": "The Inplace component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InplaceClosePassThroughType": {
                    "values": "PassThroughType<InplaceCloseInstance, E>",
                    "description": "Defines passthrough(pt) options type in InplaceClose component."
                },
                "InplaceCloseInstance": {
                    "values": "ComponentInstance<InplaceCloseProps, InplaceCloseState, InplaceCloseExposes, InplaceClosePassThrough>",
                    "description": "Instance of InplaceClose component."
                }
            }
        }
    },
    "inplacecontent": {
        "description": "InplaceContent component is a part of the PrimeReact library.\n\n[Live Demo](https://www.primereact.org/inplace/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InplaceContentPassThrough": {
                    "description": "Defines passthrough(pt) options of InplaceContent component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "InplaceContentPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "InplaceContentProps": {
                    "description": "Defines valid properties in InplaceContent component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: InplaceContentInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: InplaceContentInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<InplaceContentPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: InplaceContentInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<InplaceContentInstance>"
                },
                "InplaceContentState": {
                    "description": "Defines valid state in InplaceContent component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "InplaceContentExposes": {
                    "description": "Defines the methods and properties exposed by InplaceContent component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "inplace",
                            "optional": false,
                            "readonly": false,
                            "type": "InplaceInstance",
                            "default": "",
                            "description": "The Inplace component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InplaceContentPassThroughType": {
                    "values": "PassThroughType<InplaceContentInstance, E>",
                    "description": "Defines passthrough(pt) options type in InplaceContent component."
                },
                "InplaceContentInstance": {
                    "values": "ComponentInstance<InplaceContentProps, InplaceContentState, InplaceContentExposes, InplaceContentPassThrough>",
                    "description": "Instance of InplaceContent component."
                }
            }
        }
    },
    "inplacedisplay": {
        "description": "InplaceDisplay component is a part of the PrimeReact library.\n\n[Live Demo](https://www.primereact.org/inplace/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InplaceDisplayPassThrough": {
                    "description": "Defines passthrough(pt) options of InplaceDisplay component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "InplaceDisplayPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "InplaceDisplayProps": {
                    "description": "Defines valid properties in InplaceDisplay component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: InplaceDisplayInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: InplaceDisplayInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<InplaceDisplayPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: InplaceDisplayInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<InplaceDisplayInstance>"
                },
                "InplaceDisplayState": {
                    "description": "Defines valid state in InplaceDisplay component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "InplaceDisplayExposes": {
                    "description": "Defines the methods and properties exposed by InplaceDisplay component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "inplace",
                            "optional": false,
                            "readonly": false,
                            "type": "InplaceInstance",
                            "default": "",
                            "description": "The Inplace component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InplaceDisplayPassThroughType": {
                    "values": "PassThroughType<InplaceDisplayInstance, E>",
                    "description": "Defines passthrough(pt) options type in InplaceDisplay component."
                },
                "InplaceDisplayInstance": {
                    "values": "ComponentInstance<InplaceDisplayProps, InplaceDisplayState, InplaceDisplayExposes, InplaceDisplayPassThrough>",
                    "description": "Instance of InplaceDisplay component."
                }
            }
        }
    },
    "useinplace": {
        "description": "The useInplace manages the state and functionality of a inplace component.\n\n[Live Demo](https://www.primereact.org/checkbox/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useInplaceChangeEvent": {
                    "description": "Event fired when the checkbox's checked state changes.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "The active state of the inplace."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "InplaceChangeEvent"
                },
                "useInplaceProps": {
                    "description": "Defines valid properties in useInplace.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "active",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the content is displayed or not."
                        },
                        {
                            "name": "onActiveChange",
                            "optional": true,
                            "readonly": false,
                            "type": "(active: boolean) => void",
                            "default": "",
                            "description": "Callback function that is called when the element is clicked."
                        }
                    ],
                    "methods": []
                },
                "useInplaceState": {
                    "description": "Defines valid state in useInplace.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "The active state of the useInplace."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "InplaceState"
                },
                "useInplaceExposes": {
                    "description": "Defines the methods and properties exposed by useInplace.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "useInplaceState",
                            "default": "",
                            "description": "The state of the useInplace."
                        },
                        {
                            "name": "open",
                            "optional": false,
                            "readonly": false,
                            "type": "() => void",
                            "default": "",
                            "description": "Method to open the inplace."
                        },
                        {
                            "name": "close",
                            "optional": false,
                            "readonly": false,
                            "type": "() => void",
                            "default": "",
                            "description": "Method to close the inplace."
                        },
                        {
                            "name": "onActiveChange",
                            "optional": false,
                            "readonly": false,
                            "type": "() => void",
                            "default": "",
                            "description": "Method to handle the active change event."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "InplaceExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useInplaceInstance": {
                    "values": "HeadlessInstance<useInplaceProps, useInplaceState, useInplaceExposes>",
                    "description": "Instance of useInplace headless."
                }
            }
        }
    },
    "inputtext": {
        "description": "InputText is an extension to standard input element with theming.\n\n[Live Demo](https://www.primereact.org/inputtext/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InputTextPassThrough": {
                    "description": "Defines passthrough(pt) options of InputText component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "InputTextPassThroughType<InputHTMLAttributes<HTMLInputElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "InputTextProps": {
                    "description": "Defines valid properties in InputText component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: InputTextInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: InputTextInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<InputTextPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: InputTextInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "\"small\" | \"large\" | \"normal\"",
                            "default": "",
                            "description": "Defines the size of the InputText."
                        },
                        {
                            "name": "variant",
                            "optional": true,
                            "readonly": false,
                            "type": "\"outlined\" | \"filled\"",
                            "default": "",
                            "description": "Specifies the input variant of the component."
                        },
                        {
                            "name": "fluid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "When enabled, the component will stretch to occupy the full width of its container."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<InputTextInstance, useInputTextProps>"
                },
                "InputTextState": {
                    "description": "Defines valid state in InputText component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "useInputTextState"
                },
                "InputTextExposes": {
                    "description": "Defines the methods and properties exposed by InputText component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "useInputTextExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InputTextPassThroughType": {
                    "values": "PassThroughType<InputTextInstance, E>",
                    "description": "Defines passthrough(pt) options type in InputText component."
                },
                "InputTextClassNamesType": {
                    "values": "typeof InputTextClassNames[keyof typeof InputTextClassNames]",
                    "description": "Type representing the CSS class names used in the InputText component."
                },
                "InputTextInstance": {
                    "values": "ComponentInstance<InputTextProps, InputTextState, InputTextExposes, InputTextPassThrough>",
                    "description": "Instance of InputText component."
                }
            }
        },
        "variables": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "InputTextClassNames": {
                    "description": "Defines the CSS class names used in the InputText component.",
                    "variables": [
                        {
                            "name": "root",
                            "value": "p-inputtext",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the root element"
                        }
                    ]
                }
            }
        }
    },
    "useInputText": {
        "description": "The useInputText manages the state and functionality of an input text component.\n\n[Live Demo](https://www.primereact.org/inputtext/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useInputTextProps": {
                    "description": "Defines valid properties in useInputText.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "useInputTextState": {
                    "description": "Defines valid state in useInputText.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedBy": "InputTextState"
                },
                "useInputTextExposes": {
                    "description": "Defines the methods and properties exposed by useInputText.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedBy": "InputTextExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useInputTextInstance": {
                    "values": "HeadlessInstance<useInputTextProps, useInputTextState, useInputTextExposes>",
                    "description": "Instance of useInputText headless."
                }
            }
        }
    },
    "floatlabel": {
        "description": "FloatLabel visually integrates a label with its form element.\n\n[Live Demo](https://www.primereact.org/label/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "FloatLabelPassThrough": {
                    "description": "Defines passthrough(pt) options of FloatLabel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "FloatLabelPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "FloatLabelProps": {
                    "description": "Defines valid properties in FloatLabel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: FloatLabelInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: FloatLabelInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<FloatLabelPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: FloatLabelInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "variant",
                            "optional": true,
                            "readonly": false,
                            "type": "\"in\" | \"over\" | \"on\"",
                            "default": "over",
                            "description": "Defines the positioning of the label relative to the input."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<FloatLabelInstance>"
                },
                "FloatLabelState": {
                    "description": "Defines valid state in FloatLabel component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "FloatLabelExposes": {
                    "description": "Defines the methods and properties exposed by FloatLabel component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "FloatLabelPassThroughType": {
                    "values": "PassThroughType<FloatLabelInstance, E>",
                    "description": "Defines passthrough(pt) options type in FloatLabel component."
                },
                "FloatLabelClassNamesType": {
                    "values": "typeof FloatLabelClassNames[keyof typeof FloatLabelClassNames]",
                    "description": "Type representing the CSS class names used in the FloatLabel component."
                },
                "FloatLabelInstance": {
                    "values": "ComponentInstance<FloatLabelProps, FloatLabelState, FloatLabelExposes, FloatLabelPassThrough>",
                    "description": "Instance of FloatLabel component."
                }
            }
        },
        "variables": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "FloatLabelClassNames": {
                    "description": "Defines the CSS class names used in the FloatLabel component.",
                    "variables": [
                        {
                            "name": "root",
                            "value": "p-floatlabel",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the root element"
                        }
                    ]
                }
            }
        }
    },
    "iftalabel": {
        "description": "IftaLabel is used to create infield top aligned labels.\n\n[Live Demo](https://www.primereact.org/label/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "IftaLabelPassThrough": {
                    "description": "Defines passthrough(pt) options of IftaLabel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "IftaLabelPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "IftaLabelProps": {
                    "description": "Defines valid properties in IftaLabel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: IftaLabelInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: IftaLabelInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<IftaLabelPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: IftaLabelInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<IftaLabelInstance>"
                },
                "IftaLabelState": {
                    "description": "Defines valid state in IftaLabel component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "IftaLabelExposes": {
                    "description": "Defines the methods and properties exposed by IftaLabel component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "IftaLabelPassThroughType": {
                    "values": "PassThroughType<IftaLabelInstance, E>",
                    "description": "Defines passthrough(pt) options type in IftaLabel component."
                },
                "IftaLabelClassNamesType": {
                    "values": "typeof IftaLabelClassNames[keyof typeof IftaLabelClassNames]",
                    "description": "Type representing the CSS class names used in the IftaLabel component."
                },
                "IftaLabelInstance": {
                    "values": "ComponentInstance<IftaLabelProps, IftaLabelState, IftaLabelExposes, IftaLabelPassThrough>",
                    "description": "Instance of IftaLabel component."
                }
            }
        },
        "variables": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "IftaLabelClassNames": {
                    "description": "Defines the CSS class names used in the IftaLabel component.",
                    "variables": [
                        {
                            "name": "root",
                            "value": "p-iftalabel",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the root element"
                        }
                    ]
                }
            }
        }
    },
    "label": {
        "description": "Label can be used standalone or in conjunction with form components to provide accessible labeling.\n\n[Live Demo](https://www.primereact.org/label/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "LabelPassThrough": {
                    "description": "Defines passthrough(pt) options of Label component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "LabelPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "ifta",
                            "optional": true,
                            "readonly": false,
                            "type": "LabelPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the ifta's DOM element."
                        },
                        {
                            "name": "float",
                            "optional": true,
                            "readonly": false,
                            "type": "LabelPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the float's DOM element."
                        }
                    ],
                    "methods": []
                },
                "LabelProps": {
                    "description": "Defines valid properties in Label component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: LabelInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: LabelInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<LabelPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: LabelInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<LabelInstance, useLabelProps>"
                },
                "LabelState": {
                    "description": "Defines valid state in Label component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "useLabelState"
                },
                "LabelExposes": {
                    "description": "Defines the methods and properties exposed by Label component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "useLabelExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "LabelPassThroughType": {
                    "values": "PassThroughType<LabelInstance, E>",
                    "description": "Defines passthrough(pt) options type in Label component."
                },
                "LabelClassNamesType": {
                    "values": "typeof LabelClassNames[keyof typeof LabelClassNames]",
                    "description": "Type representing the CSS class names used in the Label component."
                },
                "LabelInstance": {
                    "values": "ComponentInstance<LabelProps, LabelState, LabelExposes, LabelPassThrough>",
                    "description": "Instance of Label component."
                }
            }
        },
        "variables": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "LabelClassNames": {
                    "description": "Defines the CSS class names used in the Label component.",
                    "variables": [
                        {
                            "name": "root",
                            "value": "p-label",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "ifta",
                            "value": "p-iftalabel",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "float",
                            "value": "p-floatlabel",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the root element"
                        }
                    ]
                }
            }
        }
    },
    "uselabel": {
        "description": "The useLabel manages the state and functionality of a label component.\n\n[Live Demo](https://www.primereact.org/label/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useLabelProps": {
                    "description": "Defines valid properties in useLabel.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "useLabelState": {
                    "description": "Defines valid state in useLabel.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedBy": "LabelState"
                },
                "useLabelExposes": {
                    "description": "Defines the methods and properties exposed by useLabel.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedBy": "LabelExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useLabelInstance": {
                    "values": "HeadlessInstance<useLabelProps, useLabelState, useLabelExposes>",
                    "description": "Instance of useLabel headless."
                }
            }
        }
    },
    "metergroup": {
        "description": "MeterGroup displays scalar measurements within a known range.\n\n[Live Demo](https://www.primereact.org/metergroup/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MeterGroupPassThrough": {
                    "description": "Defines passthrough(pt) options of MeterGroup component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "MeterGroupPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "meters",
                            "optional": true,
                            "readonly": false,
                            "type": "MeterGroupPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the meters' DOM element."
                        },
                        {
                            "name": "meter",
                            "optional": true,
                            "readonly": false,
                            "type": "MeterGroupPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the meter's DOM element."
                        },
                        {
                            "name": "labels",
                            "optional": true,
                            "readonly": false,
                            "type": "MeterGroupPassThroughType<HTMLAttributes<HTMLOListElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the labels' DOM element."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "MeterGroupPassThroughType<HTMLAttributes<HTMLLIElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the label's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "MeterGroupPassThroughType<HTMLAttributes<HTMLElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the label icon's DOM element."
                        },
                        {
                            "name": "marker",
                            "optional": true,
                            "readonly": false,
                            "type": "MeterGroupPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the label marker's DOM element."
                        },
                        {
                            "name": "text",
                            "optional": true,
                            "readonly": false,
                            "type": "MeterGroupPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "MeterGroupProps": {
                    "description": "Defines valid properties in MeterGroup component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: MeterGroupInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: MeterGroupInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<MeterGroupPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: MeterGroupInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "orientation",
                            "optional": true,
                            "readonly": false,
                            "type": "\"horizontal\" | \"vertical\"",
                            "default": "horizontal",
                            "description": "Specifies the layout of the component."
                        },
                        {
                            "name": "min",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Minimum boundary value."
                        },
                        {
                            "name": "max",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "100",
                            "description": "Maximum boundary value."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<MeterGroupInstance, useMeterGroupProps>"
                },
                "MeterGroupState": {
                    "description": "Defines valid state in MeterGroup component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "totalPercent",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "The total percentage of the meter group."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "useMeterGroupState"
                },
                "MeterGroupExposes": {
                    "description": "Defines the methods and properties exposed by MeterGroup component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "colors",
                            "optional": false,
                            "readonly": false,
                            "type": "Record<METERGROUP_DEFAULT_COLORS_TYPE, string>",
                            "default": ""
                        },
                        {
                            "name": "getNextColorIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "() => number",
                            "default": ""
                        },
                        {
                            "name": "getNextLabelIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "() => number",
                            "default": ""
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "useMeterGroupState",
                            "default": "",
                            "description": "The state of the useMeterGroup."
                        },
                        {
                            "name": "percent",
                            "optional": false,
                            "readonly": false,
                            "type": "(meterValue: number) => number",
                            "default": "",
                            "description": "Converts a meter value to a percentage."
                        },
                        {
                            "name": "percentAsString",
                            "optional": false,
                            "readonly": false,
                            "type": "(meterValue: number) => string",
                            "default": "",
                            "description": "Converts a meter value to a percentage string."
                        },
                        {
                            "name": "updateTotalPercent",
                            "optional": false,
                            "readonly": false,
                            "type": "(percent: number) => void",
                            "default": "",
                            "description": "Updates the total percentage of the meter group."
                        },
                        {
                            "name": "resetTotalPercent",
                            "optional": false,
                            "readonly": false,
                            "type": "() => void",
                            "default": "",
                            "description": "Resets the total percentage of the meter group to 0."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "useMeterGroupExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MeterGroupPassThroughType": {
                    "values": "PassThroughType<MeterGroupInstance, E>",
                    "description": "Defines passthrough(pt) options type in MeterGroup component."
                },
                "METERGROUP_DEFAULT_COLORS_TYPE": {
                    "values": "\"blue\" | \"emerald\" | \"violet\" | \"amber\" | \"gray\" | \"cyan\" | \"pink\" | \"lime\" | \"fuchsia\""
                },
                "MeterGroupClassNamesType": {
                    "values": "typeof MeterGroupClassNames[keyof typeof MeterGroupClassNames]",
                    "description": "Type representing the CSS class names used in the MeterGroup component."
                },
                "MeterGroupInstance": {
                    "values": "ComponentInstance<MeterGroupProps, MeterGroupState, MeterGroupExposes, MeterGroupPassThrough>",
                    "description": "Instance of MeterGroup component."
                }
            }
        },
        "variables": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "MeterGroupClassNames": {
                    "description": "Defines the CSS class names used in the MeterGroup component.",
                    "variables": [
                        {
                            "name": "root",
                            "value": "p-metergroup",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "meters",
                            "value": "p-metergroup-meters",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the meters element"
                        },
                        {
                            "name": "meter",
                            "value": "p-metergroup-meter",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the meter element"
                        },
                        {
                            "name": "labelList",
                            "value": "p-metergroup-label-list",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the label list element"
                        },
                        {
                            "name": "label",
                            "value": "p-metergroup-label",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the label element"
                        },
                        {
                            "name": "labelIcon",
                            "value": "p-metergroup-label-icon",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the label icon element"
                        },
                        {
                            "name": "labelMarker",
                            "value": "p-metergroup-label-marker",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the label marker element"
                        },
                        {
                            "name": "labelText",
                            "value": "p-metergroup-label-text",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the label text element"
                        }
                    ]
                }
            }
        }
    },
    "metergroupicon": {
        "description": "MeterGroupIcon is a component that displays an icon.\n\n[Live Demo](https://www.primereact.org/metergroup/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MeterGroupIconPassThrough": {
                    "description": "Defines passthrough(pt) options of MeterGroupIcon component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "MeterGroupIconPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "MeterGroupIconProps": {
                    "description": "Defines valid properties in MeterGroupIcon component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: MeterGroupIconInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: MeterGroupIconInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<MeterGroupIconPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: MeterGroupIconInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<MeterGroupIconInstance>"
                },
                "MeterGroupIconState": {
                    "description": "Defines valid state in MeterGroupIcon component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "MeterGroupIconExposes": {
                    "description": "Defines the methods and properties exposed by MeterGroupIcon component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "metergroup",
                            "optional": false,
                            "readonly": false,
                            "type": "MeterGroupInstance",
                            "default": "",
                            "description": "The MeterGroup component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MeterGroupIconPassThroughType": {
                    "values": "PassThroughType<MeterGroupIconInstance, E>",
                    "description": "Defines passthrough(pt) options type in MeterGroupIcon component."
                },
                "MeterGroupIconInstance": {
                    "values": "ComponentInstance<MeterGroupIconProps, MeterGroupIconState, MeterGroupIconExposes, MeterGroupIconPassThrough>",
                    "description": "Instance of MeterGroupIcon component."
                }
            }
        }
    },
    "metergrouplabel": {
        "description": "MeterGroupLabel is a component that displays a label.\n\n[Live Demo](https://www.primereact.org/metergroup/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MeterGroupLabelPassThrough": {
                    "description": "Defines passthrough(pt) options of MeterGroupLabel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "MeterGroupLabelPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "MeterGroupLabelProps": {
                    "description": "Defines valid properties in MeterGroupLabel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: MeterGroupLabelInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: MeterGroupLabelInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<MeterGroupLabelPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: MeterGroupLabelInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "color",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines the color of the label."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<MeterGroupLabelInstance>"
                },
                "MeterGroupLabelState": {
                    "description": "Defines valid state in MeterGroupLabel component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "MeterGroupLabelExposes": {
                    "description": "Defines the methods and properties exposed by MeterGroupLabel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "metergroup",
                            "optional": false,
                            "readonly": false,
                            "type": "MeterGroupInstance",
                            "default": "",
                            "description": "The MeterGroup component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MeterGroupLabelPassThroughType": {
                    "values": "PassThroughType<MeterGroupLabelInstance, E>",
                    "description": "Defines passthrough(pt) options type in MeterGroupLabel component."
                },
                "MeterGroupLabelInstance": {
                    "values": "ComponentInstance<MeterGroupLabelProps, MeterGroupLabelState, MeterGroupLabelExposes, MeterGroupLabelPassThrough>",
                    "description": "Instance of MeterGroupLabel component."
                }
            }
        }
    },
    "metergrouplabels": {
        "description": "MeterGroupLabels is a component that displays a group of labels.\n\n[Live Demo](https://www.primereact.org/metergroup/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MeterGroupLabelsPassThrough": {
                    "description": "Defines passthrough(pt) options of MeterGroupLabels component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "MeterGroupLabelsPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "MeterGroupLabelsProps": {
                    "description": "Defines valid properties in MeterGroupLabels component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: MeterGroupLabelsInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: MeterGroupLabelsInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<MeterGroupLabelsPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: MeterGroupLabelsInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "orientation",
                            "optional": true,
                            "readonly": false,
                            "type": "\"horizontal\" | \"vertical\"",
                            "default": "horizontal",
                            "description": "Specifies the label orientation of the component."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<MeterGroupLabelsInstance>"
                },
                "MeterGroupLabelsState": {
                    "description": "Defines valid state in MeterGroupLabels component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "MeterGroupLabelsExposes": {
                    "description": "Defines the methods and properties exposed by MeterGroupLabels component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "metergroup",
                            "optional": false,
                            "readonly": false,
                            "type": "MeterGroupInstance",
                            "default": "",
                            "description": "The MeterGroup component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MeterGroupLabelsPassThroughType": {
                    "values": "PassThroughType<MeterGroupLabelsInstance, E>",
                    "description": "Defines passthrough(pt) options type in MeterGroupLabels component."
                },
                "MeterGroupLabelsInstance": {
                    "values": "ComponentInstance<MeterGroupLabelsProps, MeterGroupLabelsState, MeterGroupLabelsExposes, MeterGroupLabelsPassThrough>",
                    "description": "Instance of MeterGroupLabels component."
                }
            }
        }
    },
    "metergroupmarker": {
        "description": "MeterGroupMarker is a component that represents a marker in a MeterGroup component.\n\n[Live Demo](https://www.primereact.org/metergroup/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MeterGroupMarkerPassThrough": {
                    "description": "Defines passthrough(pt) options of MeterGroupMarker component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "MeterGroupMarkerPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "MeterGroupMarkerProps": {
                    "description": "Defines valid properties in MeterGroupMarker component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: MeterGroupMarkerInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: MeterGroupMarkerInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<MeterGroupMarkerPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: MeterGroupMarkerInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "color",
                            "optional": true,
                            "readonly": false,
                            "type": "string & {} | METERGROUP_DEFAULT_COLORS_TYPE",
                            "default": "",
                            "description": "Defines the color of the marker."
                        },
                        {
                            "name": "index",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Defines the index of the marker."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<MeterGroupMarkerInstance>"
                },
                "MeterGroupMarkerState": {
                    "description": "Defines valid state in MeterGroupMarker component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "MeterGroupMarkerExposes": {
                    "description": "Defines the methods and properties exposed by MeterGroupMarker component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "metergroup",
                            "optional": false,
                            "readonly": false,
                            "type": "MeterGroupInstance",
                            "default": "",
                            "description": "The MeterGroup component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MeterGroupMarkerPassThroughType": {
                    "values": "PassThroughType<MeterGroupMarkerInstance, E>",
                    "description": "Defines passthrough(pt) options type in MeterGroupMarker component."
                },
                "MeterGroupMarkerInstance": {
                    "values": "ComponentInstance<MeterGroupMarkerProps, MeterGroupMarkerState, MeterGroupMarkerExposes, MeterGroupMarkerPassThrough>",
                    "description": "Instance of MeterGroupMarker component."
                }
            }
        }
    },
    "metergroupmeter": {
        "description": "MeterGroupMeter is a component that displays a meter.\n\n[Live Demo](https://www.primereact.org/metergroup/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MeterGroupMeterPassThrough": {
                    "description": "Defines passthrough(pt) options of MeterGroupMeter component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "MeterGroupMeterPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "MeterGroupMeterProps": {
                    "description": "Defines valid properties in MeterGroupMeter component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: MeterGroupMeterInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: MeterGroupMeterInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<MeterGroupMeterPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: MeterGroupMeterInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Defines the value of the meter."
                        },
                        {
                            "name": "color",
                            "optional": true,
                            "readonly": false,
                            "type": "string & {} | METERGROUP_DEFAULT_COLORS_TYPE",
                            "default": "",
                            "description": "Defines the color of the meter."
                        },
                        {
                            "name": "index",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Defines the index of the meter."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<MeterGroupMeterInstance>"
                },
                "MeterGroupMeterState": {
                    "description": "Defines valid state in MeterGroupMeter component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "MeterGroupMeterExposes": {
                    "description": "Defines the methods and properties exposed by MeterGroupMeter component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "metergroup",
                            "optional": false,
                            "readonly": false,
                            "type": "MeterGroupInstance",
                            "default": "",
                            "description": "The MeterGroup component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MeterGroupMeterPassThroughType": {
                    "values": "PassThroughType<MeterGroupMeterInstance, E>",
                    "description": "Defines passthrough(pt) options type in MeterGroupMeter component."
                },
                "MeterGroupMeterInstance": {
                    "values": "ComponentInstance<MeterGroupMeterProps, MeterGroupMeterState, MeterGroupMeterExposes, MeterGroupMeterPassThrough>",
                    "description": "Instance of MeterGroupMeter component."
                }
            }
        }
    },
    "metergroupmeters": {
        "description": "MeterGroupMeters is a component that displays a group of meters.\n\n[Live Demo](https://www.primereact.org/metergroup/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MeterGroupMetersPassThrough": {
                    "description": "Defines passthrough(pt) options of MeterGroupMeters component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "MeterGroupMetersPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "MeterGroupMetersProps": {
                    "description": "Defines valid properties in MeterGroupMeters component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: MeterGroupMetersInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: MeterGroupMetersInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<MeterGroupMetersPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: MeterGroupMetersInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<MeterGroupMetersInstance>"
                },
                "MeterGroupMetersState": {
                    "description": "Defines valid state in MeterGroupMeters component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "MeterGroupMetersExposes": {
                    "description": "Defines the methods and properties exposed by MeterGroupMeters component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "metergroup",
                            "optional": false,
                            "readonly": false,
                            "type": "MeterGroupInstance",
                            "default": "",
                            "description": "The MeterGroup component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MeterGroupMetersPassThroughType": {
                    "values": "PassThroughType<MeterGroupMetersInstance, E>",
                    "description": "Defines passthrough(pt) options type in MeterGroupMeters component."
                },
                "MeterGroupMetersInstance": {
                    "values": "ComponentInstance<MeterGroupMetersProps, MeterGroupMetersState, MeterGroupMetersExposes, MeterGroupMetersPassThrough>",
                    "description": "Instance of MeterGroupMeters component."
                }
            }
        }
    },
    "metergrouptext": {
        "description": "MeterGroupText is a component that displays text inside a MeterGroup.\n\n[Live Demo](https://www.primereact.org/metergroup/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MeterGroupTextPassThrough": {
                    "description": "Defines passthrough(pt) options of MeterGroupText component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "MeterGroupTextPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "MeterGroupTextProps": {
                    "description": "Defines valid properties in MeterGroupText component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: MeterGroupTextInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: MeterGroupTextInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<MeterGroupTextPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: MeterGroupTextInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<MeterGroupTextInstance>"
                },
                "MeterGroupTextState": {
                    "description": "Defines valid state in MeterGroupText component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "MeterGroupTextExposes": {
                    "description": "Defines the methods and properties exposed by MeterGroupText component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "metergroup",
                            "optional": false,
                            "readonly": false,
                            "type": "MeterGroupInstance",
                            "default": "",
                            "description": "The MeterGroup component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MeterGroupTextPassThroughType": {
                    "values": "PassThroughType<MeterGroupTextInstance, E>",
                    "description": "Defines passthrough(pt) options type in MeterGroupText component."
                },
                "MeterGroupTextInstance": {
                    "values": "ComponentInstance<MeterGroupTextProps, MeterGroupTextState, MeterGroupTextExposes, MeterGroupTextPassThrough>",
                    "description": "Instance of MeterGroupText component."
                }
            }
        }
    },
    "usemetergroup": {
        "description": "The useMeterGroup manages the state and functionality of a meter group component.\n\n[Live Demo](https://www.primereact.org/metergroup/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useMeterGroupProps": {
                    "description": "Defines valid properties in useMeterGroup.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "min",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Minimum boundary value."
                        },
                        {
                            "name": "max",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "100",
                            "description": "Maximum boundary value."
                        }
                    ],
                    "methods": []
                },
                "useMeterGroupState": {
                    "description": "Defines valid state in useMeterGroup.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "totalPercent",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "The total percentage of the meter group."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "MeterGroupState"
                },
                "useMeterGroupExposes": {
                    "description": "Defines the methods and properties exposed by useMeterGroup.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "useMeterGroupState",
                            "default": "",
                            "description": "The state of the useMeterGroup."
                        },
                        {
                            "name": "percent",
                            "optional": false,
                            "readonly": false,
                            "type": "(meterValue: number) => number",
                            "default": "",
                            "description": "Converts a meter value to a percentage."
                        },
                        {
                            "name": "percentAsString",
                            "optional": false,
                            "readonly": false,
                            "type": "(meterValue: number) => string",
                            "default": "",
                            "description": "Converts a meter value to a percentage string."
                        },
                        {
                            "name": "updateTotalPercent",
                            "optional": false,
                            "readonly": false,
                            "type": "(percent: number) => void",
                            "default": "",
                            "description": "Updates the total percentage of the meter group."
                        },
                        {
                            "name": "resetTotalPercent",
                            "optional": false,
                            "readonly": false,
                            "type": "() => void",
                            "default": "",
                            "description": "Resets the total percentage of the meter group to 0."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "MeterGroupExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useMeterGroupInstance": {
                    "values": "HeadlessInstance<useMeterGroupProps, useMeterGroupState, useMeterGroupExposes>",
                    "description": "Instance of useMeterGroup headless."
                }
            }
        }
    },
    "motion": {
        "description": "Motion is a component that provides a way to animate elements in React applications.\n\n[Live Demo](https://www.primereact.org/motion/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MotionPassThrough": {
                    "description": "Defines passthrough(pt) options of Motion component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "MotionPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "MotionProps": {
                    "description": "Defines valid properties in Motion component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: MotionInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: MotionInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<MotionPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: MotionInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "in",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the motion should be applied to the component.\nWhen set to true, the component will animate in."
                        },
                        {
                            "name": "mountOnEnter",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the motion should be applied when the component is mounted.\nWhen set to true, the component will animate in on mount."
                        },
                        {
                            "name": "unmountOnLeave",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be unmounted when the motion is not applied.\nWhen set to true, the component will be removed from the DOM when it is not visible."
                        },
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "type",
                            "optional": true,
                            "readonly": false,
                            "type": "\"animation\" | \"transition\"",
                            "default": ""
                        },
                        {
                            "name": "safe",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        },
                        {
                            "name": "appear",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        },
                        {
                            "name": "enter",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        },
                        {
                            "name": "leave",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        },
                        {
                            "name": "duration",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": ""
                        },
                        {
                            "name": "enterFromClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "enterToClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "enterActiveClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "leaveFromClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "leaveToClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "leaveActiveClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "onBeforeEnter",
                            "optional": true,
                            "readonly": false,
                            "type": "(el?: Element) => void",
                            "default": ""
                        },
                        {
                            "name": "onEnter",
                            "optional": true,
                            "readonly": false,
                            "type": "(el?: Element) => void",
                            "default": ""
                        },
                        {
                            "name": "onAfterEnter",
                            "optional": true,
                            "readonly": false,
                            "type": "(el?: Element) => void",
                            "default": ""
                        },
                        {
                            "name": "onEnterCancelled",
                            "optional": true,
                            "readonly": false,
                            "type": "(el?: Element) => void",
                            "default": ""
                        },
                        {
                            "name": "onBeforeLeave",
                            "optional": true,
                            "readonly": false,
                            "type": "(el?: Element) => void",
                            "default": ""
                        },
                        {
                            "name": "onLeave",
                            "optional": true,
                            "readonly": false,
                            "type": "(el?: Element) => void",
                            "default": ""
                        },
                        {
                            "name": "onAfterLeave",
                            "optional": true,
                            "readonly": false,
                            "type": "(el?: Element) => void",
                            "default": ""
                        },
                        {
                            "name": "onLeaveCancelled",
                            "optional": true,
                            "readonly": false,
                            "type": "(el?: Element) => void",
                            "default": ""
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<MotionInstance, useMotionProps>"
                },
                "MotionState": {
                    "description": "Defines valid state in Motion component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "useMotionState"
                },
                "MotionExposes": {
                    "description": "Defines the methods and properties exposed by Motion component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "motionRef",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": ""
                        },
                        {
                            "name": "enter",
                            "optional": true,
                            "readonly": false,
                            "type": "() => void",
                            "default": ""
                        },
                        {
                            "name": "leave",
                            "optional": true,
                            "readonly": false,
                            "type": "() => void",
                            "default": ""
                        },
                        {
                            "name": "cancel",
                            "optional": true,
                            "readonly": false,
                            "type": "() => void",
                            "default": ""
                        },
                        {
                            "name": "update",
                            "optional": true,
                            "readonly": false,
                            "type": "(element: Element, motionProps?: useMotionProps) => void",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "useMotionExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MotionPassThroughType": {
                    "values": "PassThroughType<MotionInstance, E>",
                    "description": "Defines passthrough(pt) options type in Motion component."
                },
                "MotionClassNamesType": {
                    "values": "typeof MotionClassNames[keyof typeof MotionClassNames]",
                    "description": "Type representing the CSS class names used in the Motion component."
                },
                "MotionInstance": {
                    "values": "ComponentInstance<MotionProps, MotionState, MotionExposes, MotionPassThrough>",
                    "description": "Instance of Motion component."
                }
            }
        },
        "variables": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "MotionClassNames": {
                    "description": "Defines the CSS class names used in the Motion component.",
                    "variables": []
                }
            }
        }
    },
    "useMotion": {
        "description": "The useMotion manages the state and functionality of a motion component.\n\n[Live Demo](https://www.primereact.org/motion/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useMotionProps": {
                    "description": "Defines valid properties in useMotion.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "type",
                            "optional": true,
                            "readonly": false,
                            "type": "\"animation\" | \"transition\"",
                            "default": ""
                        },
                        {
                            "name": "safe",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        },
                        {
                            "name": "appear",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        },
                        {
                            "name": "enter",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        },
                        {
                            "name": "leave",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        },
                        {
                            "name": "duration",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": ""
                        },
                        {
                            "name": "enterFromClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "enterToClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "enterActiveClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "leaveFromClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "leaveToClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "leaveActiveClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "onBeforeEnter",
                            "optional": true,
                            "readonly": false,
                            "type": "(el?: Element) => void",
                            "default": ""
                        },
                        {
                            "name": "onEnter",
                            "optional": true,
                            "readonly": false,
                            "type": "(el?: Element) => void",
                            "default": ""
                        },
                        {
                            "name": "onAfterEnter",
                            "optional": true,
                            "readonly": false,
                            "type": "(el?: Element) => void",
                            "default": ""
                        },
                        {
                            "name": "onEnterCancelled",
                            "optional": true,
                            "readonly": false,
                            "type": "(el?: Element) => void",
                            "default": ""
                        },
                        {
                            "name": "onBeforeLeave",
                            "optional": true,
                            "readonly": false,
                            "type": "(el?: Element) => void",
                            "default": ""
                        },
                        {
                            "name": "onLeave",
                            "optional": true,
                            "readonly": false,
                            "type": "(el?: Element) => void",
                            "default": ""
                        },
                        {
                            "name": "onAfterLeave",
                            "optional": true,
                            "readonly": false,
                            "type": "(el?: Element) => void",
                            "default": ""
                        },
                        {
                            "name": "onLeaveCancelled",
                            "optional": true,
                            "readonly": false,
                            "type": "(el?: Element) => void",
                            "default": ""
                        }
                    ],
                    "methods": []
                },
                "useMotionState": {
                    "description": "Defines valid state in useMotion.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedBy": "MotionState"
                },
                "useMotionExposes": {
                    "description": "Defines the methods and properties exposed by useMotion.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "motionRef",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": ""
                        },
                        {
                            "name": "enter",
                            "optional": true,
                            "readonly": false,
                            "type": "() => void",
                            "default": ""
                        },
                        {
                            "name": "leave",
                            "optional": true,
                            "readonly": false,
                            "type": "() => void",
                            "default": ""
                        },
                        {
                            "name": "cancel",
                            "optional": true,
                            "readonly": false,
                            "type": "() => void",
                            "default": ""
                        },
                        {
                            "name": "update",
                            "optional": true,
                            "readonly": false,
                            "type": "(element: Element, motionProps?: useMotionProps) => void",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedBy": "MotionExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useMotionInstance": {
                    "values": "HeadlessInstance<useMotionProps, useMotionState, useMotionExposes>",
                    "description": "Instance of useMotion headless."
                }
            }
        }
    },
    "panel": {
        "description": "Panel is a grouping component providing with content toggle feature.\n\n[Live Demo](https://www.primereact.org/panel/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PanelPassThrough": {
                    "description": "Defines passthrough(pt) options of Panel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "headerActions",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the header actions's DOM element."
                        },
                        {
                            "name": "title",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the title's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "collapse",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the collapse's DOM element."
                        },
                        {
                            "name": "footer",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the footer's DOM element."
                        }
                    ],
                    "methods": []
                },
                "PanelToggleEvent": {
                    "description": "Event fired when the panel's toggle state changes.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent",
                            "default": "",
                            "description": "The original event that triggered the toggle."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "The new value of the panel's toggle state."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "usePanelToggleEvent"
                },
                "PanelProps": {
                    "description": "Defines valid properties in Panel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: PanelInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: PanelInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<PanelPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: PanelInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "toggleable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, the content of panel can be expanded and collapsed by clicking the header."
                        },
                        {
                            "name": "onToggle",
                            "optional": true,
                            "readonly": false,
                            "type": "(event: PanelToggleEvent) => void",
                            "default": "",
                            "description": "Callback fired when the panel's toggle state changes."
                        },
                        {
                            "name": "collapsed",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the panel is collapsed."
                        },
                        {
                            "name": "onCollapse",
                            "optional": true,
                            "readonly": false,
                            "type": "(event: SyntheticEvent) => void",
                            "default": "",
                            "description": "Callback triggered when the panel is collapsed."
                        },
                        {
                            "name": "onExpand",
                            "optional": true,
                            "readonly": false,
                            "type": "(event: SyntheticEvent) => void",
                            "default": "",
                            "description": "Callback triggered when the panel is expanded."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<PanelInstance, Omit<usePanelProps, \"onToggle\">>"
                },
                "PanelState": {
                    "description": "Defines valid state in Panel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "collapsed",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the panel is collapsed."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "usePanelState"
                },
                "PanelExposes": {
                    "description": "Defines the methods and properties exposed by Panel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "usePanelState",
                            "default": "",
                            "description": "The state of the usePanel."
                        },
                        {
                            "name": "contentRef",
                            "optional": false,
                            "readonly": false,
                            "type": "RefObject<HTMLDivElement>",
                            "default": "",
                            "description": "Reference to the content element of the panel."
                        },
                        {
                            "name": "toggle",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: SyntheticEvent) => void",
                            "default": "",
                            "description": "Toggles the collapsed state of the panel."
                        },
                        {
                            "name": "expand",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: SyntheticEvent) => void",
                            "default": "",
                            "description": "Expands the panel."
                        },
                        {
                            "name": "collapse",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: SyntheticEvent) => void",
                            "default": "",
                            "description": "Collapses the panel."
                        },
                        {
                            "name": "onButtonClick",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: SyntheticEvent) => void",
                            "default": "",
                            "description": "Callback for when the toggle button is clicked."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "usePanelExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PanelPassThroughType": {
                    "values": "PassThroughType<PanelInstance, E>",
                    "description": "Defines passthrough(pt) options type in Panel component."
                },
                "PanelClassNamesType": {
                    "values": "typeof PanelClassNames[keyof typeof PanelClassNames]",
                    "description": "Type representing the CSS class names used in the Panel component."
                },
                "PanelInstance": {
                    "values": "ComponentInstance<PanelProps, PanelState, PanelExposes, PanelPassThrough>",
                    "description": "Instance of Panel component."
                }
            }
        },
        "variables": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "PanelClassNames": {
                    "description": "Defines the CSS class names used in the Panel component.",
                    "variables": [
                        {
                            "name": "root",
                            "value": "p-panel",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "header",
                            "value": "p-panel-header",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the header element"
                        },
                        {
                            "name": "title",
                            "value": "p-panel-title",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the title element"
                        },
                        {
                            "name": "headerActions",
                            "value": "p-panel-header-actions",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the header actions element"
                        },
                        {
                            "name": "collapse",
                            "value": "p-panel-toggle-button",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the toggle button element"
                        },
                        {
                            "name": "content",
                            "value": "p-panel-content",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the content element"
                        }
                    ]
                }
            }
        }
    },
    "panelcollapse": {
        "description": "PanelCollapse is a component that displays a collapse button.\n\n[Live Demo](https://www.primereact.org/panel/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PanelCollapsePassThrough": {
                    "description": "Defines passthrough(pt) options of PanelCollapse component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelCollapsePassThroughType<HTMLAttributes<HTMLButtonElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "PanelCollapseProps": {
                    "description": "Defines valid properties in PanelCollapse component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: PanelCollapseInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: PanelCollapseInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<PanelCollapsePassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: PanelCollapseInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "iconOnly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show the PanelCollapse with a borderless style."
                        },
                        {
                            "name": "severity",
                            "optional": true,
                            "readonly": false,
                            "type": "\"secondary\" | \"info\" | \"success\" | \"warn\" | \"danger\" | \"contrast\" | \"help\" | string & {}",
                            "default": "'secondary'",
                            "description": "Severity type of the PanelCollapse."
                        },
                        {
                            "name": "variant",
                            "optional": true,
                            "readonly": false,
                            "type": "\"link\" | \"text\" | \"outlined\"",
                            "default": "'text'",
                            "description": "Variant of the PanelCollapse."
                        },
                        {
                            "name": "rounded",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show the PanelCollapse with a rounded style."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<PanelCollapseInstance>"
                },
                "PanelCollapseState": {
                    "description": "Defines valid state in PanelCollapse component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "PanelCollapseExposes": {
                    "description": "Defines the methods and properties exposed by PanelCollapse component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "panel",
                            "optional": false,
                            "readonly": false,
                            "type": "PanelInstance",
                            "default": "",
                            "description": "Instance of the Panel component."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PanelCollapsePassThroughType": {
                    "values": "PassThroughType<PanelCollapseInstance, E>",
                    "description": "Defines passthrough(pt) options type in PanelCollapse component."
                },
                "PanelCollapseInstance": {
                    "values": "ComponentInstance<PanelCollapseProps, PanelCollapseState, PanelCollapseExposes, PanelCollapsePassThrough>",
                    "description": "Instance of PanelCollapse component."
                }
            }
        }
    },
    "panelcontent": {
        "description": "PanelContent is a component that displays a content.\n\n[Live Demo](https://www.primereact.org/panel/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PanelContentPassThrough": {
                    "description": "Defines passthrough(pt) options of PanelContent component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelContentPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "PanelContentProps": {
                    "description": "Defines valid properties in PanelContent component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: PanelContentInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: PanelContentInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<PanelContentPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: PanelContentInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<PanelContentInstance>"
                },
                "PanelContentState": {
                    "description": "Defines valid state in PanelContent component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "PanelContentExposes": {
                    "description": "Defines the methods and properties exposed by PanelContent component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PanelContentPassThroughType": {
                    "values": "PassThroughType<PanelContentInstance, E>",
                    "description": "Defines passthrough(pt) options type in PanelContent component."
                },
                "PanelContentInstance": {
                    "values": "ComponentInstance<PanelContentProps, PanelContentState, PanelContentExposes, PanelContentPassThrough>",
                    "description": "Instance of PanelContent component."
                }
            }
        }
    },
    "panelfooter": {
        "description": "PanelFooter is a component that displays a footer.\n\n[Live Demo](https://www.primereact.org/panel/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PanelFooterPassThrough": {
                    "description": "Defines passthrough(pt) options of PanelFooter component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelFooterPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "PanelFooterProps": {
                    "description": "Defines valid properties in PanelFooter component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: PanelFooterInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: PanelFooterInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<PanelFooterPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: PanelFooterInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<PanelFooterInstance>"
                },
                "PanelFooterState": {
                    "description": "Defines valid state in PanelFooter component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "PanelFooterExposes": {
                    "description": "Defines the methods and properties exposed by PanelFooter component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PanelFooterPassThroughType": {
                    "values": "PassThroughType<PanelFooterInstance, E>",
                    "description": "Defines passthrough(pt) options type in PanelFooter component."
                },
                "PanelFooterInstance": {
                    "values": "ComponentInstance<PanelFooterProps, PanelFooterState, PanelFooterExposes, PanelFooterPassThrough>",
                    "description": "Instance of PanelFooter component."
                }
            }
        }
    },
    "panelheader": {
        "description": "PanelHeader is a component that displays a header.\n\n[Live Demo](https://www.primereact.org/panel/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PanelHeaderPassThrough": {
                    "description": "Defines passthrough(pt) options of PanelHeadercomponent.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelHeaderPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "PanelHeaderProps": {
                    "description": "Defines valid properties in PanelHeadercomponent.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: PanelHeaderInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: PanelHeaderInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<PanelHeaderPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: PanelHeaderInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<PanelHeaderInstance>"
                },
                "PanelHeaderState": {
                    "description": "Defines valid state in PanelHeadercomponent.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "PanelHeaderExposes": {
                    "description": "Defines the methods and properties exposed by PanelHeadercomponent.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PanelHeaderPassThroughType": {
                    "values": "PassThroughType<PanelHeaderInstance, E>",
                    "description": "Defines passthrough(pt) options type in PanelHeadercomponent."
                },
                "PanelHeaderInstance": {
                    "values": "ComponentInstance<PanelHeaderProps, PanelHeaderState, PanelHeaderExposes, PanelHeaderPassThrough>",
                    "description": "Instance of PanelHeadercomponent."
                }
            }
        }
    },
    "panelheaderactions": {
        "description": "PanelHeaderActions is a component that displays a header actions.\n\n[Live Demo](https://www.primereact.org/panel/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PanelHeaderActionsPassThrough": {
                    "description": "Defines passthrough(pt) options of PanelHeaderActions component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelHeaderActionsPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "PanelHeaderActionsProps": {
                    "description": "Defines valid properties in PanelHeaderActions component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: PanelHeaderActionsInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: PanelHeaderActionsInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<PanelHeaderActionsPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: PanelHeaderActionsInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<PanelHeaderActionsInstance>"
                },
                "PanelHeaderActionsState": {
                    "description": "Defines valid state in PanelHeaderActions component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "PanelHeaderActionsExposes": {
                    "description": "Defines the methods and properties exposed by PanelHeaderActions component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "panel",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelInstance",
                            "default": "",
                            "description": "The panel instance that the header actions belong to."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PanelHeaderActionsPassThroughType": {
                    "values": "PassThroughType<PanelHeaderActionsInstance, E>",
                    "description": "Defines passthrough(pt) options type in PanelHeaderActions component."
                },
                "PanelHeaderActionsInstance": {
                    "values": "ComponentInstance<PanelHeaderActionsProps, PanelHeaderActionsState, PanelHeaderActionsExposes, PanelHeaderActionsPassThrough>",
                    "description": "Instance of PanelHeaderActions component."
                }
            }
        }
    },
    "paneltitle": {
        "description": "PanelTitle is a component that displays a title.\n\n[Live Demo](https://www.primereact.org/panel/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PanelTitlePassThrough": {
                    "description": "Defines passthrough(pt) options of PanelTitlecomponent.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelTitlePassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "PanelTitleProps": {
                    "description": "Defines valid properties in PanelTitlecomponent.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: PanelTitleInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: PanelTitleInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<PanelTitlePassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: PanelTitleInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<PanelTitleInstance>"
                },
                "PanelTitleState": {
                    "description": "Defines valid state in PanelTitlecomponent.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "PanelTitleExposes": {
                    "description": "Defines the methods and properties exposed by PanelTitlecomponent.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PanelTitlePassThroughType": {
                    "values": "PassThroughType<PanelTitleInstance, E>",
                    "description": "Defines passthrough(pt) options type in PanelTitlecomponent."
                },
                "PanelTitleInstance": {
                    "values": "ComponentInstance<PanelTitleProps, PanelTitleState, PanelTitleExposes, PanelTitlePassThrough>",
                    "description": "Instance of PanelTitlecomponent."
                }
            }
        }
    },
    "usepanel": {
        "description": "The usePanel manages the state and functionality of a panel component.\n\n[Live Demo](https://www.primereact.org/panel/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "usePanelToggleEvent": {
                    "description": "Event object for the onToggle callback.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent",
                            "default": "",
                            "description": "The original event that triggered the toggle."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "The new value of the panel's toggle state."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "PanelToggleEvent"
                },
                "usePanelProps": {
                    "description": "Props for the usePanel hook.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "collapsed",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the panel is collapsed."
                        },
                        {
                            "name": "toggleable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Indicates if the panel can be toggled."
                        },
                        {
                            "name": "onCollapse",
                            "optional": true,
                            "readonly": false,
                            "type": "(event: SyntheticEvent) => void",
                            "default": "",
                            "description": "Callback triggered when the panel is collapsed."
                        },
                        {
                            "name": "onExpand",
                            "optional": true,
                            "readonly": false,
                            "type": "(event: SyntheticEvent) => void",
                            "default": "",
                            "description": "Callback triggered when the panel is expanded."
                        },
                        {
                            "name": "onToggle",
                            "optional": true,
                            "readonly": false,
                            "type": "(event: usePanelToggleEvent) => void",
                            "default": "",
                            "description": "Callback triggered when the panel's toggle state changes."
                        }
                    ],
                    "methods": []
                },
                "usePanelState": {
                    "description": "Defines valid state in usePanel.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "collapsed",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the panel is collapsed."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "PanelState"
                },
                "usePanelExposes": {
                    "description": "Defines the methods and properties exposed by usePanel.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "usePanelState",
                            "default": "",
                            "description": "The state of the usePanel."
                        },
                        {
                            "name": "contentRef",
                            "optional": false,
                            "readonly": false,
                            "type": "RefObject<HTMLDivElement>",
                            "default": "",
                            "description": "Reference to the content element of the panel."
                        },
                        {
                            "name": "toggle",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: SyntheticEvent) => void",
                            "default": "",
                            "description": "Toggles the collapsed state of the panel."
                        },
                        {
                            "name": "expand",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: SyntheticEvent) => void",
                            "default": "",
                            "description": "Expands the panel."
                        },
                        {
                            "name": "collapse",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: SyntheticEvent) => void",
                            "default": "",
                            "description": "Collapses the panel."
                        },
                        {
                            "name": "onButtonClick",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: SyntheticEvent) => void",
                            "default": "",
                            "description": "Callback for when the toggle button is clicked."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "PanelExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "usePanelInstance": {
                    "values": "HeadlessInstance<usePanelProps, usePanelState, usePanelExposes>",
                    "description": "Instance of usePanel headless."
                }
            }
        }
    },
    "progressbar": {
        "description": "ProgressBar is a process status indicator.\n\n[Live Demo](https://www.primereact.org/progressbar/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ProgressBarPassThrough": {
                    "description": "Defines passthrough(pt) options of ProgressBar component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ProgressBarPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "ProgressBarPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the value's DOM element."
                        }
                    ],
                    "methods": []
                },
                "ProgressBarProps": {
                    "description": "Defines valid properties in ProgressBar component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: ProgressBarInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: ProgressBarInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<ProgressBarPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: ProgressBarInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "mode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"indeterminate\" | \"determinate\"",
                            "default": "determinate",
                            "description": "Defines the mode of the progress"
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current value of the progress."
                        },
                        {
                            "name": "max",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Defines the mode of the progress"
                        },
                        {
                            "name": "min",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Defines the mode of the progress"
                        },
                        {
                            "name": "formatter",
                            "optional": true,
                            "readonly": false,
                            "type": "(value: number) => string",
                            "default": "",
                            "description": "Custom formatter function to format the display value"
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<ProgressBarInstance, useProgressBarProps>"
                },
                "ProgressBarState": {
                    "description": "Defines valid state in ProgressBar component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "computedValue",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current value of the progress."
                        },
                        {
                            "name": "formattedValue",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current value of the progress in percentage format and fixed to 2 decimal places."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "useProgressBarState"
                },
                "ProgressBarExposes": {
                    "description": "Defines the methods and properties exposed by ProgressBar component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "useProgressBarExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ProgressBarPassThroughType": {
                    "values": "PassThroughType<ProgressBarInstance, E>",
                    "description": "Defines passthrough(pt) options type in ProgressBar component."
                },
                "ProgressBarClassNamesType": {
                    "values": "typeof ProgressBarClassNames[keyof typeof ProgressBarClassNames]",
                    "description": "Type representing the CSS class names used in the ProgressBar component."
                },
                "ProgressBarInstance": {
                    "values": "ComponentInstance<ProgressBarProps, ProgressBarState, ProgressBarExposes, ProgressBarPassThrough>",
                    "description": "Instance of ProgressBar component."
                }
            }
        },
        "variables": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ProgressBarClassNames": {
                    "description": "Defines the CSS class names used in the ProgressBar component.",
                    "variables": [
                        {
                            "name": "root",
                            "value": "p-progressbar",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "value",
                            "value": "p-progressbar-value",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the value element"
                        },
                        {
                            "name": "label",
                            "value": "p-progressbar-label",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the label element"
                        }
                    ]
                }
            }
        }
    },
    "progressbarindicator": {
        "description": "ProgressBarIndicator component is used to display the indicator of ProgressBar.\n\n[Live Demo](https://www.primereact.org/progressbar/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ProgressBarIndicatorPassThrough": {
                    "description": "Defines passthrough(pt) options of ProgressBarIndicator component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ProgressBarIndicatorPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "ProgressBarIndicatorProps": {
                    "description": "Defines valid properties in ProgressBarIndicator component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: ProgressBarIndicatorInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: ProgressBarIndicatorInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<ProgressBarIndicatorPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: ProgressBarIndicatorInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<ProgressBarIndicatorInstance>"
                },
                "ProgressBarIndicatorState": {
                    "description": "Defines valid state in ProgressBarIndicator component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "ProgressBarIndicatorExposes": {
                    "description": "Defines the methods and properties exposed by ProgressBarIndicator component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "progressbar",
                            "optional": false,
                            "readonly": false,
                            "type": "ProgressBarInstance",
                            "default": "",
                            "description": "The ProgressBar component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ProgressBarIndicatorPassThroughType": {
                    "values": "PassThroughType<ProgressBarIndicatorInstance, E>",
                    "description": "Defines passthrough(pt) options type in ProgressBarIndicator component."
                },
                "ProgressBarIndicatorInstance": {
                    "values": "ComponentInstance<ProgressBarIndicatorProps, ProgressBarIndicatorState, ProgressBarIndicatorExposes, ProgressBarIndicatorPassThrough>",
                    "description": "Instance of ProgressBarIndicator component."
                }
            }
        }
    },
    "progressbarlabel": {
        "description": "ProgressBarLabel component is used to display the label of ProgressBar.\n\n[Live Demo](https://www.primereact.org/progressbar/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ProgressBarLabelPassThrough": {
                    "description": "Defines passthrough(pt) options of ProgressBarLabel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ProgressBarLabelPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "ProgressBarLabelProps": {
                    "description": "Defines valid properties in ProgressBarLabel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: ProgressBarLabelInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: ProgressBarLabelInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<ProgressBarLabelPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: ProgressBarLabelInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<ProgressBarLabelInstance>"
                },
                "ProgressBarLabelState": {
                    "description": "Defines valid state in ProgressBarLabel component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "ProgressBarLabelExposes": {
                    "description": "Defines the methods and properties exposed by ProgressBarLabel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "progressbar",
                            "optional": false,
                            "readonly": false,
                            "type": "ProgressBarInstance",
                            "default": "",
                            "description": "The ProgressBar component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ProgressBarLabelPassThroughType": {
                    "values": "PassThroughType<ProgressBarLabelInstance, E>",
                    "description": "Defines passthrough(pt) options type in ProgressBarLabel component."
                },
                "ProgressBarLabelInstance": {
                    "values": "ComponentInstance<ProgressBarLabelProps, ProgressBarLabelState, ProgressBarLabelExposes, ProgressBarLabelPassThrough>",
                    "description": "Instance of ProgressBarLabel component."
                }
            }
        }
    },
    "progressbartrack": {
        "description": "ProgressBarTrack component is used to display the track of ProgressBar.\n\n[Live Demo](https://www.primereact.org/progressbar/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ProgressBarTrackPassThrough": {
                    "description": "Defines passthrough(pt) options of ProgressBarTrack component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ProgressBarTrackPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "ProgressBarTrackProps": {
                    "description": "Defines valid properties in ProgressBarTrack component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: ProgressBarTrackInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: ProgressBarTrackInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<ProgressBarTrackPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: ProgressBarTrackInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<ProgressBarTrackInstance>"
                },
                "ProgressBarTrackState": {
                    "description": "Defines valid state in ProgressBarTrack component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "ProgressBarTrackExposes": {
                    "description": "Defines the methods and properties exposed by ProgressBarTrack component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "progressbar",
                            "optional": false,
                            "readonly": false,
                            "type": "ProgressBarInstance",
                            "default": "",
                            "description": "The ProgressBar component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ProgressBarTrackPassThroughType": {
                    "values": "PassThroughType<ProgressBarTrackInstance, E>",
                    "description": "Defines passthrough(pt) options type in ProgressBarTrack component."
                },
                "ProgressBarTrackInstance": {
                    "values": "ComponentInstance<ProgressBarTrackProps, ProgressBarTrackState, ProgressBarTrackExposes, ProgressBarTrackPassThrough>",
                    "description": "Instance of ProgressBarTrack component."
                }
            }
        }
    },
    "progressbarvalue": {
        "description": "ProgressBarValue component is used to display the value of ProgressBar.\n\n[Live Demo](https://www.primereact.org/progressbar/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ProgressBarValuePassThrough": {
                    "description": "Defines passthrough(pt) options of ProgressBarValue component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ProgressBarValuePassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "ProgressBarValueProps": {
                    "description": "Defines valid properties in ProgressBarValue component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: ProgressBarValueInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: ProgressBarValueInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<ProgressBarValuePassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: ProgressBarValueInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<ProgressBarValueInstance>"
                },
                "ProgressBarValueState": {
                    "description": "Defines valid state in ProgressBarValue component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "ProgressBarValueExposes": {
                    "description": "Defines the methods and properties exposed by ProgressBarValue component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "progressbar",
                            "optional": false,
                            "readonly": false,
                            "type": "ProgressBarInstance",
                            "default": "",
                            "description": "The ProgressBar component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ProgressBarValuePassThroughType": {
                    "values": "PassThroughType<ProgressBarValueInstance, E>",
                    "description": "Defines passthrough(pt) options type in ProgressBarValue component."
                },
                "ProgressBarValueInstance": {
                    "values": "ComponentInstance<ProgressBarValueProps, ProgressBarValueState, ProgressBarValueExposes, ProgressBarValuePassThrough>",
                    "description": "Instance of ProgressBarValue component."
                }
            }
        }
    },
    "useprogressbar": {
        "description": "The useProgressBar manages the state and functionality of a progress bar component.\n\n[Live Demo](https://www.primereact.org/progressbar/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useProgressBarProps": {
                    "description": "Defines valid properties in useProgressBar.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current value of the progress."
                        },
                        {
                            "name": "max",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Defines the mode of the progress"
                        },
                        {
                            "name": "min",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Defines the mode of the progress"
                        },
                        {
                            "name": "formatter",
                            "optional": true,
                            "readonly": false,
                            "type": "(value: number) => string",
                            "default": "",
                            "description": "Custom formatter function to format the display value"
                        }
                    ],
                    "methods": []
                },
                "useProgressBarState": {
                    "description": "Defines valid state in useProgressBar.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "computedValue",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current value of the progress."
                        },
                        {
                            "name": "formattedValue",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current value of the progress in percentage format and fixed to 2 decimal places."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "ProgressBarState"
                },
                "useProgressBarExposes": {
                    "description": "Defines the methods and properties exposed by useProgressBar.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedBy": "ProgressBarExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useProgressBarInstance": {
                    "values": "HeadlessInstance<useProgressBarProps, useProgressBarState, useProgressBarExposes>",
                    "description": "Instance of useProgressBar headless."
                }
            }
        }
    },
    "progressspinner": {
        "description": "ProgressSpinner is a process status indicator.\n\n[Live Demo](https://www.primereact.org/progressspinner/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ProgressSpinnerPassThrough": {
                    "description": "Defines passthrough(pt) options of ProgressSpinner component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ProgressSpinnerPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "spin",
                            "optional": true,
                            "readonly": false,
                            "type": "ProgressSpinnerPassThroughType<HTMLAttributes<SVGElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the spin's DOM element."
                        },
                        {
                            "name": "circle",
                            "optional": true,
                            "readonly": false,
                            "type": "ProgressSpinnerPassThroughType<HTMLAttributes<SVGCircleElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the circle's DOM element."
                        }
                    ],
                    "methods": []
                },
                "ProgressSpinnerProps": {
                    "description": "Defines valid properties in ProgressSpinner component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: ProgressSpinnerInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: ProgressSpinnerInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<ProgressSpinnerPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: ProgressSpinnerInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "strokeWidth",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "2",
                            "description": "Width of the circle stroke."
                        },
                        {
                            "name": "fill",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Color for the background of the circle."
                        },
                        {
                            "name": "animationDuration",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "2s",
                            "description": "Duration of the rotate animation."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<ProgressSpinnerInstance, useProgressSpinnerProps>"
                },
                "ProgressSpinnerState": {
                    "description": "Defines valid state in ProgressSpinner component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "useProgressSpinnerState"
                },
                "ProgressSpinnerExposes": {
                    "description": "Defines the methods and properties exposed by ProgressSpinner component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "useProgressSpinnerExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ProgressSpinnerPassThroughType": {
                    "values": "PassThroughType<ProgressSpinnerInstance, E>",
                    "description": "Defines passthrough(pt) options type in ProgressSpinner component."
                },
                "ProgressSpinnerClassNamesType": {
                    "values": "typeof ProgressSpinnerClassNames[keyof typeof ProgressSpinnerClassNames]",
                    "description": "Type representing the CSS class names used in the ProgressSpinner component."
                },
                "ProgressSpinnerInstance": {
                    "values": "ComponentInstance<ProgressSpinnerProps, ProgressSpinnerState, ProgressSpinnerExposes, ProgressSpinnerPassThrough>",
                    "description": "Instance of ProgressSpinner component."
                }
            }
        },
        "variables": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ProgressSpinnerClassNames": {
                    "description": "Defines the CSS class names used in the ProgressSpinner component.",
                    "variables": [
                        {
                            "name": "root",
                            "value": "p-progressspinner",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "spin",
                            "value": "p-progressspinner-spin",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the spin element"
                        },
                        {
                            "name": "circle",
                            "value": "p-progressspinner-circle",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the circle element"
                        }
                    ]
                }
            }
        }
    },
    "useprogressspinner": {
        "description": "The useProgressSpinner manages the state and functionality of a progress spinner component.\n\n[Live Demo](https://www.primereact.org/progressspinner/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useProgressSpinnerProps": {
                    "description": "Defines valid properties in useProgressSpinner.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "useProgressSpinnerState": {
                    "description": "Defines valid state in useProgressSpinner.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedBy": "ProgressSpinnerState"
                },
                "useProgressSpinnerExposes": {
                    "description": "Defines the methods and properties exposed by useProgressSpinner.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedBy": "ProgressSpinnerExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useProgressSpinnerInstance": {
                    "values": "HeadlessInstance<useProgressSpinnerProps, useProgressSpinnerState, useProgressSpinnerExposes>",
                    "description": "Instance of useProgressSpinner headless."
                }
            }
        }
    },
    "radiobutton": {
        "description": "RadioButton is an extension to standard radio button element with theming.\n\n[Live Demo](https://www.primereact.org/radiobutton/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "RadioButtonPassThrough": {
                    "description": "Defines passthrough(pt) options of RadioButton component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "RadioButtonPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "input",
                            "optional": true,
                            "readonly": false,
                            "type": "RadioButtonPassThroughType<InputHTMLAttributes<HTMLInputElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the input's DOM element."
                        },
                        {
                            "name": "box",
                            "optional": true,
                            "readonly": false,
                            "type": "RadioButtonPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the box's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "RadioButtonPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the icon's DOM element."
                        }
                    ],
                    "methods": []
                },
                "RadioButtonChangeEvent": {
                    "description": "Event fired when the radio button's checked state changes.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "Value of the radio button."
                        },
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "ChangeEvent",
                            "default": "",
                            "description": "The original event that triggered the change."
                        },
                        {
                            "name": "checked",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "The checked state of the radio button."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "RadioButtonGroupUpdateChangeEvent",
                    "extendedTypes": "useRadioButtonChangeEvent<React.ChangeEvent<HTMLInputElement>>"
                },
                "RadioButtonProps": {
                    "description": "Defines valid properties in RadioButton component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: RadioButtonInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: RadioButtonInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<RadioButtonPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: RadioButtonInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "Value of the radio button."
                        },
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "The name of the radio button."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "\"small\" | \"large\" | \"normal\"",
                            "default": "",
                            "description": "Defines the size of the radio button."
                        },
                        {
                            "name": "variant",
                            "optional": true,
                            "readonly": false,
                            "type": "\"outlined\" | \"filled\"",
                            "default": "",
                            "description": "Specifies the input variant of the component."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the element should be disabled."
                        },
                        {
                            "name": "readOnly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that an input field is read-only."
                        },
                        {
                            "name": "required",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the element is required."
                        },
                        {
                            "name": "invalid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style."
                        },
                        {
                            "name": "inputId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "inputStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the input field."
                        },
                        {
                            "name": "inputClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the input field."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes a string value that labels the component."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "onFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "(event: FocusEvent<HTMLInputElement>) => void",
                            "default": "",
                            "description": "Callback function that is called when the checkbox is focused."
                        },
                        {
                            "name": "onBlur",
                            "optional": true,
                            "readonly": false,
                            "type": "(event: FocusEvent<HTMLInputElement>) => void",
                            "default": "",
                            "description": "Callback function that is called when the checkbox loses focus."
                        },
                        {
                            "name": "onCheckedChange",
                            "optional": true,
                            "readonly": false,
                            "type": "(event: RadioButtonChangeEvent) => void",
                            "default": "",
                            "description": "Callback fired when the radio button's checked state changes."
                        },
                        {
                            "name": "checked",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "When present, it specifies the input's checked state."
                        },
                        {
                            "name": "defaultChecked",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "The default value for the input when not controlled by  `checked`  and  `onCheckedChange` ."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<RadioButtonInstance, Omit<useRadioButtonProps, \"onCheckedChange\">>"
                },
                "RadioButtonState": {
                    "description": "Defines valid state in RadioButton component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "checked",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "The checked state of the useRadioButton."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "useRadioButtonState"
                },
                "RadioButtonExposes": {
                    "description": "Defines the methods and properties exposed by RadioButton component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "group",
                            "optional": true,
                            "readonly": false,
                            "type": "RadioButtonGroupInstance",
                            "default": "",
                            "description": "The group instance of the radio button."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "useRadioButtonState",
                            "default": "",
                            "description": "The state of the useRadioButton."
                        },
                        {
                            "name": "onChange",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: useRadioButtonChangeEvent) => void",
                            "default": "",
                            "description": "Callback fired when the useRadioButton's checked state changes."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "useRadioButtonExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "RadioButtonPassThroughType": {
                    "values": "PassThroughType<RadioButtonInstance, E>",
                    "description": "Defines passthrough(pt) options type in RadioButton component."
                },
                "RadioButtonClassNamesType": {
                    "values": "typeof RadioButtonClassNames[keyof typeof RadioButtonClassNames]",
                    "description": "Type representing the CSS class names used in the RadioButton component."
                },
                "RadioButtonInstance": {
                    "values": "ComponentInstance<RadioButtonProps, RadioButtonState, RadioButtonExposes, RadioButtonPassThrough>",
                    "description": "Instance of RadioButton component."
                }
            }
        },
        "variables": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "RadioButtonClassNames": {
                    "description": "Defines the CSS class names used in the RadioButton component.",
                    "variables": [
                        {
                            "name": "root",
                            "value": "p-radiobutton",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "box",
                            "value": "p-radiobutton-box",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the box element"
                        },
                        {
                            "name": "input",
                            "value": "p-radiobutton-input",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the input element"
                        },
                        {
                            "name": "icon",
                            "value": "p-radiobutton-icon",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the icon element"
                        }
                    ]
                }
            }
        }
    },
    "radiobuttongroup": {
        "description": "RadioButtonGroup is a wrapper for the RadioButton component.\n\n[Live Demo](https://www.primereact.org/radiobutton/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "RadioButtonGroupPassThrough": {
                    "description": "Defines passthrough(pt) options of RadioButtonGroup component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "RadioButtonGroupPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "RadioButtonGroupValueChangeEvent": {
                    "description": "Event fired when the radio button group's value changes.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The value of the radio button group."
                        }
                    ],
                    "methods": []
                },
                "RadioButtonGroupUpdateChangeEvent": {
                    "description": "Used to update the radio button group value.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "Value of the radio button."
                        },
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "ChangeEvent",
                            "default": "",
                            "description": "The original event that triggered the change."
                        },
                        {
                            "name": "checked",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "The checked state of the radio button."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "RadioButtonChangeEvent"
                },
                "RadioButtonGroupProps": {
                    "description": "Defines valid properties in RadioButtonGroup component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: RadioButtonGroupInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: RadioButtonGroupInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<RadioButtonGroupPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: RadioButtonGroupInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "Value of the radio button group."
                        },
                        {
                            "name": "defaultValue",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The default value of the radio button group."
                        },
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "The name of the radio buttons."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the radio button group should be disabled."
                        },
                        {
                            "name": "invalid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the radio button group is invalid."
                        },
                        {
                            "name": "onValueChange",
                            "optional": true,
                            "readonly": false,
                            "type": "(event: RadioButtonGroupValueChangeEvent) => void",
                            "default": "",
                            "description": "Callback function that is called when the radio button group value changes."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<RadioButtonGroupInstance>"
                },
                "RadioButtonGroupState": {
                    "description": "Defines valid state in RadioButtonGroup component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "RadioButtonGroupExposes": {
                    "description": "Defines the methods and properties exposed by RadioButtonGroup component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "updateChange",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: RadioButtonGroupUpdateChangeEvent) => void",
                            "default": "",
                            "description": "Updates the value of the radio button group."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "RadioButtonGroupPassThroughType": {
                    "values": "PassThroughType<RadioButtonGroupInstance, E>",
                    "description": "Defines passthrough(pt) options type in RadioButtonGroup component."
                },
                "RadioButtonGroupClassNamesType": {
                    "values": "typeof RadioButtonGroupClassNames[keyof typeof RadioButtonGroupClassNames]",
                    "description": "Type representing the CSS class names used in the RadioButton component."
                },
                "RadioButtonGroupInstance": {
                    "values": "ComponentInstance<RadioButtonGroupProps, RadioButtonGroupState, RadioButtonGroupExposes, RadioButtonGroupPassThrough>",
                    "description": "Instance of RadioButtonGroup component."
                }
            }
        },
        "variables": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "RadioButtonGroupClassNames": {
                    "description": "Defines the CSS class names used in the RadioButtonGroup component",
                    "variables": [
                        {
                            "name": "root",
                            "value": "p-radiobutton-group",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the root element"
                        }
                    ]
                }
            }
        }
    },
    "useradiobutton": {
        "description": "The useRadioButton manages the state and functionality of a radio button component.\n\n[Live Demo](https://www.primereact.org/radiobutton/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useRadioButtonChangeEvent": {
                    "description": "Event fired when the radio button's checked state changes.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "E",
                            "default": "",
                            "description": "The original event that triggered the change."
                        },
                        {
                            "name": "checked",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "The checked state of the radio button."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "RadioButtonChangeEvent"
                },
                "useRadioButtonProps": {
                    "description": "Defines valid properties in useRadioButton.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "checked",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "When present, it specifies the input's checked state."
                        },
                        {
                            "name": "defaultChecked",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "The default value for the input when not controlled by  `checked`  and  `onCheckedChange` ."
                        },
                        {
                            "name": "onCheckedChange",
                            "optional": true,
                            "readonly": false,
                            "type": "(event: useRadioButtonChangeEvent) => void",
                            "default": "",
                            "description": "Callback fired when the radio button's checked state changes."
                        }
                    ],
                    "methods": []
                },
                "useRadioButtonState": {
                    "description": "Defines valid state in useRadioButton.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "checked",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "The checked state of the useRadioButton."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "RadioButtonState"
                },
                "useRadioButtonExposes": {
                    "description": "Defines the methods and properties exposed by useRadioButton.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "useRadioButtonState",
                            "default": "",
                            "description": "The state of the useRadioButton."
                        },
                        {
                            "name": "onChange",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: useRadioButtonChangeEvent) => void",
                            "default": "",
                            "description": "Callback fired when the useRadioButton's checked state changes."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "RadioButtonExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useRadioButtonInstance": {
                    "values": "HeadlessInstance<useRadioButtonProps, useRadioButtonState, useRadioButtonExposes>",
                    "description": "Instance of useRadioButton headless."
                }
            }
        }
    },
    "scrollarea": {
        "description": "ScrollArea is a cross browser, lightweight and themable alternative to native browser scrollbar.\n\n[Live Demo](https://www.primereact.org/scrollarea/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ScrollAreaPassThrough": {
                    "description": "Defines passthrough(pt) options of ScrollArea component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ScrollAreaPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "viewport",
                            "optional": true,
                            "readonly": false,
                            "type": "ScrollAreaPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the viewport's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "ScrollAreaPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "thumbY",
                            "optional": true,
                            "readonly": false,
                            "type": "ScrollAreaPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the thumbY's DOM element."
                        },
                        {
                            "name": "thumbX",
                            "optional": true,
                            "readonly": false,
                            "type": "ScrollAreaPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the thumbX's DOM element."
                        }
                    ],
                    "methods": []
                },
                "ScrollAreaProps": {
                    "description": "Defines valid properties in ScrollArea component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: ScrollAreaInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: ScrollAreaInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<ScrollAreaPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: ScrollAreaInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "step",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "5",
                            "description": "Step factor to scroll the content while pressing the arrow keys."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<ScrollAreaInstance, useScrollAreaProps>"
                },
                "ScrollAreaState": {
                    "description": "Defines valid state in ScrollArea component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "orientationState",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current orientation of scrolling, either \"vertical\" or \"horizontal\"."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "useScrollAreaState"
                },
                "ScrollAreaExposes": {
                    "description": "Defines the methods and properties exposed by ScrollArea component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "useScrollAreaState",
                            "default": "",
                            "description": "The state of the useScrollArea."
                        },
                        {
                            "name": "contentRef",
                            "optional": false,
                            "readonly": false,
                            "type": "RefObject<HTMLDivElement>",
                            "default": "",
                            "description": "Reference to the scroll content element."
                        },
                        {
                            "name": "thumbXRef",
                            "optional": false,
                            "readonly": false,
                            "type": "RefObject<HTMLDivElement>",
                            "default": "",
                            "description": "Reference to the horizontal scrollbar thumb element."
                        },
                        {
                            "name": "thumbYRef",
                            "optional": false,
                            "readonly": false,
                            "type": "RefObject<HTMLDivElement>",
                            "default": "",
                            "description": "Reference to the vertical scrollbar thumb element."
                        },
                        {
                            "name": "lastScrollLeft",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current horizontal scroll position."
                        },
                        {
                            "name": "lastScrollTop",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current vertical scroll position."
                        },
                        {
                            "name": "onScroll",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: UIEvent<HTMLDivElement>) => void",
                            "default": "",
                            "description": "Event handler for content scrolling to update thumb positions."
                        },
                        {
                            "name": "onXBarMouseDown",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: MouseEvent<HTMLDivElement>) => void",
                            "default": "",
                            "description": "Event handler for horizontal scrollbar thumb drag interactions."
                        },
                        {
                            "name": "onYBarMouseDown",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: MouseEvent<HTMLDivElement>) => void",
                            "default": "",
                            "description": "Event handler for vertical scrollbar thumb drag interactions."
                        },
                        {
                            "name": "onFocus",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: FocusEvent<HTMLDivElement>) => void",
                            "default": "",
                            "description": "Event handler when the scrollbar thumb receives focus."
                        },
                        {
                            "name": "onBlur",
                            "optional": false,
                            "readonly": false,
                            "type": "() => void",
                            "default": "",
                            "description": "Event handler when the scrollbar thumb loses focus."
                        },
                        {
                            "name": "onKeyDown",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: KeyboardEvent<HTMLDivElement>) => void",
                            "default": "",
                            "description": "Event handler for keyboard navigation to scroll content."
                        },
                        {
                            "name": "onKeyUp",
                            "optional": false,
                            "readonly": false,
                            "type": "() => void",
                            "default": "",
                            "description": "Event handler to stop continuous scrolling when key is released."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "useScrollAreaExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ScrollAreaPassThroughType": {
                    "values": "PassThroughType<ScrollAreaInstance, E>",
                    "description": "Defines passthrough(pt) options type in ScrollArea component."
                },
                "ScrollAreaClassNamesType": {
                    "values": "typeof ScrollAreaClassNames[keyof typeof ScrollAreaClassNames]",
                    "description": "Type representing the CSS class names used in the ScrollArea component."
                },
                "ScrollAreaInstance": {
                    "values": "ComponentInstance<ScrollAreaProps, ScrollAreaState, ScrollAreaExposes, ScrollAreaPassThrough>",
                    "description": "Instance of ScrollArea component."
                }
            }
        },
        "variables": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ScrollAreaClassNames": {
                    "description": "Defines the CSS class names used in the ScrollArea component.",
                    "variables": [
                        {
                            "name": "root",
                            "value": "p-scrollarea",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "viewport",
                            "value": "p-scrollpanel-content-container",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the viewport element"
                        },
                        {
                            "name": "content",
                            "value": "p-scrollpanel-content",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the content element"
                        },
                        {
                            "name": "thumbX",
                            "value": "p-scrollpanel-bar-x",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the thumb x element"
                        },
                        {
                            "name": "thumbY",
                            "value": "p-scrollpanel-bar-y",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the thumb y element"
                        }
                    ]
                }
            }
        }
    },
    "scrollareacontent": {
        "description": "ScrollAreaContent is a component that displays the content.\n\n[Live Demo](https://www.primereact.org/scrollarea/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ScrollAreaContentPassThrough": {
                    "description": "Defines passthrough(pt) options of ScrollAreaContent component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ScrollAreaContentPassThroughType<HTMLAttributes<HTMLButtonElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "ScrollAreaContentProps": {
                    "description": "Defines valid properties in ScrollAreaContent component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: ScrollAreaContentInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: ScrollAreaContentInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<ScrollAreaContentPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: ScrollAreaContentInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<ScrollAreaContentInstance>"
                },
                "ScrollAreaContentState": {
                    "description": "Defines valid state in ScrollAreaContent component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "ScrollAreaContentExposes": {
                    "description": "Defines the methods and properties exposed by ScrollAreaContent component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "scrollarea",
                            "optional": false,
                            "readonly": false,
                            "type": "ScrollAreaInstance",
                            "default": "",
                            "description": "Instance of the ScrollArea component."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ScrollAreaContentPassThroughType": {
                    "values": "PassThroughType<ScrollAreaContentInstance, E>",
                    "description": "Defines passthrough(pt) options type in ScrollAreaContent component."
                },
                "ScrollAreaContentInstance": {
                    "values": "ComponentInstance<ScrollAreaContentProps, ScrollAreaContentState, ScrollAreaContentExposes, ScrollAreaContentPassThrough>",
                    "description": "Instance of ScrollAreaContent component."
                }
            }
        }
    },
    "scrollareathumbx": {
        "description": "ScrollAreaThumbX is a component that displays the content.\n\n[Live Demo](https://www.primereact.org/scrollarea/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ScrollAreaThumbXPassThrough": {
                    "description": "Defines passthrough(pt) options of ScrollAreaThumbX component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ScrollAreaThumbXPassThroughType<HTMLAttributes<HTMLButtonElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "ScrollAreaThumbXProps": {
                    "description": "Defines valid properties in ScrollAreaThumbX component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: ScrollAreaThumbXInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: ScrollAreaThumbXInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<ScrollAreaThumbXPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: ScrollAreaThumbXInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<ScrollAreaThumbXInstance>"
                },
                "ScrollAreaThumbXState": {
                    "description": "Defines valid state in ScrollAreaThumbX component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "ScrollAreaThumbXExposes": {
                    "description": "Defines the methods and properties exposed by ScrollAreaThumbX component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "scrollarea",
                            "optional": false,
                            "readonly": false,
                            "type": "ScrollAreaInstance",
                            "default": "",
                            "description": "Instance of the ScrollArea component."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ScrollAreaThumbXPassThroughType": {
                    "values": "PassThroughType<ScrollAreaThumbXInstance, E>",
                    "description": "Defines passthrough(pt) options type in ScrollAreaThumbX component."
                },
                "ScrollAreaThumbXInstance": {
                    "values": "ComponentInstance<ScrollAreaThumbXProps, ScrollAreaThumbXState, ScrollAreaThumbXExposes, ScrollAreaThumbXPassThrough>",
                    "description": "Instance of ScrollAreaThumbX component."
                }
            }
        }
    },
    "scrollareathumby": {
        "description": "ScrollAreaThumbY is a component that displays the content.\n\n[Live Demo](https://www.primereact.org/scrollarea/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ScrollAreaThumbYPassThrough": {
                    "description": "Defines passthrough(pt) options of ScrollAreaThumbY component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ScrollAreaThumbYPassThroughType<HTMLAttributes<HTMLButtonElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "ScrollAreaThumbYProps": {
                    "description": "Defines valid properties in ScrollAreaThumbY component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: ScrollAreaThumbYInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: ScrollAreaThumbYInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<ScrollAreaThumbYPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: ScrollAreaThumbYInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<ScrollAreaThumbYInstance>"
                },
                "ScrollAreaThumbYState": {
                    "description": "Defines valid state in ScrollAreaThumbY component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "ScrollAreaThumbYExposes": {
                    "description": "Defines the methods and properties exposed by ScrollAreaThumbY component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "scrollarea",
                            "optional": false,
                            "readonly": false,
                            "type": "ScrollAreaInstance",
                            "default": "",
                            "description": "Instance of the ScrollArea component."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ScrollAreaThumbYPassThroughType": {
                    "values": "PassThroughType<ScrollAreaThumbYInstance, E>",
                    "description": "Defines passthrough(pt) options type in ScrollAreaThumbY component."
                },
                "ScrollAreaThumbYInstance": {
                    "values": "ComponentInstance<ScrollAreaThumbYProps, ScrollAreaThumbYState, ScrollAreaThumbYExposes, ScrollAreaThumbYPassThrough>",
                    "description": "Instance of ScrollAreaThumbY component."
                }
            }
        }
    },
    "scrollareaviewport": {
        "description": "ScrollAreaViewport is a component that displays a viewport for the content.\n\n[Live Demo](https://www.primereact.org/scrollarea/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ScrollAreaViewportPassThrough": {
                    "description": "Defines passthrough(pt) options of ScrollAreaViewport component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ScrollAreaViewportPassThroughType<HTMLAttributes<HTMLButtonElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "ScrollAreaViewportProps": {
                    "description": "Defines valid properties in ScrollAreaViewport component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: ScrollAreaViewportInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: ScrollAreaViewportInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<ScrollAreaViewportPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: ScrollAreaViewportInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<ScrollAreaViewportInstance>"
                },
                "ScrollAreaViewportState": {
                    "description": "Defines valid state in ScrollAreaViewport component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "ScrollAreaViewportExposes": {
                    "description": "Defines the methods and properties exposed by ScrollAreaViewport component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "scrollarea",
                            "optional": false,
                            "readonly": false,
                            "type": "ScrollAreaInstance",
                            "default": "",
                            "description": "Instance of the ScrollArea component."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ScrollAreaViewportPassThroughType": {
                    "values": "PassThroughType<ScrollAreaViewportInstance, E>",
                    "description": "Defines passthrough(pt) options type in ScrollAreaViewport component."
                },
                "ScrollAreaViewportInstance": {
                    "values": "ComponentInstance<ScrollAreaViewportProps, ScrollAreaViewportState, ScrollAreaViewportExposes, ScrollAreaViewportPassThrough>",
                    "description": "Instance of ScrollAreaViewport component."
                }
            }
        }
    },
    "usescrollarea": {
        "description": "The useScrollArea manages the state and functionality of a scrollarea component.\n\n[Live Demo](https://www.primereact.org/scrollarea/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useScrollAreaProps": {
                    "description": "Defines valid properties in useScrollArea.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "step",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "5",
                            "description": "Step factor to scroll the content while pressing the arrow keys."
                        }
                    ],
                    "methods": []
                },
                "useScrollAreaState": {
                    "description": "Defines valid state in useScrollArea.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "orientationState",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current orientation of scrolling, either \"vertical\" or \"horizontal\"."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "ScrollAreaState"
                },
                "useScrollAreaExposes": {
                    "description": "Defines the methods and properties exposed by useScrollArea.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "useScrollAreaState",
                            "default": "",
                            "description": "The state of the useScrollArea."
                        },
                        {
                            "name": "contentRef",
                            "optional": false,
                            "readonly": false,
                            "type": "RefObject<HTMLDivElement>",
                            "default": "",
                            "description": "Reference to the scroll content element."
                        },
                        {
                            "name": "thumbXRef",
                            "optional": false,
                            "readonly": false,
                            "type": "RefObject<HTMLDivElement>",
                            "default": "",
                            "description": "Reference to the horizontal scrollbar thumb element."
                        },
                        {
                            "name": "thumbYRef",
                            "optional": false,
                            "readonly": false,
                            "type": "RefObject<HTMLDivElement>",
                            "default": "",
                            "description": "Reference to the vertical scrollbar thumb element."
                        },
                        {
                            "name": "lastScrollLeft",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current horizontal scroll position."
                        },
                        {
                            "name": "lastScrollTop",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current vertical scroll position."
                        },
                        {
                            "name": "onScroll",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: UIEvent<HTMLDivElement>) => void",
                            "default": "",
                            "description": "Event handler for content scrolling to update thumb positions."
                        },
                        {
                            "name": "onXBarMouseDown",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: MouseEvent<HTMLDivElement>) => void",
                            "default": "",
                            "description": "Event handler for horizontal scrollbar thumb drag interactions."
                        },
                        {
                            "name": "onYBarMouseDown",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: MouseEvent<HTMLDivElement>) => void",
                            "default": "",
                            "description": "Event handler for vertical scrollbar thumb drag interactions."
                        },
                        {
                            "name": "onFocus",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: FocusEvent<HTMLDivElement>) => void",
                            "default": "",
                            "description": "Event handler when the scrollbar thumb receives focus."
                        },
                        {
                            "name": "onBlur",
                            "optional": false,
                            "readonly": false,
                            "type": "() => void",
                            "default": "",
                            "description": "Event handler when the scrollbar thumb loses focus."
                        },
                        {
                            "name": "onKeyDown",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: KeyboardEvent<HTMLDivElement>) => void",
                            "default": "",
                            "description": "Event handler for keyboard navigation to scroll content."
                        },
                        {
                            "name": "onKeyUp",
                            "optional": false,
                            "readonly": false,
                            "type": "() => void",
                            "default": "",
                            "description": "Event handler to stop continuous scrolling when key is released."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "ScrollAreaExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useScrollAreaInstance": {
                    "values": "HeadlessInstance<useScrollAreaProps, useScrollAreaState, useScrollAreaExposes>",
                    "description": "Instance of useScrollArea headless."
                }
            }
        }
    },
    "skeleton": {
        "description": "Skeleton is a placeholder to display instead of the actual content.\n\n[Live Demo](https://www.primereact.org/skeleton/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "SkeletonPassThrough": {
                    "description": "Defines passthrough(pt) options of Skeleton component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "SkeletonPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "SkeletonProps": {
                    "description": "Defines valid properties in Skeleton component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: SkeletonInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: SkeletonInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<SkeletonPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: SkeletonInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "shape",
                            "optional": true,
                            "readonly": false,
                            "type": "\"circle\" | \"rectangle\"",
                            "default": "rectangle",
                            "description": "Shape of the element."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Size of the Circle or Square."
                        },
                        {
                            "name": "width",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "100%",
                            "description": "Width of the element."
                        },
                        {
                            "name": "height",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "1rem",
                            "description": "Height of the element."
                        },
                        {
                            "name": "borderRadius",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Border radius of the element, defaults to value from theme."
                        },
                        {
                            "name": "animation",
                            "optional": true,
                            "readonly": false,
                            "type": "\"wave\" | \"none\"",
                            "default": "wave",
                            "description": "Type of the animation."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<SkeletonInstance, useSkeletonProps>"
                },
                "SkeletonState": {
                    "description": "Defines valid state in Skeleton component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "useSkeletonState"
                },
                "SkeletonExposes": {
                    "description": "Defines the methods and properties exposed by Skeleton component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "useSkeletonExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "SkeletonPassThroughType": {
                    "values": "PassThroughType<SkeletonInstance, E>",
                    "description": "Defines passthrough(pt) options type in Skeleton component."
                },
                "SkeletonClassNamesType": {
                    "values": "typeof SkeletonClassNames[keyof typeof SkeletonClassNames]",
                    "description": "Type representing the CSS class names used in the Skeleton component."
                },
                "SkeletonInstance": {
                    "values": "ComponentInstance<SkeletonProps, SkeletonState, SkeletonExposes, SkeletonPassThrough>",
                    "description": "Instance of Skeleton component."
                }
            }
        },
        "variables": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "SkeletonClassNames": {
                    "description": "Defines the CSS class names used in the Skeleton component.",
                    "variables": [
                        {
                            "name": "root",
                            "value": "p-skeleton",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the root element"
                        }
                    ]
                }
            }
        }
    },
    "useskeleton": {
        "description": "The useSkeleton manages the state and functionality of a skeleton component.\n\n[Live Demo](https://www.primereact.org/skeleton/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useSkeletonProps": {
                    "description": "Defines valid properties in useSkeleton.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "useSkeletonState": {
                    "description": "Defines valid state in useSkeleton.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedBy": "SkeletonState"
                },
                "useSkeletonExposes": {
                    "description": "Defines the methods and properties exposed by useSkeleton.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedBy": "SkeletonExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useSkeletonInstance": {
                    "values": "HeadlessInstance<useSkeletonProps, useSkeletonState, useSkeletonExposes>",
                    "description": "Instance of useSkeleton headless."
                }
            }
        }
    },
    "splitter": {
        "description": "Splitter is utilized to separate and resize panels.\n\n[Live Demo](https://www.primereact.org/splitter/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "SplitterPassThrough": {
                    "description": "Defines passthrough(pt) options of Splitter component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "SplitterPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "panel",
                            "optional": true,
                            "readonly": false,
                            "type": "SplitterPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the panel's DOM element."
                        },
                        {
                            "name": "gutter",
                            "optional": true,
                            "readonly": false,
                            "type": "SplitterPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the gutter's DOM element."
                        },
                        {
                            "name": "thumb",
                            "optional": true,
                            "readonly": false,
                            "type": "SplitterPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the thumb's DOM element."
                        }
                    ],
                    "methods": []
                },
                "SplitterProps": {
                    "description": "Defines valid properties in Splitter component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: SplitterInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: SplitterInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<SplitterPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: SplitterInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "orientation",
                            "optional": true,
                            "readonly": false,
                            "type": "\"horizontal\" | \"vertical\"",
                            "default": "horizontal",
                            "description": "Orientation of the panels."
                        },
                        {
                            "name": "gutterSize",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "4",
                            "description": "Size of the divider in pixels."
                        },
                        {
                            "name": "stateKey",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Storage identifier of a stateful Splitter."
                        },
                        {
                            "name": "stateStorage",
                            "optional": true,
                            "readonly": false,
                            "type": "\"local\" | \"session\"",
                            "default": "session",
                            "description": "Defines where a stateful splitter keeps its state, valid values are 'session' for sessionStorage and 'local' for localStorage."
                        },
                        {
                            "name": "step",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "5",
                            "description": "Step factor to increment/decrement the size of the panels while pressing the arrow keys."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<SplitterInstance, useSplitterProps>"
                },
                "SplitterState": {
                    "description": "Defines valid state in Splitter component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "panels",
                            "optional": false,
                            "readonly": false,
                            "type": "ReactNode[]",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "useSplitterState"
                },
                "SplitterExposes": {
                    "description": "Defines the methods and properties exposed by Splitter component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "useSplitterState",
                            "default": "",
                            "description": "The state of the useSplitter."
                        },
                        {
                            "name": "registerPanel",
                            "optional": false,
                            "readonly": false,
                            "type": "() => number",
                            "default": "",
                            "description": "Registers a new panel and returns its index."
                        },
                        {
                            "name": "registerGutter",
                            "optional": false,
                            "readonly": false,
                            "type": "() => number",
                            "default": "",
                            "description": "Registers a new gutter and returns its index."
                        },
                        {
                            "name": "registerThumb",
                            "optional": false,
                            "readonly": false,
                            "type": "() => number",
                            "default": "",
                            "description": "Registers a new thumb and returns its index."
                        },
                        {
                            "name": "panelCounter",
                            "optional": false,
                            "readonly": false,
                            "type": "RefObject<number>",
                            "default": "",
                            "description": "Counter tracking the number of panels."
                        },
                        {
                            "name": "panelSizes",
                            "optional": false,
                            "readonly": false,
                            "type": "number[]",
                            "default": "",
                            "description": "Array storing the size of each panel."
                        },
                        {
                            "name": "prevSize",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Previous size of the panel during resize."
                        },
                        {
                            "name": "gutterRef",
                            "optional": false,
                            "readonly": false,
                            "type": "RefObject<HTMLDivElement>",
                            "default": "",
                            "description": "Reference to the currently active gutter element."
                        },
                        {
                            "name": "gutterRefs",
                            "optional": false,
                            "readonly": false,
                            "type": "RefObject<HTMLDivElement[]>",
                            "default": "",
                            "description": "References to all gutter elements."
                        },
                        {
                            "name": "onResizeStart",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: MouseEvent<Element, MouseEvent> | TouchEvent<Element> | KeyboardEvent, index: number, isKeyDown: boolean) => void",
                            "default": "",
                            "description": "Handler for resize start events."
                        },
                        {
                            "name": "onResize",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: MouseEvent<Element, MouseEvent> | TouchEvent<Element> | KeyboardEvent, step: number, isKeyDown: boolean) => void",
                            "default": "",
                            "description": "Handler for resize events."
                        },
                        {
                            "name": "onResizeEnd",
                            "optional": false,
                            "readonly": false,
                            "type": "() => void",
                            "default": "",
                            "description": "Handler for resize end events."
                        },
                        {
                            "name": "onGutterMouseDown",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: MouseEvent, index: number) => void",
                            "default": "",
                            "description": "Handler for mouse down events on gutters."
                        },
                        {
                            "name": "onGutterTouchStart",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: TouchEvent, index: number) => void",
                            "default": "",
                            "description": "Handler for touch start events on gutters."
                        },
                        {
                            "name": "onGutterTouchMove",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: TouchEvent) => void",
                            "default": "",
                            "description": "Handler for touch move events on gutters."
                        },
                        {
                            "name": "onGutterTouchEnd",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: TouchEvent) => void",
                            "default": "",
                            "description": "Handler for touch end events on gutters."
                        },
                        {
                            "name": "onGutterKeyUp",
                            "optional": false,
                            "readonly": false,
                            "type": "() => void",
                            "default": "",
                            "description": "Handler for key up events on gutters."
                        },
                        {
                            "name": "onGutterKeyDown",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: KeyboardEvent, index: number) => void",
                            "default": "",
                            "description": "Handler for key down events on gutters."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "useSplitterExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "SplitterPassThroughType": {
                    "values": "PassThroughType<SplitterInstance, E>",
                    "description": "Defines passthrough(pt) options type in Splitter component."
                },
                "SplitterClassNamesType": {
                    "values": "typeof SplitterClassNames[keyof typeof SplitterClassNames]",
                    "description": "Type representing the CSS class names used in the Splitter component."
                },
                "SplitterInstance": {
                    "values": "ComponentInstance<SplitterProps, SplitterState, SplitterExposes, SplitterPassThrough>",
                    "description": "Instance of Splitter component."
                }
            }
        },
        "variables": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "SplitterClassNames": {
                    "description": "Defines the CSS class names used in the Splitter component.",
                    "variables": [
                        {
                            "name": "root",
                            "value": "p-splitter",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "panel",
                            "value": "p-splitterpanel",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the panel element"
                        },
                        {
                            "name": "gutter",
                            "value": "p-splitter-gutter",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the gutter element"
                        },
                        {
                            "name": "thumb",
                            "value": "p-splitter-gutter-handle",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the thumb element"
                        }
                    ]
                }
            }
        }
    },
    "splittergutter": {
        "description": "SplitterGutter is a component that displays a gutter.\n\n[Live Demo](https://www.primereact.org/splitter/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "SplitterGutterPassThrough": {
                    "description": "Defines passthrough(pt) options of SplitterGutter component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "SplitterGutterPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "SplitterGutterProps": {
                    "description": "Defines valid properties in SplitterGutter component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: SplitterGutterInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: SplitterGutterInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<SplitterGutterPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: SplitterGutterInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<SplitterGutterInstance>"
                },
                "SplitterGutterState": {
                    "description": "Defines valid state in SplitterGutter component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "SplitterGutterExposes": {
                    "description": "Defines the methods and properties exposed by SplitterGutter component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "splitter",
                            "optional": false,
                            "readonly": false,
                            "type": "SplitterInstance",
                            "default": "",
                            "description": "The Splitter component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "SplitterGutterPassThroughType": {
                    "values": "PassThroughType<SplitterGutterInstance, E>",
                    "description": "Defines passthrough(pt) options type in SplitterGutter component."
                },
                "SplitterGutterInstance": {
                    "values": "ComponentInstance<SplitterGutterProps, SplitterGutterState, SplitterGutterExposes, SplitterGutterPassThrough>",
                    "description": "Instance of SplitterGutter component."
                }
            }
        }
    },
    "splitterpanel": {
        "description": "SplitterPanel is a component that displays a panel.\n\n[Live Demo](https://www.primereact.org/splitter/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "SplitterPanelPassThrough": {
                    "description": "Defines passthrough(pt) options of SplitterPanel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "SplitterPanelPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "SplitterPanelProps": {
                    "description": "Defines valid properties in SplitterPanel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: SplitterPanelInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: SplitterPanelInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<SplitterPanelPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: SplitterPanelInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Size of the element relative to 100%."
                        },
                        {
                            "name": "minSize",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Minimum size of the element relative to 100%."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<SplitterPanelInstance>"
                },
                "SplitterPanelState": {
                    "description": "Defines valid state in SplitterPanel component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "SplitterPanelExposes": {
                    "description": "Defines the methods and properties exposed by SplitterPanel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "splitter",
                            "optional": false,
                            "readonly": false,
                            "type": "SplitterInstance",
                            "default": "",
                            "description": "The Splitter component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "SplitterPanelPassThroughType": {
                    "values": "PassThroughType<SplitterPanelInstance, E>",
                    "description": "Defines passthrough(pt) options type in SplitterPanel component."
                },
                "SplitterPanelInstance": {
                    "values": "ComponentInstance<SplitterPanelProps, SplitterPanelState, SplitterPanelExposes, SplitterPanelPassThrough>",
                    "description": "Instance of SplitterPanel component."
                }
            }
        }
    },
    "splitterthumb": {
        "description": "SplitterThumb is a component that displays a thumb.\n\n[Live Demo](https://www.primereact.org/splitter/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "SplitterThumbPassThrough": {
                    "description": "Defines passthrough(pt) options of SplitterThumb component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "SplitterThumbPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "SplitterThumbProps": {
                    "description": "Defines valid properties in SplitterThumb component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: SplitterThumbInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: SplitterThumbInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<SplitterThumbPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: SplitterThumbInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<SplitterThumbInstance>"
                },
                "SplitterThumbState": {
                    "description": "Defines valid state in SplitterThumb component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "SplitterThumbExposes": {
                    "description": "Defines the methods and properties exposed by SplitterThumb component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "splitter",
                            "optional": false,
                            "readonly": false,
                            "type": "SplitterInstance",
                            "default": "",
                            "description": "The Splitter component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "SplitterThumbPassThroughType": {
                    "values": "PassThroughType<SplitterThumbInstance, E>",
                    "description": "Defines passthrough(pt) options type in SplitterThumb component."
                },
                "SplitterThumbInstance": {
                    "values": "ComponentInstance<SplitterThumbProps, SplitterThumbState, SplitterThumbExposes, SplitterThumbPassThrough>",
                    "description": "Instance of SplitterThumb component."
                }
            }
        }
    },
    "usesplitter": {
        "description": "The useSplitter manages the functionality of a splitter component.\n\n[Live Demo](https://www.primereact.org/splitter/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useSplitterProps": {
                    "description": "Defines valid properties in useSplitter.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "orientation",
                            "optional": true,
                            "readonly": false,
                            "type": "\"horizontal\" | \"vertical\"",
                            "default": "horizontal",
                            "description": "Orientation of the panels."
                        },
                        {
                            "name": "gutterSize",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "4",
                            "description": "Size of the divider in pixels."
                        },
                        {
                            "name": "stateKey",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Storage identifier of a stateful Splitter."
                        },
                        {
                            "name": "stateStorage",
                            "optional": true,
                            "readonly": false,
                            "type": "\"local\" | \"session\"",
                            "default": "session",
                            "description": "Defines where a stateful splitter keeps its state, valid values are 'session' for sessionStorage and 'local' for localStorage."
                        },
                        {
                            "name": "step",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "5",
                            "description": "Step factor to increment/decrement the size of the panels while pressing the arrow keys."
                        }
                    ],
                    "methods": []
                },
                "useSplitterState": {
                    "description": "Defines valid state in useSplitter.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "panels",
                            "optional": false,
                            "readonly": false,
                            "type": "ReactNode[]",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedBy": "SplitterState"
                },
                "useSplitterExposes": {
                    "description": "Defines the methods and properties exposed by useSplitter.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "useSplitterState",
                            "default": "",
                            "description": "The state of the useSplitter."
                        },
                        {
                            "name": "registerPanel",
                            "optional": false,
                            "readonly": false,
                            "type": "() => number",
                            "default": "",
                            "description": "Registers a new panel and returns its index."
                        },
                        {
                            "name": "registerGutter",
                            "optional": false,
                            "readonly": false,
                            "type": "() => number",
                            "default": "",
                            "description": "Registers a new gutter and returns its index."
                        },
                        {
                            "name": "registerThumb",
                            "optional": false,
                            "readonly": false,
                            "type": "() => number",
                            "default": "",
                            "description": "Registers a new thumb and returns its index."
                        },
                        {
                            "name": "panelCounter",
                            "optional": false,
                            "readonly": false,
                            "type": "RefObject<number>",
                            "default": "",
                            "description": "Counter tracking the number of panels."
                        },
                        {
                            "name": "panelSizes",
                            "optional": false,
                            "readonly": false,
                            "type": "number[]",
                            "default": "",
                            "description": "Array storing the size of each panel."
                        },
                        {
                            "name": "prevSize",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Previous size of the panel during resize."
                        },
                        {
                            "name": "gutterRef",
                            "optional": false,
                            "readonly": false,
                            "type": "RefObject<HTMLDivElement>",
                            "default": "",
                            "description": "Reference to the currently active gutter element."
                        },
                        {
                            "name": "gutterRefs",
                            "optional": false,
                            "readonly": false,
                            "type": "RefObject<HTMLDivElement[]>",
                            "default": "",
                            "description": "References to all gutter elements."
                        },
                        {
                            "name": "onResizeStart",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: MouseEvent<Element, MouseEvent> | TouchEvent<Element> | KeyboardEvent, index: number, isKeyDown: boolean) => void",
                            "default": "",
                            "description": "Handler for resize start events."
                        },
                        {
                            "name": "onResize",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: MouseEvent<Element, MouseEvent> | TouchEvent<Element> | KeyboardEvent, step: number, isKeyDown: boolean) => void",
                            "default": "",
                            "description": "Handler for resize events."
                        },
                        {
                            "name": "onResizeEnd",
                            "optional": false,
                            "readonly": false,
                            "type": "() => void",
                            "default": "",
                            "description": "Handler for resize end events."
                        },
                        {
                            "name": "onGutterMouseDown",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: MouseEvent, index: number) => void",
                            "default": "",
                            "description": "Handler for mouse down events on gutters."
                        },
                        {
                            "name": "onGutterTouchStart",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: TouchEvent, index: number) => void",
                            "default": "",
                            "description": "Handler for touch start events on gutters."
                        },
                        {
                            "name": "onGutterTouchMove",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: TouchEvent) => void",
                            "default": "",
                            "description": "Handler for touch move events on gutters."
                        },
                        {
                            "name": "onGutterTouchEnd",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: TouchEvent) => void",
                            "default": "",
                            "description": "Handler for touch end events on gutters."
                        },
                        {
                            "name": "onGutterKeyUp",
                            "optional": false,
                            "readonly": false,
                            "type": "() => void",
                            "default": "",
                            "description": "Handler for key up events on gutters."
                        },
                        {
                            "name": "onGutterKeyDown",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: KeyboardEvent, index: number) => void",
                            "default": "",
                            "description": "Handler for key down events on gutters."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "SplitterExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useSplitterInstance": {
                    "values": "HeadlessInstance<useSplitterProps, useSplitterState, useSplitterExposes>",
                    "description": "Instance of useSplitter headless."
                }
            }
        }
    },
    "stepper": {
        "description": "Stepper is utilized to separate and resize panels.\n\n[Live Demo](https://www.primereact.org/stepper/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "StepperPassThrough": {
                    "description": "Defines passthrough(pt) options of Stepper component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "StepperPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "list",
                            "optional": true,
                            "readonly": false,
                            "type": "StepperPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the list's DOM element."
                        },
                        {
                            "name": "step",
                            "optional": true,
                            "readonly": false,
                            "type": "StepperPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the step's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "StepperPassThroughType<HTMLAttributes<HTMLButtonElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "number",
                            "optional": true,
                            "readonly": false,
                            "type": "StepperPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the number's DOM element."
                        },
                        {
                            "name": "title",
                            "optional": true,
                            "readonly": false,
                            "type": "StepperPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the title's DOM element."
                        },
                        {
                            "name": "separator",
                            "optional": true,
                            "readonly": false,
                            "type": "StepperPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the separator's DOM element."
                        },
                        {
                            "name": "panels",
                            "optional": true,
                            "readonly": false,
                            "type": "StepperPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the panels's DOM element."
                        },
                        {
                            "name": "panel",
                            "optional": true,
                            "readonly": false,
                            "type": "StepperPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the panel's DOM element."
                        },
                        {
                            "name": "item",
                            "optional": true,
                            "readonly": false,
                            "type": "StepperPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the item's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "StepperPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        }
                    ],
                    "methods": []
                },
                "StepperProps": {
                    "description": "Defines valid properties in Stepper component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: StepperInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: StepperInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<StepperPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: StepperInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "defaultValue",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "null",
                            "description": "Default value of the active step."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "null",
                            "description": "Value of the active step."
                        },
                        {
                            "name": "linear",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the steps are clickable or not."
                        },
                        {
                            "name": "onValueChange",
                            "optional": true,
                            "readonly": false,
                            "type": "(event: useStepperChangeEvent) => void",
                            "default": "",
                            "description": "Callback fired when the stepper's value changes."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<StepperInstance, useStepperProps>"
                },
                "StepperState": {
                    "description": "Defines valid state in Stepper component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "string | number",
                            "default": "",
                            "description": "Value of the active step."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "useStepperState"
                },
                "StepperExposes": {
                    "description": "Defines the methods and properties exposed by Stepper component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "useStepperState",
                            "default": "",
                            "description": "The state of the useStepper."
                        },
                        {
                            "name": "setActiveStep",
                            "optional": false,
                            "readonly": false,
                            "type": "(value: string | number) => void",
                            "default": "",
                            "description": "The method to update the value of the active step."
                        },
                        {
                            "name": "isStepActive",
                            "optional": false,
                            "readonly": false,
                            "type": "(value: string | number) => boolean",
                            "default": "",
                            "description": "The method to check if the step is active."
                        },
                        {
                            "name": "isStepDisabled",
                            "optional": false,
                            "readonly": false,
                            "type": "() => boolean",
                            "default": "",
                            "description": "The method to check if the step is disabled."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "useStepperExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "StepperPassThroughType": {
                    "values": "PassThroughType<StepperInstance, E>",
                    "description": "Defines passthrough(pt) options type in Stepper component."
                },
                "StepperClassNamesType": {
                    "values": "typeof StepperClassNames[keyof typeof StepperClassNames]",
                    "description": "Type representing the CSS class names used in the Stepper component."
                },
                "StepperInstance": {
                    "values": "ComponentInstance<StepperProps, StepperState, StepperExposes, StepperPassThrough>",
                    "description": "Instance of Stepper component."
                }
            }
        },
        "variables": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "StepperClassNames": {
                    "description": "Defines the CSS class names used in the Stepper component.",
                    "variables": [
                        {
                            "name": "root",
                            "value": "p-stepper",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "separator",
                            "value": "p-stepper-separator",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the separator element"
                        },
                        {
                            "name": "panels",
                            "value": "p-steppanels",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the panels element"
                        },
                        {
                            "name": "panel",
                            "value": "p-steppanel",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the panel element"
                        },
                        {
                            "name": "content",
                            "value": "p-steppanel-content",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the content element"
                        },
                        {
                            "name": "list",
                            "value": "p-steplist",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the list element"
                        },
                        {
                            "name": "item",
                            "value": "p-stepitem",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the item element"
                        },
                        {
                            "name": "header",
                            "value": "p-step-header",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the header element"
                        },
                        {
                            "name": "number",
                            "value": "p-step-number",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the number element"
                        },
                        {
                            "name": "title",
                            "value": "p-step-title",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the title element"
                        }
                    ]
                }
            }
        }
    },
    "steppercontent": {
        "description": "StepperContent is a container component for Stepper Items that displays a content of steps in the Stepper component.\n\n[Live Demo](https://www.primereact.org/stepper/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "StepperContentPassThrough": {
                    "description": "Defines passthrough(pt) options of StepperContent component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "StepperContentPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "StepperContentProps": {
                    "description": "Defines valid properties in StepperContent component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: StepperContentInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: StepperContentInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<StepperContentPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: StepperContentInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<StepperContentInstance>"
                },
                "StepperContentState": {
                    "description": "Defines valid state in StepperContent component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "StepperContentExposes": {
                    "description": "Defines the methods and properties exposed by StepperContent component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "stepper",
                            "optional": false,
                            "readonly": false,
                            "type": "StepperInstance",
                            "default": "",
                            "description": "The Stepper component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "StepperContentPassThroughType": {
                    "values": "PassThroughType<StepperContentInstance, E>",
                    "description": "Defines passthrough(pt) options type in StepperContent component."
                },
                "StepperContentInstance": {
                    "values": "ComponentInstance<StepperContentProps, StepperContentState, StepperContentExposes, StepperContentPassThrough>",
                    "description": "Instance of StepperContent component."
                }
            }
        }
    },
    "stepperheader": {
        "description": "StepperHeader is a container component that displays the navigation section of a Stepper component.\n\n[Live Demo](https://www.primereact.org/stepper/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "StepperHeaderPassThrough": {
                    "description": "Defines passthrough(pt) options of StepperHeader component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "StepperHeaderPassThroughType<HTMLAttributes<HTMLButtonElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "StepperHeaderProps": {
                    "description": "Defines valid properties in StepperHeader component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: StepperHeaderInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: StepperHeaderInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<StepperHeaderPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: StepperHeaderInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<StepperHeaderInstance>"
                },
                "StepperHeaderState": {
                    "description": "Defines valid state in StepperHeader component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "StepperHeaderExposes": {
                    "description": "Defines the methods and properties exposed by StepperHeader component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "stepper",
                            "optional": false,
                            "readonly": false,
                            "type": "StepperInstance",
                            "default": "",
                            "description": "The Stepper component instance."
                        },
                        {
                            "name": "stepperitem",
                            "optional": false,
                            "readonly": false,
                            "type": "StepperItemInstance",
                            "default": "",
                            "description": "The StepperItem component instance."
                        },
                        {
                            "name": "stepperstep",
                            "optional": false,
                            "readonly": false,
                            "type": "StepperStepInstance",
                            "default": "",
                            "description": "The StepperStep component instance."
                        },
                        {
                            "name": "activeValue",
                            "optional": false,
                            "readonly": false,
                            "type": "string | number",
                            "default": "",
                            "description": "Current active value of the stepper."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the step is disabled or not."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "StepperHeaderPassThroughType": {
                    "values": "PassThroughType<StepperHeaderInstance, E>",
                    "description": "Defines passthrough(pt) options type in StepperHeader component."
                },
                "StepperHeaderInstance": {
                    "values": "ComponentInstance<StepperHeaderProps, StepperHeaderState, StepperHeaderExposes, StepperHeaderPassThrough>",
                    "description": "Instance of StepperHeader component."
                }
            }
        }
    },
    "stepperitem": {
        "description": "StepperItem is a container component that represents an individual step within the Stepper component.\n\n[Live Demo](https://www.primereact.org/stepper/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "StepperItemPassThrough": {
                    "description": "Defines passthrough(pt) options of StepperItem component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "StepperItemPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "StepperItemProps": {
                    "description": "Defines valid properties in StepperItem component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: StepperItemInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: StepperItemInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<StepperItemPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: StepperItemInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "null",
                            "description": "Value of the step."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<StepperItemInstance>"
                },
                "StepperItemState": {
                    "description": "Defines valid state in StepperItem component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "StepperItemExposes": {
                    "description": "Defines the methods and properties exposed by StepperItem component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "stepper",
                            "optional": false,
                            "readonly": false,
                            "type": "StepperInstance",
                            "default": "",
                            "description": "The Stepper component instance."
                        },
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the step is active or not."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "StepperItemPassThroughType": {
                    "values": "PassThroughType<StepperItemInstance, E>",
                    "description": "Defines passthrough(pt) options type in StepperItem component."
                },
                "StepperItemInstance": {
                    "values": "ComponentInstance<StepperItemProps, StepperItemState, StepperItemExposes, StepperItemPassThrough>",
                    "description": "Instance of StepperItem component."
                }
            }
        }
    },
    "stepperlist": {
        "description": "StepperList is a container component for Stepper Items that displays a list of steps in the Stepper component.\n\n[Live Demo](https://www.primereact.org/stepper/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "StepperListPassThrough": {
                    "description": "Defines passthrough(pt) options of StepperList component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "StepperListPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "StepperListProps": {
                    "description": "Defines valid properties in StepperList component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: StepperListInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: StepperListInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<StepperListPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: StepperListInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<StepperListInstance>"
                },
                "StepperListState": {
                    "description": "Defines valid state in StepperList component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "StepperListExposes": {
                    "description": "Defines the methods and properties exposed by StepperList component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "stepper",
                            "optional": false,
                            "readonly": false,
                            "type": "StepperInstance",
                            "default": "",
                            "description": "The Stepper component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "StepperListPassThroughType": {
                    "values": "PassThroughType<StepperListInstance, E>",
                    "description": "Defines passthrough(pt) options type in StepperList component."
                },
                "StepperListInstance": {
                    "values": "ComponentInstance<StepperListProps, StepperListState, StepperListExposes, StepperListPassThrough>",
                    "description": "Instance of StepperList component."
                }
            }
        }
    },
    "steppernumber": {
        "description": "StepperNumber is a component that displays the numeric indicator for each step in the Stepper component.\n\n[Live Demo](https://www.primereact.org/stepper/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "StepperNumberPassThrough": {
                    "description": "Defines passthrough(pt) options of StepperNumber component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "StepperNumberPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "StepperNumberProps": {
                    "description": "Defines valid properties in StepperNumber component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: StepperNumberInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: StepperNumberInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<StepperNumberPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: StepperNumberInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<StepperNumberInstance>"
                },
                "StepperNumberState": {
                    "description": "Defines valid state in StepperNumber component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "StepperNumberExposes": {
                    "description": "Defines the methods and properties exposed by StepperNumber component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "stepper",
                            "optional": false,
                            "readonly": false,
                            "type": "StepperInstance",
                            "default": "",
                            "description": "The Stepper component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "StepperNumberPassThroughType": {
                    "values": "PassThroughType<StepperNumberInstance, E>",
                    "description": "Defines passthrough(pt) options type in StepperNumber component."
                },
                "StepperNumberInstance": {
                    "values": "ComponentInstance<StepperNumberProps, StepperNumberState, StepperNumberExposes, StepperNumberPassThrough>",
                    "description": "Instance of StepperNumber component."
                }
            }
        }
    },
    "stepperpanel": {
        "description": "StepperPanel is a container component that renders the content associated with a specific step in the Stepper component.\n\n[Live Demo](https://www.primereact.org/stepper/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "StepperPanelPassThrough": {
                    "description": "Defines passthrough(pt) options of StepperPanel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "StepperPanelPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "StepperPanelProps": {
                    "description": "Defines valid properties in StepperPanel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: StepperPanelInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: StepperPanelInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<StepperPanelPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: StepperPanelInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "null",
                            "description": "Value of the step."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<StepperPanelInstance>"
                },
                "StepperPanelState": {
                    "description": "Defines valid state in StepperPanel component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "StepperPanelExposes": {
                    "description": "Defines the methods and properties exposed by StepperPanel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "stepper",
                            "optional": false,
                            "readonly": false,
                            "type": "StepperInstance",
                            "default": "",
                            "description": "The Stepper component instance."
                        },
                        {
                            "name": "stepperitem",
                            "optional": false,
                            "readonly": false,
                            "type": "StepperItemInstance",
                            "default": "",
                            "description": "The StepperItem component instance."
                        },
                        {
                            "name": "activeValue",
                            "optional": false,
                            "readonly": false,
                            "type": "string | number",
                            "default": "",
                            "description": "Current active value of the stepper."
                        },
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the step is active or not."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "StepperPanelPassThroughType": {
                    "values": "PassThroughType<StepperPanelInstance, E>",
                    "description": "Defines passthrough(pt) options type in StepperPanel component."
                },
                "StepperPanelInstance": {
                    "values": "ComponentInstance<StepperPanelProps, StepperPanelState, StepperPanelExposes, StepperPanelPassThrough>",
                    "description": "Instance of StepperPanel component."
                }
            }
        }
    },
    "stepperpanels": {
        "description": "StepperPanels is a container component that manages the content panels corresponding to each step in the Stepper component.\n\n[Live Demo](https://www.primereact.org/stepper/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "StepperPanelsPassThrough": {
                    "description": "Defines passthrough(pt) options of StepperPanels component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "StepperPanelsPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "StepperPanelsProps": {
                    "description": "Defines valid properties in StepperPanels component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: StepperPanelsInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: StepperPanelsInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<StepperPanelsPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: StepperPanelsInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<StepperPanelsInstance>"
                },
                "StepperPanelsState": {
                    "description": "Defines valid state in StepperPanels component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "StepperPanelsExposes": {
                    "description": "Defines the methods and properties exposed by StepperPanels component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "stepper",
                            "optional": false,
                            "readonly": false,
                            "type": "StepperInstance",
                            "default": "",
                            "description": "The Stepper component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "StepperPanelsPassThroughType": {
                    "values": "PassThroughType<StepperPanelsInstance, E>",
                    "description": "Defines passthrough(pt) options type in StepperPanels component."
                },
                "StepperPanelsInstance": {
                    "values": "ComponentInstance<StepperPanelsProps, StepperPanelsState, StepperPanelsExposes, StepperPanelsPassThrough>",
                    "description": "Instance of StepperPanels component."
                }
            }
        }
    },
    "stepperseparator": {
        "description": "StepperSeparator is a container component for Stepper Items that displays a separator of steps in the Stepper component.\n\n[Live Demo](https://www.primereact.org/stepper/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "StepperSeparatorPassThrough": {
                    "description": "Defines passthrough(pt) options of StepperSeparator component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "StepperSeparatorPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "StepperSeparatorProps": {
                    "description": "Defines valid properties in StepperSeparator component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: StepperSeparatorInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: StepperSeparatorInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<StepperSeparatorPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: StepperSeparatorInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<StepperSeparatorInstance>"
                },
                "StepperSeparatorState": {
                    "description": "Defines valid state in StepperSeparator component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "StepperSeparatorExposes": {
                    "description": "Defines the methods and properties exposed by StepperSeparator component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "stepper",
                            "optional": false,
                            "readonly": false,
                            "type": "StepperInstance",
                            "default": "",
                            "description": "The Stepper component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "StepperSeparatorPassThroughType": {
                    "values": "PassThroughType<StepperSeparatorInstance, E>",
                    "description": "Defines passthrough(pt) options type in StepperSeparator component."
                },
                "StepperSeparatorInstance": {
                    "values": "ComponentInstance<StepperSeparatorProps, StepperSeparatorState, StepperSeparatorExposes, StepperSeparatorPassThrough>",
                    "description": "Instance of StepperSeparator component."
                }
            }
        }
    },
    "stepperstep": {
        "description": "StepperStep represents an individual step within a Stepper component.\n\n[Live Demo](https://www.primereact.org/stepper/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "StepperStepPassThrough": {
                    "description": "Defines passthrough(pt) options of StepperStep component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "StepperStepPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "StepperStepProps": {
                    "description": "Defines valid properties in StepperStep component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: StepperStepInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: StepperStepInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<StepperStepPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: StepperStepInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "null",
                            "description": "Value of the step."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the step is disabled."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<StepperStepInstance>"
                },
                "StepperStepState": {
                    "description": "Defines valid state in StepperStep component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "StepperStepExposes": {
                    "description": "Defines the methods and properties exposed by StepperStep component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "stepper",
                            "optional": false,
                            "readonly": false,
                            "type": "StepperInstance",
                            "default": "",
                            "description": "The Stepper component instance."
                        },
                        {
                            "name": "stepperitem",
                            "optional": false,
                            "readonly": false,
                            "type": "StepperItemInstance",
                            "default": "",
                            "description": "The StepperItem component instance."
                        },
                        {
                            "name": "activeValue",
                            "optional": false,
                            "readonly": false,
                            "type": "string | number",
                            "default": "",
                            "description": "Current active value of the stepper."
                        },
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the step is active or not."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the step is disabled or not."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "StepperStepPassThroughType": {
                    "values": "PassThroughType<StepperStepInstance, E>",
                    "description": "Defines passthrough(pt) options type in StepperStep component."
                },
                "StepperStepInstance": {
                    "values": "ComponentInstance<StepperStepProps, StepperStepState, StepperStepExposes, StepperStepPassThrough>",
                    "description": "Instance of StepperStep component."
                }
            }
        }
    },
    "steppertitle": {
        "description": "StepperTitle is a component that displays the title or label text of a step within the Stepper component.\n\n[Live Demo](https://www.primereact.org/stepper/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "StepperTitlePassThrough": {
                    "description": "Defines passthrough(pt) options of StepperTitle component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "StepperTitlePassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "StepperTitleProps": {
                    "description": "Defines valid properties in StepperTitle component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: StepperTitleInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: StepperTitleInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<StepperTitlePassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: StepperTitleInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<StepperTitleInstance>"
                },
                "StepperTitleState": {
                    "description": "Defines valid state in StepperTitle component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "StepperTitleExposes": {
                    "description": "Defines the methods and properties exposed by StepperTitle component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "stepper",
                            "optional": false,
                            "readonly": false,
                            "type": "StepperInstance",
                            "default": "",
                            "description": "The Stepper component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "StepperTitlePassThroughType": {
                    "values": "PassThroughType<StepperTitleInstance, E>",
                    "description": "Defines passthrough(pt) options type in StepperTitle component."
                },
                "StepperTitleInstance": {
                    "values": "ComponentInstance<StepperTitleProps, StepperTitleState, StepperTitleExposes, StepperTitlePassThrough>",
                    "description": "Instance of StepperTitle component."
                }
            }
        }
    },
    "usestepper": {
        "description": "The useStepper manages the functionality of a stepper component.\n\n[Live Demo](https://www.primereact.org/stepper/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useStepperChangeEvent": {
                    "description": "Event fired when the stepper's value changes.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "string | number",
                            "default": "",
                            "description": "The value of the stepper."
                        }
                    ],
                    "methods": []
                },
                "useStepperProps": {
                    "description": "Defines valid properties in useStepper.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "defaultValue",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "null",
                            "description": "Default value of the active step."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "null",
                            "description": "Value of the active step."
                        },
                        {
                            "name": "linear",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the steps are clickable or not."
                        },
                        {
                            "name": "onValueChange",
                            "optional": true,
                            "readonly": false,
                            "type": "(event: useStepperChangeEvent) => void",
                            "default": "",
                            "description": "Callback fired when the stepper's value changes."
                        }
                    ],
                    "methods": []
                },
                "useStepperState": {
                    "description": "Defines valid state in useStepper.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "string | number",
                            "default": "",
                            "description": "Value of the active step."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "StepperState"
                },
                "useStepperExposes": {
                    "description": "Defines the methods and properties exposed by useStepper.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "useStepperState",
                            "default": "",
                            "description": "The state of the useStepper."
                        },
                        {
                            "name": "setActiveStep",
                            "optional": false,
                            "readonly": false,
                            "type": "(value: string | number) => void",
                            "default": "",
                            "description": "The method to update the value of the active step."
                        },
                        {
                            "name": "isStepActive",
                            "optional": false,
                            "readonly": false,
                            "type": "(value: string | number) => boolean",
                            "default": "",
                            "description": "The method to check if the step is active."
                        },
                        {
                            "name": "isStepDisabled",
                            "optional": false,
                            "readonly": false,
                            "type": "() => boolean",
                            "default": "",
                            "description": "The method to check if the step is disabled."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "StepperExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useStepperInstance": {
                    "values": "HeadlessInstance<useStepperProps, useStepperState, useStepperExposes>",
                    "description": "Instance of useStepper headless."
                }
            }
        }
    },
    "styleclass": {
        "description": "StyleClass manages css classes declaratively to during enter/leave animations or just to toggle classes on an element.\n\n[Live Demo](https://www.primereact.org/styleclass/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "StyleClassPassThrough": {
                    "description": "Defines passthrough(pt) options of StyleClass component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "StyleClassProps": {
                    "description": "Defines valid properties in StyleClass component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: StyleClassInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: StyleClassInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<StyleClassPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: StyleClassInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "nodeRef",
                            "optional": true,
                            "readonly": false,
                            "type": "RefObject<ReactNode>",
                            "default": "",
                            "description": "A React reference to DOM element that need to specify."
                        },
                        {
                            "name": "selector",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Selector to define the target element."
                        },
                        {
                            "name": "enterFromClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class to add when item begins to get displayed."
                        },
                        {
                            "name": "enterActiveClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class to add during enter animation."
                        },
                        {
                            "name": "enterToClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class to add when item begins to get displayed."
                        },
                        {
                            "name": "leaveFromClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class to add when item begins to get hidden."
                        },
                        {
                            "name": "leaveActiveClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class to add during leave animation."
                        },
                        {
                            "name": "leaveToClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class to add when leave animation is completed."
                        },
                        {
                            "name": "hiddenClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class to apply when the component is hidden."
                        },
                        {
                            "name": "hideOnOutsideClick",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to trigger leave animation when outside of the element is clicked."
                        },
                        {
                            "name": "toggleClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Adds or removes a class when no enter-leave animation is required."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<StyleClassInstance, useStyleClassProps>"
                },
                "StyleClassState": {
                    "description": "Defines valid state in StyleClass component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "useStyleClassState"
                },
                "StyleClassExposes": {
                    "description": "Defines the methods and properties exposed by StyleClass component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "targetRef",
                            "optional": false,
                            "readonly": false,
                            "type": "RefObject<HTMLElement>",
                            "default": "",
                            "description": "The target element."
                        },
                        {
                            "name": "enter",
                            "optional": false,
                            "readonly": false,
                            "type": "() => void",
                            "default": "",
                            "description": "The method to trigger the enter animation."
                        },
                        {
                            "name": "leave",
                            "optional": false,
                            "readonly": false,
                            "type": "() => void",
                            "default": "",
                            "description": "The method to trigger the leave animation."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "useStyleClassExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "StyleClassPassThroughType": {
                    "values": "PassThroughType<StyleClassInstance, E>",
                    "description": "Defines passthrough(pt) options type in StyleClass component."
                },
                "StyleClassInstance": {
                    "values": "ComponentInstance<StyleClassProps, StyleClassState, StyleClassExposes, StyleClassPassThrough>",
                    "description": "Instance of StyleClass component."
                }
            }
        }
    },
    "usestyleclass": {
        "description": "The useStyleClass manages the state and functionality of a StyleClass component.\n\n[Live Demo](https://www.primereact.org/styleclass/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useStyleClassProps": {
                    "description": "Defines valid properties in useStyleClass.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "nodeRef",
                            "optional": true,
                            "readonly": false,
                            "type": "RefObject<ReactNode>",
                            "default": "",
                            "description": "A React reference to DOM element that need to specify."
                        },
                        {
                            "name": "selector",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Selector to define the target element."
                        },
                        {
                            "name": "enterFromClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class to add when item begins to get displayed."
                        },
                        {
                            "name": "enterActiveClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class to add during enter animation."
                        },
                        {
                            "name": "enterToClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class to add when item begins to get displayed."
                        },
                        {
                            "name": "leaveFromClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class to add when item begins to get hidden."
                        },
                        {
                            "name": "leaveActiveClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class to add during leave animation."
                        },
                        {
                            "name": "leaveToClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class to add when leave animation is completed."
                        },
                        {
                            "name": "hiddenClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class to apply when the component is hidden."
                        },
                        {
                            "name": "hideOnOutsideClick",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to trigger leave animation when outside of the element is clicked."
                        },
                        {
                            "name": "toggleClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Adds or removes a class when no enter-leave animation is required."
                        }
                    ],
                    "methods": []
                },
                "useStyleClassState": {
                    "description": "Defines valid state in useStyleClass.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedBy": "StyleClassState"
                },
                "useStyleClassExposes": {
                    "description": "Defines the methods and properties exposed by useStyleClass.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "targetRef",
                            "optional": false,
                            "readonly": false,
                            "type": "RefObject<HTMLElement>",
                            "default": "",
                            "description": "The target element."
                        },
                        {
                            "name": "enter",
                            "optional": false,
                            "readonly": false,
                            "type": "() => void",
                            "default": "",
                            "description": "The method to trigger the enter animation."
                        },
                        {
                            "name": "leave",
                            "optional": false,
                            "readonly": false,
                            "type": "() => void",
                            "default": "",
                            "description": "The method to trigger the leave animation."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "StyleClassExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useStyleClassInstance": {
                    "values": "HeadlessInstance<useStyleClassProps, useStyleClassState, useStyleClassExposes>",
                    "description": "Instance of useStyleClass headless."
                }
            }
        }
    },
    "switch": {
        "description": "Switch component is used to select a boolean value.\n\n[Live Demo](https://www.primereact.org/switch/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "SwitchPassThrough": {
                    "description": "Defines passthrough(pt) options of Switch component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "SwitchPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "input",
                            "optional": true,
                            "readonly": false,
                            "type": "SwitchPassThroughType<HTMLAttributes<HTMLElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the input's DOM element."
                        },
                        {
                            "name": "control",
                            "optional": true,
                            "readonly": false,
                            "type": "SwitchPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the control's DOM element."
                        },
                        {
                            "name": "thumb",
                            "optional": true,
                            "readonly": false,
                            "type": "SwitchPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the thumb's DOM element."
                        }
                    ],
                    "methods": []
                },
                "SwitchChangeEvent": {
                    "description": "Event fired when the switch's checked state changes.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "Value of the switch."
                        },
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "ChangeEvent",
                            "default": "",
                            "description": "The original event that triggered the change."
                        },
                        {
                            "name": "checked",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "The checked state of the switch."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "useSwitchChangeEvent<React.ChangeEvent<HTMLInputElement>>"
                },
                "SwitchProps": {
                    "description": "Defines valid properties in Switch component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: SwitchInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: SwitchInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<SwitchPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: SwitchInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "Value of the switch."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the element should be disabled."
                        },
                        {
                            "name": "required",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the element is required."
                        },
                        {
                            "name": "invalid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style."
                        },
                        {
                            "name": "inputId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "inputStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the input field."
                        },
                        {
                            "name": "inputClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the input field."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes a string value that labels the component."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "onFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "(event: FocusEvent<HTMLInputElement>) => void",
                            "default": "",
                            "description": "Callback function that is called when the switch is focused."
                        },
                        {
                            "name": "onBlur",
                            "optional": true,
                            "readonly": false,
                            "type": "(event: FocusEvent<HTMLInputElement>) => void",
                            "default": "",
                            "description": "Callback function that is called when the switch loses focus."
                        },
                        {
                            "name": "onCheckedChange",
                            "optional": true,
                            "readonly": false,
                            "type": "(event: SwitchChangeEvent) => void",
                            "default": "",
                            "description": "Callback fired when the switch's checked state changes."
                        },
                        {
                            "name": "checked",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "When present, it specifies the input's checked state."
                        },
                        {
                            "name": "defaultChecked",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "The default value for the input when not controlled by  `checked`  and  `onCheckedChange` ."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<SwitchInstance, Omit<useSwitchProps, \"onCheckedChange\">>"
                },
                "SwitchState": {
                    "description": "Defines valid state in Switch component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "checked",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "The checked state of the useSwitch."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "useSwitchState"
                },
                "SwitchExposes": {
                    "description": "Defines the methods and properties exposed by Switch component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "useSwitchState",
                            "default": "",
                            "description": "The state of the useSwitch."
                        },
                        {
                            "name": "onChange",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: useSwitchChangeEvent) => void",
                            "default": "",
                            "description": "Callback fired when the useSwitch's checked state changes."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "useSwitchExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "SwitchPassThroughType": {
                    "values": "PassThroughType<SwitchInstance, E>",
                    "description": "Defines passthrough(pt) options type in Switch component."
                },
                "SwitchClassNamesType": {
                    "values": "typeof SwitchClassNames[keyof typeof SwitchClassNames]",
                    "description": "Type representing the CSS class names used in the Switch component."
                },
                "SwitchInstance": {
                    "values": "ComponentInstance<SwitchProps, SwitchState, SwitchExposes, SwitchPassThrough>",
                    "description": "Instance of Switch component."
                }
            }
        },
        "variables": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "SwitchClassNames": {
                    "description": "Defines the CSS class names used in the Switch component.",
                    "variables": [
                        {
                            "name": "root",
                            "value": "p-toggleswitch",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "input",
                            "value": "p-toggleswitch-input",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the input element"
                        },
                        {
                            "name": "control",
                            "value": "p-toggleswitch-slider",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the control element"
                        },
                        {
                            "name": "thumb",
                            "value": "p-toggleswitch-handle",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the handle element"
                        }
                    ]
                }
            }
        }
    },
    "switchcontrol": {
        "description": "SwitchControl is a component that displays a container for thumb.\n\n[Live Demo](https://www.primereact.org/switch/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "SwitchControlPassThrough": {
                    "description": "Defines passthrough(pt) options of SwitchControl component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "SwitchControlPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "SwitchControlProps": {
                    "description": "Defines valid properties in SwitchControl component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: SwitchControlInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: SwitchControlInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<SwitchControlPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: SwitchControlInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<SwitchControlInstance>"
                },
                "SwitchControlState": {
                    "description": "Defines valid state in SwitchControl component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "SwitchControlExposes": {
                    "description": "Defines the methods and properties exposed by SwitchControl component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "switch",
                            "optional": false,
                            "readonly": false,
                            "type": "SwitchInstance",
                            "default": "",
                            "description": "The Switch component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "SwitchControlPassThroughType": {
                    "values": "PassThroughType<SwitchControlInstance, E>",
                    "description": "Defines passthrough(pt) options type in SwitchControl component."
                },
                "SwitchControlInstance": {
                    "values": "ComponentInstance<SwitchControlProps, SwitchControlState, SwitchControlExposes, SwitchControlPassThrough>",
                    "description": "Instance of SwitchControl component."
                }
            }
        }
    },
    "switchthumb": {
        "description": "SwitchThumb is a component that displays athumb.\n\n[Live Demo](https://www.primereact.org/switch/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "SwitchThumbPassThrough": {
                    "description": "Defines passthrough(pt) options of SwitchThumb component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "SwitchThumbPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "SwitchThumbProps": {
                    "description": "Defines valid properties in SwitchThumb component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: SwitchThumbInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: SwitchThumbInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<SwitchThumbPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: SwitchThumbInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<SwitchThumbInstance>"
                },
                "SwitchThumbState": {
                    "description": "Defines valid state in SwitchThumb component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "SwitchThumbExposes": {
                    "description": "Defines the methods and properties exposed by SwitchThumb component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "switch",
                            "optional": false,
                            "readonly": false,
                            "type": "SwitchInstance",
                            "default": "",
                            "description": "The Switch component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "SwitchThumbPassThroughType": {
                    "values": "PassThroughType<SwitchThumbInstance, E>",
                    "description": "Defines passthrough(pt) options type in SwitchThumb component."
                },
                "SwitchThumbInstance": {
                    "values": "ComponentInstance<SwitchThumbProps, SwitchThumbState, SwitchThumbExposes, SwitchThumbPassThrough>",
                    "description": "Instance of SwitchThumb component."
                }
            }
        }
    },
    "useswitch": {
        "description": "The useSwitch manages the state and functionality of a switch component.\n\n[Live Demo](https://www.primereact.org/switch/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useSwitchChangeEvent": {
                    "description": "Event fired when the switch's checked state changes.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "E",
                            "default": "",
                            "description": "The original event that triggered the change."
                        },
                        {
                            "name": "checked",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "The checked state of the switch."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "SwitchChangeEvent"
                },
                "useSwitchProps": {
                    "description": "Defines valid properties in useSwitch.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "checked",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "When present, it specifies the input's checked state."
                        },
                        {
                            "name": "defaultChecked",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "The default value for the input when not controlled by  `checked`  and  `onCheckedChange` ."
                        },
                        {
                            "name": "onCheckedChange",
                            "optional": true,
                            "readonly": false,
                            "type": "(event: useSwitchChangeEvent) => void",
                            "default": "",
                            "description": "Callback fired when the switch's checked state changes."
                        }
                    ],
                    "methods": []
                },
                "useSwitchState": {
                    "description": "Defines valid state in useSwitch.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "checked",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "The checked state of the useSwitch."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "SwitchState"
                },
                "useSwitchExposes": {
                    "description": "Defines the methods and properties exposed by useSwitch.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "useSwitchState",
                            "default": "",
                            "description": "The state of the useSwitch."
                        },
                        {
                            "name": "onChange",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: useSwitchChangeEvent) => void",
                            "default": "",
                            "description": "Callback fired when the useSwitch's checked state changes."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "SwitchExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useSwitchInstance": {
                    "values": "HeadlessInstance<useSwitchProps, useSwitchState, useSwitchExposes>",
                    "description": "Instance of useSwitch headless."
                }
            }
        }
    },
    "tabs": {
        "description": "Tabs component is used to select a boolean value.\n\n[Live Demo](https://www.primereact.org/tabs/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TabsPassThrough": {
                    "description": "Defines passthrough(pt) options of Tabs component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "TabsPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "TabsProps": {
                    "description": "Defines valid properties in Tabs component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: TabsInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: TabsInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<TabsPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: TabsInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "lazy",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, hidden tabs are not rendered at all. Defaults to false that hides tabs with css."
                        },
                        {
                            "name": "scrollable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified, enables horizontal and/or vertical scrolling."
                        },
                        {
                            "name": "showNavigators",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to display navigation buttons in container when scrollable is enabled."
                        },
                        {
                            "name": "tabIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "null",
                            "description": "Value of the active tab or an array of values in multiple mode."
                        },
                        {
                            "name": "selectOnFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, the focused tab is activated."
                        },
                        {
                            "name": "onValueChange",
                            "optional": true,
                            "readonly": false,
                            "type": "(event: useTabsChangeEvent) => void",
                            "default": "",
                            "description": "Callback fired when the tabs's value changes."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<TabsInstance, useTabsProps>"
                },
                "TabsState": {
                    "description": "Defines valid state in Tabs component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "activeTab",
                            "optional": false,
                            "readonly": false,
                            "type": "string | number",
                            "default": "",
                            "description": "Value of the active tab or an array of values in multiple mode."
                        },
                        {
                            "name": "inkBarDimensions",
                            "optional": false,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Dimensions of the inkbar."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "useTabsState"
                },
                "TabsExposes": {
                    "description": "Defines the methods and properties exposed by Tabs component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "onTabKeyDown",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: KeyboardEvent<HTMLButtonElement>, value: string | number) => void",
                            "default": "",
                            "description": "The method to handle the tab key down event."
                        },
                        {
                            "name": "onTabClick",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: MouseEvent<HTMLButtonElement>, value: string | number) => void",
                            "default": "",
                            "description": "The method to handle the tab click event."
                        },
                        {
                            "name": "onTabFocus",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: FocusEvent<HTMLButtonElement>, value: string | number) => void",
                            "default": "",
                            "description": "The method to handle the tab focus event."
                        },
                        {
                            "name": "updateValue",
                            "optional": false,
                            "readonly": false,
                            "type": "(value: string | number) => void",
                            "default": "",
                            "description": "The method to update the value of the active tab."
                        },
                        {
                            "name": "isItemActive",
                            "optional": false,
                            "readonly": false,
                            "type": "(key: string | number) => boolean",
                            "default": "",
                            "description": "The method to check if the tab is active."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "useTabsExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TabsPassThroughType": {
                    "values": "PassThroughType<TabsInstance, E>",
                    "description": "Defines passthrough(pt) options type in Tabs component."
                },
                "TabsClassNamesType": {
                    "values": "typeof TabsClassNames[keyof typeof TabsClassNames]",
                    "description": "Type representing the CSS class names used in the Tabs component."
                },
                "TabsInstance": {
                    "values": "ComponentInstance<TabsProps, TabsState, TabsExposes, TabsPassThrough>",
                    "description": "Instance of Switch component."
                }
            }
        },
        "variables": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "TabsClassNames": {
                    "description": "Defines the CSS class names used in the Tabs component.",
                    "variables": []
                }
            }
        }
    },
    "tabsindicator": {
        "description": "TabsIndicator is a component that displays a container for tabs.\n\n[Live Demo](https://www.primereact.org/tabs/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TabsIndicatorPassThrough": {
                    "description": "Defines passthrough(pt) options of TabsIndicator component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "TabsIndicatorPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "TabsIndicatorProps": {
                    "description": "Defines valid properties in TabsIndicator component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: TabsIndicatorInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: TabsIndicatorInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<TabsIndicatorPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: TabsIndicatorInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "",
                            "description": "Value of the tabsindicator."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<TabsIndicatorInstance>"
                },
                "TabsIndicatorState": {
                    "description": "Defines valid state in TabsIndicator component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "TabsIndicatorExposes": {
                    "description": "Defines the methods and properties exposed by TabsIndicator component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "tabs",
                            "optional": false,
                            "readonly": false,
                            "type": "TabsInstance",
                            "default": "",
                            "description": "The Tabs component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TabsIndicatorPassThroughType": {
                    "values": "PassThroughType<TabsIndicatorInstance, E>",
                    "description": "Defines passthrough(pt) options type in TabsIndicator component."
                },
                "TabsIndicatorInstance": {
                    "values": "ComponentInstance<TabsIndicatorProps, TabsIndicatorState, TabsIndicatorExposes, TabsIndicatorPassThrough>",
                    "description": "Instance of TabsIndicator component."
                }
            }
        }
    },
    "tabslist": {
        "description": "TabsList is a component that displays a container for tabs.\n\n[Live Demo](https://www.primereact.org/tabs/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TabsListPassThrough": {
                    "description": "Defines passthrough(pt) options of TabsList component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "TabsListPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "TabsListProps": {
                    "description": "Defines valid properties in TabsList component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: TabsListInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: TabsListInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<TabsListPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: TabsListInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<TabsListInstance>"
                },
                "TabsListState": {
                    "description": "Defines valid state in TabsList component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "TabsListExposes": {
                    "description": "Defines the methods and properties exposed by TabsList component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "tabs",
                            "optional": false,
                            "readonly": false,
                            "type": "TabsInstance",
                            "default": "",
                            "description": "The Tabs component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TabsListPassThroughType": {
                    "values": "PassThroughType<TabsListInstance, E>",
                    "description": "Defines passthrough(pt) options type in TabsList component."
                },
                "TabsListInstance": {
                    "values": "ComponentInstance<TabsListProps, TabsListState, TabsListExposes, TabsListPassThrough>",
                    "description": "Instance of TabsList component."
                }
            }
        }
    },
    "tabspanel": {
        "description": "TabsPanel is a component that displays a container for tabs.\n\n[Live Demo](https://www.primereact.org/tabs/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TabsPanelPassThrough": {
                    "description": "Defines passthrough(pt) options of TabsPanel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "TabsPanelPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "TabsPanelProps": {
                    "description": "Defines valid properties in TabsPanel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: TabsPanelInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: TabsPanelInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<TabsPanelPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: TabsPanelInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "",
                            "description": "Value of the tabpanel."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<TabsPanelInstance>"
                },
                "TabsPanelState": {
                    "description": "Defines valid state in TabsPanel component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "TabsPanelExposes": {
                    "description": "Defines the methods and properties exposed by TabsList component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "tabs",
                            "optional": false,
                            "readonly": false,
                            "type": "TabsInstance",
                            "default": "",
                            "description": "The Tabs component instance."
                        },
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the tabpanel is active."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TabsPanelPassThroughType": {
                    "values": "PassThroughType<TabsPanelInstance, E>",
                    "description": "Defines passthrough(pt) options type in TabsPanel component."
                },
                "TabsPanelInstance": {
                    "values": "ComponentInstance<TabsPanelProps, TabsPanelState, TabsPanelExposes, TabsPanelPassThrough>",
                    "description": "Instance of TabsList component."
                }
            }
        }
    },
    "tabspanels": {
        "description": "TabsPanels is a component that displays a container for panels.\n\n[Live Demo](https://www.primereact.org/tabs/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TabsPanelsPassThrough": {
                    "description": "Defines passthrough(pt) options of TabsPanels component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "TabsPanelsPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "TabsPanelsProps": {
                    "description": "Defines valid properties in TabsPanels component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: TabsPanelsInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: TabsPanelsInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<TabsPanelsPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: TabsPanelsInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<TabsPanelsInstance>"
                },
                "TabsPanelsState": {
                    "description": "Defines valid state in TabsPanels component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "TabsPanelsExposes": {
                    "description": "Defines the methods and properties exposed by TabsPanels component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "tabs",
                            "optional": false,
                            "readonly": false,
                            "type": "TabsInstance",
                            "default": "",
                            "description": "The Tabs component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TabsPanelsPassThroughType": {
                    "values": "PassThroughType<TabsPanelsInstance, E>",
                    "description": "Defines passthrough(pt) options type in TabsPanels component."
                },
                "TabsPanelsInstance": {
                    "values": "ComponentInstance<TabsPanelsProps, TabsPanelsState, TabsPanelsExposes, TabsPanelsPassThrough>",
                    "description": "Instance of TabsPanels component."
                }
            }
        }
    },
    "tabstab": {
        "description": "TabsTab is a component that displays a tab.\n\n[Live Demo](https://www.primereact.org/tabs/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TabsTabPassThrough": {
                    "description": "Defines passthrough(pt) options of TabsTab component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "TabsTabPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "TabsTabProps": {
                    "description": "Defines valid properties in TabsTab component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: TabsTabInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: TabsTabInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<TabsTabPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: TabsTabInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "",
                            "description": "Value of the tab."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the tab is disabled."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<TabsTabInstance>"
                },
                "TabsTabState": {
                    "description": "Defines valid state in TabsTab component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "TabsTabExposes": {
                    "description": "Defines the methods and properties exposed by TabsTab component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "tabs",
                            "optional": false,
                            "readonly": false,
                            "type": "TabsInstance",
                            "default": "",
                            "description": "The Tabs component instance."
                        },
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the tab is active."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TabsTabPassThroughType": {
                    "values": "PassThroughType<TabsTabInstance, E>",
                    "description": "Defines passthrough(pt) options type in TabsTab component."
                },
                "TabsTabInstance": {
                    "values": "ComponentInstance<TabsTabProps, TabsTabState, TabsTabExposes, TabsTabPassThrough>",
                    "description": "Instance of TabsTab component."
                }
            }
        }
    },
    "usetabs": {
        "description": "The useTabs manages the state and functionality of a tabs component.\n\n[Live Demo](https://www.primereact.org/tabs/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useTabsChangeEvent": {
                    "description": "Event fired when the tabs's checked state changes.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "string | number",
                            "default": "",
                            "description": "The value of the tabs."
                        }
                    ],
                    "methods": []
                },
                "useTabsProps": {
                    "description": "Defines valid properties in useTabs.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "null",
                            "description": "Value of the active tab or an array of values in multiple mode."
                        },
                        {
                            "name": "selectOnFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, the focused tab is activated."
                        },
                        {
                            "name": "onValueChange",
                            "optional": true,
                            "readonly": false,
                            "type": "(event: useTabsChangeEvent) => void",
                            "default": "",
                            "description": "Callback fired when the tabs's value changes."
                        }
                    ],
                    "methods": []
                },
                "useTabsState": {
                    "description": "Defines valid state in useTabs.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "activeTab",
                            "optional": false,
                            "readonly": false,
                            "type": "string | number",
                            "default": "",
                            "description": "Value of the active tab or an array of values in multiple mode."
                        },
                        {
                            "name": "inkBarDimensions",
                            "optional": false,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Dimensions of the inkbar."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "TabsState"
                },
                "useTabsExposes": {
                    "description": "Defines the methods and properties exposed by useTabs.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "updateValue",
                            "optional": false,
                            "readonly": false,
                            "type": "(value: string | number) => void",
                            "default": "",
                            "description": "The method to update the value of the active tab."
                        },
                        {
                            "name": "isItemActive",
                            "optional": false,
                            "readonly": false,
                            "type": "(key: string | number) => boolean",
                            "default": "",
                            "description": "The method to check if the tab is active."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "TabsExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useTabsInstance": {
                    "values": "HeadlessInstance<useTabsProps, useTabsState, useTabsExposes>",
                    "description": "Instance of useTabs headless."
                }
            }
        }
    },
    "tag": {
        "description": "Tag component is used to categorize content.\n\n[Live Demo](https://www.primereact.org/tag/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TagPassThrough": {
                    "description": "Defines passthrough(pt) options of Tag component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "TagPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "TagPassThroughType<HTMLAttributes<HTMLElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the icon's DOM element."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "TagPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the label's DOM element."
                        }
                    ],
                    "methods": []
                },
                "TagProps": {
                    "description": "Defines valid properties in Tag component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: TagInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: TagInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<TagPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: TagInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "severity",
                            "optional": true,
                            "readonly": false,
                            "type": "\"secondary\" | \"info\" | \"success\" | \"warn\" | \"danger\" | \"contrast\"",
                            "default": "",
                            "description": "Severity type of the tag."
                        },
                        {
                            "name": "rounded",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the corners of the tag are rounded."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<TagInstance, useTagProps>"
                },
                "TagState": {
                    "description": "Defines valid state in Tag component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "useTagState"
                },
                "TagExposes": {
                    "description": "Defines the methods and properties exposed by Tag component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "useTagExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TagPassThroughType": {
                    "values": "PassThroughType<TagInstance, E>",
                    "description": "Defines passthrough(pt) options type in Tag component."
                },
                "TagClassNamesType": {
                    "values": "typeof TagClassNames[keyof typeof TagClassNames]",
                    "description": "Type representing the CSS class names used in the Tag component."
                },
                "TagInstance": {
                    "values": "ComponentInstance<TagProps, TagState, TagExposes, TagPassThrough>",
                    "description": "Instance of Tag component."
                }
            }
        },
        "variables": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "TagClassNames": {
                    "description": "Defines the CSS class names used in the Tag component.",
                    "variables": [
                        {
                            "name": "root",
                            "value": "p-tag",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "icon",
                            "value": "p-tag-icon",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the icon element"
                        },
                        {
                            "name": "label",
                            "value": "p-tag-label",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the label element"
                        }
                    ]
                }
            }
        }
    },
    "tagicon": {
        "description": "TagIcon is a component that displays an icon.\n\n[Live Demo](https://www.primereact.org/tag/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TagIconPassThrough": {
                    "description": "Defines passthrough(pt) options of TagIcon component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "TagIconPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "TagIconProps": {
                    "description": "Defines valid properties in TagIcon component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: TagIconInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: TagIconInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<TagIconPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: TagIconInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<TagIconInstance>"
                },
                "TagIconState": {
                    "description": "Defines valid state in TagIcon component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "TagIconExposes": {
                    "description": "Defines the methods and properties exposed by TagIcon component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "tag",
                            "optional": false,
                            "readonly": false,
                            "type": "TagInstance",
                            "default": "",
                            "description": "The Tag component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TagIconPassThroughType": {
                    "values": "PassThroughType<TagIconInstance, E>",
                    "description": "Defines passthrough(pt) options type in TagIcon component."
                },
                "TagIconInstance": {
                    "values": "ComponentInstance<TagIconProps, TagIconState, TagIconExposes, TagIconPassThrough>",
                    "description": "Instance of TagIcon component."
                }
            }
        }
    },
    "taglabel": {
        "description": "TagLabel is a component that displays a label.\n\n[Live Demo](https://www.primereact.org/tag/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TagLabelPassThrough": {
                    "description": "Defines passthrough(pt) options of TagLabel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "TagLabelPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "TagLabelProps": {
                    "description": "Defines valid properties in TagLabel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: TagLabelInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: TagLabelInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<TagLabelPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: TagLabelInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<TagLabelInstance>"
                },
                "TagLabelState": {
                    "description": "Defines valid state in TagLabel component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "TagLabelExposes": {
                    "description": "Defines the methods and properties exposed by TagLabel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "tag",
                            "optional": false,
                            "readonly": false,
                            "type": "TagInstance",
                            "default": "",
                            "description": "The Tag component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TagLabelPassThroughType": {
                    "values": "PassThroughType<TagLabelInstance, E>",
                    "description": "Defines passthrough(pt) options type in TagLabel component."
                },
                "TagLabelInstance": {
                    "values": "ComponentInstance<TagLabelProps, TagLabelState, TagLabelExposes, TagLabelPassThrough>",
                    "description": "Instance of TagLabel component."
                }
            }
        }
    },
    "usetag": {
        "description": "The useTag manages the state and functionality of a tag component.\n\n[Live Demo](https://www.primereact.org/tag/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useTagProps": {
                    "description": "Defines valid properties in useTag.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "useTagState": {
                    "description": "Defines valid state in useTag.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedBy": "TagState"
                },
                "useTagExposes": {
                    "description": "Defines the methods and properties exposed by useTag.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedBy": "TagExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useTagInstance": {
                    "values": "HeadlessInstance<useTagProps, useTagState, useTagExposes>",
                    "description": "Instance of useTag headless."
                }
            }
        }
    },
    "togglebutton": {
        "description": "ToggleButton is an extension to standard ToggleButton element with theming.\n\n[Live Demo](https://www.primereact.org/ToggleButton/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ToggleButtonPassThrough": {
                    "description": "Defines passthrough(pt) options of ToggleButton component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ToggleButtonPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "indicator",
                            "optional": true,
                            "readonly": false,
                            "type": "ToggleButtonPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the indicator's DOM element."
                        }
                    ],
                    "methods": []
                },
                "ToggleButtonChangeEvent": {
                    "description": "Event fired when the ToggleButton's checked state changes.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "Value of the ToggleButton."
                        },
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "ChangeEvent",
                            "default": "",
                            "description": "The original event that triggered the change."
                        },
                        {
                            "name": "pressed",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "The pressed state of the ToggleButton."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "ToggleButtonGroupUpdateChangeEvent",
                    "extendedTypes": "useToggleButtonChangeEvent<React.ChangeEvent<HTMLButtonElement>>"
                },
                "ToggleButtonProps": {
                    "description": "Defines valid properties in ToggleButton component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: ToggleButtonInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: ToggleButtonInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<ToggleButtonPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: ToggleButtonInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "Value of the ToggleButton."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "\"small\" | \"large\" | \"normal\"",
                            "default": "",
                            "description": "Defines the size of the ToggleButton."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the element should be disabled."
                        },
                        {
                            "name": "invalid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style."
                        },
                        {
                            "name": "onPressedChange",
                            "optional": true,
                            "readonly": false,
                            "type": "(event: ToggleButtonChangeEvent) => void",
                            "default": "",
                            "description": "Callback fired when the ToggleButton's pressed state changes."
                        },
                        {
                            "name": "pressed",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "When present, it specifies that the ToggleButton should be pressed."
                        },
                        {
                            "name": "defaultPressed",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "The default pressed value when not controlled by  `pressed`  and  `onPressedChange` ."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<ToggleButtonInstance, Omit<useToggleButtonProps, \"onPressedChange\">>"
                },
                "ToggleButtonState": {
                    "description": "Defines valid state in ToggleButton component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "pressed",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "The pressed state of the useToggleButton."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "useToggleButtonState"
                },
                "ToggleButtonExposes": {
                    "description": "Defines the methods and properties exposed by ToggleButton component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "group",
                            "optional": true,
                            "readonly": false,
                            "type": "ToggleButtonGroupInstance",
                            "default": "",
                            "description": "The group instance of the ToggleButton."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "useToggleButtonState",
                            "default": "",
                            "description": "The state of the useToggleButton."
                        },
                        {
                            "name": "onChange",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: useToggleButtonChangeEvent) => void",
                            "default": "",
                            "description": "Callback fired when the useToggleButton's pressed state changes."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "useToggleButtonExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ToggleButtonPassThroughType": {
                    "values": "PassThroughType<ToggleButtonInstance, E>",
                    "description": "Defines passthrough(pt) options type in ToggleButton component."
                },
                "ToggleButtonClassNamesType": {
                    "values": "typeof ToggleButtonClassNames[keyof typeof ToggleButtonClassNames]",
                    "description": "Type representing the CSS class names used in the ToggleButton component."
                },
                "ToggleButtonInstance": {
                    "values": "ComponentInstance<ToggleButtonProps, ToggleButtonState, ToggleButtonExposes, ToggleButtonPassThrough>",
                    "description": "Instance of ToggleButton component."
                }
            }
        },
        "variables": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ToggleButtonClassNames": {
                    "description": "Defines the CSS class names used in the ToggleButton component.",
                    "variables": [
                        {
                            "name": "root",
                            "value": "p-togglebutton",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "indicator",
                            "value": "p-togglebutton-content",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the content element"
                        }
                    ]
                }
            }
        }
    },
    "togglebuttongroup": {
        "description": "ToggleButtonGroup is a component that allows users to select one or more options from a set of toggle buttons.\n\n[Live Demo](https://www.primereact.org/togglebutton/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ToggleButtonGroupPassThrough": {
                    "description": "Defines passthrough(pt) options of ToggleButton component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ToggleButtonGroupPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "ToggleButtonGroupValueChangeEvent": {
                    "description": "Event fired when the ToggleButton group's value changes.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The value of the ToggleButton group."
                        }
                    ],
                    "methods": []
                },
                "ToggleButtonGroupUpdateChangeEvent": {
                    "description": "Used to update the ToggleButton group value.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "Value of the ToggleButton."
                        },
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "ChangeEvent",
                            "default": "",
                            "description": "The original event that triggered the change."
                        },
                        {
                            "name": "pressed",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "The pressed state of the ToggleButton."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "ToggleButtonChangeEvent"
                },
                "ToggleButtonGroupProps": {
                    "description": "Defines valid properties in ToggleButtonGroup component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: ToggleButtonGroupInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: ToggleButtonGroupInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<ToggleButtonGroupPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: ToggleButtonGroupInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "Value of the ToggleButton group."
                        },
                        {
                            "name": "defaultValue",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The default value of the ToggleButton group."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "\"small\" | \"large\" | \"normal\"",
                            "default": "",
                            "description": "Defines the size of the ToggleButton components."
                        },
                        {
                            "name": "multiple",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the ToggleButton group allows multiple selections."
                        },
                        {
                            "name": "allowEmpty",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "When present, it specifies that the ToggleButton group allows empty selection."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the ToggleButton group should be disabled."
                        },
                        {
                            "name": "invalid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the ToggleButton group is invalid."
                        },
                        {
                            "name": "onValueChange",
                            "optional": true,
                            "readonly": false,
                            "type": "(event: ToggleButtonGroupValueChangeEvent) => void",
                            "default": "",
                            "description": "Callback function that is called when the ToggleButton group value changes."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<ToggleButtonGroupInstance>"
                },
                "ToggleButtonGroupState": {
                    "description": "Defines valid state in ToggleButtonGroup component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "Value of the ToggleButton group."
                        }
                    ],
                    "methods": []
                },
                "ToggleButtonGroupExposes": {
                    "description": "Defines the methods and properties exposed by ToggleButtonGroup component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "ToggleButtonGroupState",
                            "default": "",
                            "description": "The state of the ToggleButton group."
                        },
                        {
                            "name": "updateChange",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: ToggleButtonGroupUpdateChangeEvent) => void",
                            "default": "",
                            "description": "Updates the value of the ToggleButton group."
                        },
                        {
                            "name": "isPressed",
                            "optional": false,
                            "readonly": false,
                            "type": "(value: unknown, toggleButtonValue: unknown) => boolean",
                            "default": "",
                            "description": "Checks if a toggle button is pressed.\nReturns true if the toggle button is pressed, false if not pressed, or undefined if the value is undefined."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ToggleButtonGroupPassThroughType": {
                    "values": "PassThroughType<ToggleButtonGroupInstance, E>",
                    "description": "Defines passthrough(pt) options type in ToggleButton component."
                },
                "ToggleButtonGroupClassNamesType": {
                    "values": "typeof ToggleButtonGroupClassNames[keyof typeof ToggleButtonGroupClassNames]",
                    "description": "Type representing the CSS class names used in the ToggleButtonGroup component."
                },
                "ToggleButtonGroupInstance": {
                    "values": "ComponentInstance<ToggleButtonGroupProps, ToggleButtonGroupState, ToggleButtonGroupExposes, ToggleButtonGroupPassThrough>",
                    "description": "Instance of ToggleButtonGroup component."
                }
            }
        },
        "variables": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ToggleButtonGroupClassNames": {
                    "description": "Defines the CSS class names used in the ToggleButtonGroup component.",
                    "variables": [
                        {
                            "name": "root",
                            "value": "p-togglebutton-group",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the root element"
                        }
                    ]
                }
            }
        }
    },
    "togglebuttonindicator": {
        "description": "ToggleButtonIndicator component is used to display the indicator of ToggleButton.\n\n[Live Demo](https://www.primereact.org/togglebutton/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ToggleButtonIndicatorPassThrough": {
                    "description": "Defines passthrough(pt) options of ToggleButtonIndicator component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ToggleButtonIndicatorPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "ToggleButtonIndicatorProps": {
                    "description": "Defines valid properties in ToggleButtonIndicator component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: ToggleButtonIndicatorInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: ToggleButtonIndicatorInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<ToggleButtonIndicatorPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: ToggleButtonIndicatorInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<ToggleButtonIndicatorInstance>"
                },
                "ToggleButtonIndicatorState": {
                    "description": "Defines valid state in ToggleButtonIndicator component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "ToggleButtonIndicatorExposes": {
                    "description": "Defines the methods and properties exposed by ToggleButtonIndicator component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "togglebutton",
                            "optional": false,
                            "readonly": false,
                            "type": "ToggleButtonInstance",
                            "default": "",
                            "description": "The ToggleButton component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ToggleButtonIndicatorPassThroughType": {
                    "values": "PassThroughType<ToggleButtonIndicatorInstance, E>",
                    "description": "Defines passthrough(pt) options type in ToggleButtonIndicator component."
                },
                "ToggleButtonIndicatorInstance": {
                    "values": "ComponentInstance<ToggleButtonIndicatorProps, ToggleButtonIndicatorState, ToggleButtonIndicatorExposes, ToggleButtonIndicatorPassThrough>",
                    "description": "Instance of ToggleButtonIndicator component."
                }
            }
        }
    },
    "usetogglebutton": {
        "description": "The useToggleButton manages the state and functionality of a ToggleButton component.\n\n[Live Demo](https://www.primereact.org/togglebutton/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useToggleButtonChangeEvent": {
                    "description": "Event fired when the ToggleButton's checked state changes.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "E",
                            "default": "",
                            "description": "The original event that triggered the change."
                        },
                        {
                            "name": "pressed",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "The pressed state of the ToggleButton."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "ToggleButtonChangeEvent"
                },
                "useToggleButtonProps": {
                    "description": "Defines valid properties in useToggleButton.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "pressed",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "When present, it specifies that the ToggleButton should be pressed."
                        },
                        {
                            "name": "defaultPressed",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "The default pressed value when not controlled by  `pressed`  and  `onPressedChange` ."
                        },
                        {
                            "name": "onPressedChange",
                            "optional": true,
                            "readonly": false,
                            "type": "(event: useToggleButtonChangeEvent) => void",
                            "default": "",
                            "description": "Callback fired when the ToggleButton's pressed state changes."
                        }
                    ],
                    "methods": []
                },
                "useToggleButtonState": {
                    "description": "Defines valid state in useToggleButton.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "pressed",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "The pressed state of the useToggleButton."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "ToggleButtonState"
                },
                "useToggleButtonExposes": {
                    "description": "Defines the methods and properties exposed by useToggleButton.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "useToggleButtonState",
                            "default": "",
                            "description": "The state of the useToggleButton."
                        },
                        {
                            "name": "onChange",
                            "optional": false,
                            "readonly": false,
                            "type": "(event: useToggleButtonChangeEvent) => void",
                            "default": "",
                            "description": "Callback fired when the useToggleButton's pressed state changes."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "ToggleButtonExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useToggleButtonInstance": {
                    "values": "HeadlessInstance<useToggleButtonProps, useToggleButtonState, useToggleButtonExposes>",
                    "description": "Instance of useToggleButton headless."
                }
            }
        }
    },
    "toolbar": {
        "description": "Toolbar is a grouping component for buttons and other content.\n\n[Live Demo](https://www.primereact.org/toolbar/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ToolbarPassThrough": {
                    "description": "Defines passthrough(pt) options of Toolbar component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ToolbarPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "start",
                            "optional": true,
                            "readonly": false,
                            "type": "ToolbarPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the start's DOM element."
                        },
                        {
                            "name": "center",
                            "optional": true,
                            "readonly": false,
                            "type": "ToolbarPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the center's DOM element."
                        },
                        {
                            "name": "end",
                            "optional": true,
                            "readonly": false,
                            "type": "ToolbarPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the end's DOM element."
                        }
                    ],
                    "methods": []
                },
                "ToolbarProps": {
                    "description": "Defines valid properties in Toolbar component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: ToolbarInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: ToolbarInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<ToolbarPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: ToolbarInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<ToolbarInstance, useToolbarProps>"
                },
                "ToolbarState": {
                    "description": "Defines valid state in Toolbar component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "useToolbarState"
                },
                "ToolbarExposes": {
                    "description": "Defines the methods and properties exposed by Toolbar component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "useToolbarExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ToolbarPassThroughType": {
                    "values": "PassThroughType<ToolbarInstance, E>",
                    "description": "Defines passthrough(pt) options type in Toolbar component."
                },
                "ToolbarClassNamesType": {
                    "values": "typeof ToolbarClassNames[keyof typeof ToolbarClassNames]",
                    "description": "Type representing the CSS class names used in the Toolbar component."
                },
                "ToolbarInstance": {
                    "values": "ComponentInstance<ToolbarProps, ToolbarState, ToolbarExposes, ToolbarPassThrough>",
                    "description": "Instance of Toolbar component."
                }
            }
        },
        "variables": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ToolbarClassNames": {
                    "description": "Defines the CSS class names used in the Toolbar component.",
                    "variables": [
                        {
                            "name": "root",
                            "value": "p-toolbar",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "start",
                            "value": "p-toolbar-start",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the start element"
                        },
                        {
                            "name": "center",
                            "value": "p-toolbar-center",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the center element"
                        },
                        {
                            "name": "end",
                            "value": "p-toolbar-end",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the end element"
                        }
                    ]
                }
            }
        }
    },
    "toolbarcenter": {
        "description": "ToolbarCenter is a container component that displays content at the center  of a Toolbar.\n\n[Live Demo](https://www.primereact.org/toolbar/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ToolbarCenterPassThrough": {
                    "description": "Defines passthrough(pt) options of ToolbarCenter component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ToolbarCenterPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "ToolbarCenterProps": {
                    "description": "Defines valid properties in ToolbarCenter component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: ToolbarCenterInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: ToolbarCenterInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<ToolbarCenterPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: ToolbarCenterInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<ToolbarCenterInstance>"
                },
                "ToolbarCenterState": {
                    "description": "Defines valid state in ToolbarCenter component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "ToolbarCenterExposes": {
                    "description": "Defines the methods and properties exposed by ToolbarCenter component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "toolbar",
                            "optional": false,
                            "readonly": false,
                            "type": "ToolbarInstance",
                            "default": "",
                            "description": "The Toolbar component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ToolbarCenterPassThroughType": {
                    "values": "PassThroughType<ToolbarCenterInstance, E>",
                    "description": "Defines passthrough(pt) options type in ToolbarCenter component."
                },
                "ToolbarCenterClassNamesType": {
                    "values": "typeof ToolbarCenterClassNames[keyof typeof ToolbarCenterClassNames]",
                    "description": "Type representing the CSS class names used in the ToolbarCenter component."
                },
                "ToolbarCenterInstance": {
                    "values": "ComponentInstance<ToolbarCenterProps, ToolbarCenterState, ToolbarCenterExposes, ToolbarCenterPassThrough>",
                    "description": "Instance of ToolbarCenter component."
                }
            }
        },
        "variables": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ToolbarCenterClassNames": {
                    "description": "Defines the CSS class names used in the ToolbarCenter component.",
                    "variables": [
                        {
                            "name": "root",
                            "value": "p-toolbar-center",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the root element"
                        }
                    ]
                }
            }
        }
    },
    "toolbarend": {
        "description": "ToolbarEnd is a container component that displays content at the end  of a Toolbar.\n\n[Live Demo](https://www.primereact.org/toolbar/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ToolbarEndPassThrough": {
                    "description": "Defines passthrough(pt) options of ToolbarEnd component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ToolbarEndPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "ToolbarEndProps": {
                    "description": "Defines valid properties in ToolbarEnd component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: ToolbarEndInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: ToolbarEndInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<ToolbarEndPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: ToolbarEndInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<ToolbarEndInstance>"
                },
                "ToolbarEndState": {
                    "description": "Defines valid state in ToolbarEnd component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "ToolbarEndExposes": {
                    "description": "Defines the methods and properties exposed by ToolbarEnd component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "toolbar",
                            "optional": false,
                            "readonly": false,
                            "type": "ToolbarInstance",
                            "default": "",
                            "description": "The Toolbar component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ToolbarEndPassThroughType": {
                    "values": "PassThroughType<ToolbarEndInstance, E>",
                    "description": "Defines passthrough(pt) options type in ToolbarEnd component."
                },
                "ToolbarEndClassNamesType": {
                    "values": "typeof ToolbarEndClassNames[keyof typeof ToolbarEndClassNames]",
                    "description": "Type representing the CSS class names used in the ToolbarEnd component."
                },
                "ToolbarEndInstance": {
                    "values": "ComponentInstance<ToolbarEndProps, ToolbarEndState, ToolbarEndExposes, ToolbarEndPassThrough>",
                    "description": "Instance of ToolbarEnd component."
                }
            }
        },
        "variables": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ToolbarEndClassNames": {
                    "description": "Defines the CSS class names used in the ToolbarEnd component.",
                    "variables": [
                        {
                            "name": "root",
                            "value": "p-toolbar-end",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the root element"
                        }
                    ]
                }
            }
        }
    },
    "toolbarstart": {
        "description": "ToolbarStart is a container component that displays content at the start  of a Toolbar.\n\n[Live Demo](https://www.primereact.org/toolbar/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ToolbarStartPassThrough": {
                    "description": "Defines passthrough(pt) options of ToolbarStart component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ToolbarStartPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        }
                    ],
                    "methods": []
                },
                "ToolbarStartProps": {
                    "description": "Defines valid properties in ToolbarStart component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ref",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<unknown>",
                            "default": "",
                            "description": "The reference to the component instance."
                        },
                        {
                            "name": "pIf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the component should be rendered."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties | ((instance?: ToolbarStartInstance) => CSSProperties)",
                            "default": "",
                            "description": "The style to apply to the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ((instance?: ToolbarStartInstance) => string)",
                            "default": "",
                            "description": "The class name to apply to the component."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | bigint | boolean | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>> | Iterable<ReactNode, any, any> | ReactPortal | Promise<AwaitedReactNode>",
                            "default": "",
                            "description": "The component type to render."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component should be rendered as a child component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SafeRecord<ToolbarStartPassThrough>",
                            "default": "",
                            "description": "The pass-through props to pass to the component"
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "The pass-through options to pass to the component"
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the component should be rendered without classes."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "unknown",
                            "default": "",
                            "description": "The design token to use for the component."
                        },
                        {
                            "name": "styles",
                            "optional": true,
                            "readonly": false,
                            "type": "StylesOptions<ComponentInstance>",
                            "default": "",
                            "description": "The styles to use for the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | ((instance: ToolbarStartInstance) => ReactNode)",
                            "default": "",
                            "description": "The children to render."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseComponentProps<ToolbarStartInstance>"
                },
                "ToolbarStartState": {
                    "description": "Defines valid state in ToolbarStart component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "ToolbarStartExposes": {
                    "description": "Defines the methods and properties exposed by ToolbarStart component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "toolbar",
                            "optional": false,
                            "readonly": false,
                            "type": "ToolbarInstance",
                            "default": "",
                            "description": "The Toolbar component instance."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ToolbarStartPassThroughType": {
                    "values": "PassThroughType<ToolbarStartInstance, E>",
                    "description": "Defines passthrough(pt) options type in ToolbarStart component."
                },
                "ToolbarStartClassNamesType": {
                    "values": "typeof ToolbarStartClassNames[keyof typeof ToolbarStartClassNames]",
                    "description": "Type representing the CSS class names used in the ToolbarStart component."
                },
                "ToolbarStartInstance": {
                    "values": "ComponentInstance<ToolbarStartProps, ToolbarStartState, ToolbarStartExposes, ToolbarStartPassThrough>",
                    "description": "Instance of ToolbarStart component."
                }
            }
        },
        "variables": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ToolbarStartClassNames": {
                    "description": "Defines the CSS class names used in the ToolbarStart component.",
                    "variables": [
                        {
                            "name": "root",
                            "value": "p-toolbar-start",
                            "optional": false,
                            "readonly": true,
                            "description": "Class name of the root element"
                        }
                    ]
                }
            }
        }
    },
    "usetoolbar": {
        "description": "The useToolbar manages the state and functionality of a toolbar component.\n\n[Live Demo](https://www.primereact.org/toolbar/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useToolbarProps": {
                    "description": "Defines valid properties in useToolbar.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "useToolbarState": {
                    "description": "Defines valid state in useToolbar.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedBy": "ToolbarState"
                },
                "useToolbarExposes": {
                    "description": "Defines the methods and properties exposed by useToolbar.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedBy": "ToolbarExposes"
                }
            }
        },
        "types": {
            "description": "Defines public properties and methods that are exposed by the component to interact with it programmatically.",
            "stateDescription": "Defines the internal state variables that the component manages and updates during its lifecycle.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useToolbarInstance": {
                    "values": "HeadlessInstance<useToolbarProps, useToolbarState, useToolbarExposes>",
                    "description": "Instance of useToolbar headless."
                }
            }
        }
    }
}
