{
    "accordion": {
        "description": "Accordion groups a collection of contents in tabs.\n\n[Live Demo](https://www.primereact.org/accordion/)\n\nHelper Components:\n\n-  AccordionTab",
        "components": {
            "AccordionTab": {
                "description": "AccordionTab is a helper component for Accordion.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                },
                "props": {
                    "description": "Defines valid properties in AccordionTab component.",
                    "values": [
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the tab header and content."
                        },
                        {
                            "name": "contentClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the tab content."
                        },
                        {
                            "name": "contentStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the tab content."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the tab is disabled."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to define the header of the tab."
                        },
                        {
                            "name": "headerClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the tab header."
                        },
                        {
                            "name": "headerStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the tab header."
                        },
                        {
                            "name": "headerTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Custom header template of the tab."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the tab header and content."
                        },
                        {
                            "name": "tabIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "AccordionTabPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            },
            "Accordion": {
                "description": "Accordion groups a collection of contents in tabs.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in Accordion component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "values": [
                        {
                            "name": "activeIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "null | number | number[]",
                            "default": "",
                            "description": "Active index or indexes of the element. Use an array of numbers for multiple indexes.\nThe  multiple  prop must be set to true in order to specify multiple indexes."
                        },
                        {
                            "name": "multiple",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, multiple tabs can be activated at the same time."
                        },
                        {
                            "name": "expandIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<AccordionProps>",
                            "default": "",
                            "description": "Icon of a collapsed tab."
                        },
                        {
                            "name": "collapseIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<AccordionProps>",
                            "default": "",
                            "description": "Icon of an expanded tab."
                        },
                        {
                            "name": "transitionOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSTransitionProps",
                            "default": "",
                            "description": "The properties of CSSTransition can be customized, except for \"nodeRef\" and \"in\" properties."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "AccordionPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onTabOpen",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "AccordionTabOpenEvent",
                                    "description": "Custom tab open event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a tab gets expanded."
                        },
                        {
                            "name": "onTabClose",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "AccordionTabCloseEvent",
                                    "description": "Custom tab close event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when an active tab is collapsed by clicking on the header."
                        },
                        {
                            "name": "onTabChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "AccordionTabChangeEvent",
                                    "description": "Custom tab close event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when state of the accordion changes."
                        }
                    ]
                }
            }
        },
        "events": {
            "description": "Defines the custom events used by the component's callbacks.",
            "values": {
                "AccordionTabOpenEvent": {
                    "description": "Custom tab open event.",
                    "relatedProp": "onTabOpen",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "MouseEvent<HTMLElement, MouseEvent>",
                            "description": "Browser mouse event."
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Opened tab index."
                        }
                    ],
                    "extendedBy": "AccordionTabCloseEvent"
                },
                "AccordionTabCloseEvent": {
                    "description": "Custom tab close event.",
                    "relatedProp": "onTabClose",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "MouseEvent<HTMLElement, MouseEvent>",
                            "description": "Browser mouse event."
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Opened tab index."
                        }
                    ]
                },
                "AccordionTabChangeEvent": {
                    "description": "Custom tab change event.",
                    "relatedProp": "onTabChange",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "MouseEvent<HTMLElement, MouseEvent>",
                            "description": "Browser mouse event."
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number | number[]",
                            "description": "Opened tab index."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "AccordionTabPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "AccordionTabProps"
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "AccordionPassThroughMethodOptions"
                        }
                    ],
                    "callbacks": []
                },
                "AccordionTabPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "AccordionTabPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "AccordionTabPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "headerAction",
                            "optional": true,
                            "readonly": false,
                            "type": "AccordionTabPassThroughType<HTMLAttributes<HTMLAnchorElement>>",
                            "description": "Uses to pass attributes to the headeraction's DOM element."
                        },
                        {
                            "name": "headerIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "AccordionTabPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the headericon's DOM element."
                        },
                        {
                            "name": "headerTitle",
                            "optional": true,
                            "readonly": false,
                            "type": "AccordionTabPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the headertitle's DOM element."
                        },
                        {
                            "name": "toggleableContent",
                            "optional": true,
                            "readonly": false,
                            "type": "AccordionTabPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the toggleablecontent's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "AccordionTabPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the content's DOM element."
                        }
                    ],
                    "callbacks": []
                },
                "AccordionPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "AccordionProps"
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "AccordionState"
                        }
                    ],
                    "callbacks": []
                },
                "AccordionPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "AccordionPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        }
                    ],
                    "callbacks": []
                },
                "AccordionState": {
                    "description": "Defines current inline state in Accordion component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Current id state as a string"
                        },
                        {
                            "name": "activeIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number | number[]",
                            "description": "Current active index state."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "AccordionPassThroughType": {
                    "values": "PassThroughType<T, AccordionPassThroughMethodOptions>"
                },
                "AccordionTabPassThroughType": {
                    "values": "PassThroughType<T, AccordionTabPassThroughMethodOptions>"
                }
            }
        }
    },
    "api": {
        "description": "API for PrimeReact components.",
        "functions": {
            "description": "Defines the custom functions used by the module.",
            "values": {
                "PrimeReactProvider": {
                    "name": "PrimeReactProvider",
                    "parameters": [
                        {
                            "name": "props",
                            "type": "PrimeReactProviderProps"
                        },
                        {
                            "name": "context",
                            "type": "any"
                        }
                    ],
                    "returnType": "null | ReactElement<any, any>"
                },
                "locale": {
                    "name": "locale",
                    "parameters": [
                        {
                            "name": "locale",
                            "type": "string",
                            "description": "Locale string."
                        }
                    ],
                    "returnType": "Object",
                    "description": "Sets the current locale if installed."
                },
                "addLocale": {
                    "name": "addLocale",
                    "parameters": [
                        {
                            "name": "locale",
                            "type": "string",
                            "description": "Locale string."
                        },
                        {
                            "name": "options",
                            "type": "LocaleOptions",
                            "description": "Locale options. See [PrimeLocale](https://github.com/primefaces/primelocale) on GitHub for possible options."
                        }
                    ],
                    "returnType": "void",
                    "description": "Installs a new locale."
                },
                "updateLocaleOption": {
                    "name": "updateLocaleOption",
                    "parameters": [
                        {
                            "name": "key",
                            "type": "string",
                            "description": "Option key."
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "description": "Option value."
                        },
                        {
                            "name": "locale",
                            "type": "string",
                            "description": "Locale string."
                        }
                    ],
                    "returnType": "void",
                    "description": "Changes the specific option value of a locale."
                },
                "updateLocaleOptions": {
                    "name": "updateLocaleOptions",
                    "parameters": [
                        {
                            "name": "options",
                            "type": "object",
                            "description": "Locale options."
                        },
                        {
                            "name": "locale",
                            "type": "string",
                            "description": "Locale string."
                        }
                    ],
                    "returnType": "void",
                    "description": "Changes the option values of a locale."
                },
                "localeOption": {
                    "name": "localeOption",
                    "parameters": [
                        {
                            "name": "key",
                            "type": "string",
                            "description": "Option key."
                        },
                        {
                            "name": "locale",
                            "type": "string",
                            "description": "Locale string."
                        }
                    ],
                    "returnType": "any",
                    "description": "Return the value of a specific locale option."
                },
                "localeOptions": {
                    "name": "localeOptions",
                    "parameters": [
                        {
                            "name": "locale",
                            "type": "string",
                            "description": "Locale string."
                        }
                    ],
                    "returnType": "object",
                    "description": "Returns the values of locale options."
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "ZIndexOptions": {
                    "description": "ZIndex configuration options.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "modal",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Sets the base index value for Dialog and Sidebar components."
                        },
                        {
                            "name": "overlay",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Sets the base index value for Overlay components such as Dropdown and OverlayPanel."
                        },
                        {
                            "name": "menu",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Sets the base index value for Overlay menus."
                        },
                        {
                            "name": "tooltip",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Sets the base index value for Tooltip."
                        },
                        {
                            "name": "toast",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Sets the base index value for Toast."
                        }
                    ],
                    "callbacks": []
                },
                "FilterMatchModeOptions": {
                    "description": "Filter match modes for DataTable filter menus.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "text",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "description": "Array of filter match modes for text filtering."
                        },
                        {
                            "name": "numeric",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "description": "Array of filter match modes for numeric filtering."
                        },
                        {
                            "name": "date",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "description": "Array of filter match modes for date filtering."
                        }
                    ],
                    "callbacks": []
                },
                "APIOptions": {
                    "description": "Configuration options for the PrimeReact components.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "AppendToType",
                            "description": "This option allows components with overlays like dropdowns or popups to be mounted into either the component or any DOM element, such as document body and self."
                        },
                        {
                            "name": "autoZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "ZIndexes are managed automatically to make sure layering of overlay components work seamlessly when combining multiple components. When autoZIndex is false, each group increments its zIndex within itself."
                        },
                        {
                            "name": "cssTransition",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "PrimeReact components utilize \"react-transition-group\" internally to implement animations. Setting \"cssTransition\" to \"false\" disables all animations."
                        },
                        {
                            "name": "filterMatchModeOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "FilterMatchModeOptions",
                            "description": "Default filter modes to display on DataTable filter menus."
                        },
                        {
                            "name": "hideOverlaysOnDocumentScrolling",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Define behavior if the browser window is scrolled while displaying an overlay panel like a Dropdown or Calendar. Depending on your organization's accessibility needs some prefer panels to be closed on scrolling and some prefer the overlay follow the scroll."
                        },
                        {
                            "name": "inputStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "InputStyleType",
                            "description": "Input fields have two styles: default (outlined with borders) and filled (background-colored). Applying 'p-input-filled' to an input's ancestor enables the filled style."
                        },
                        {
                            "name": "locale",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "The locale configuration sets up the language and region specific preferences."
                        },
                        {
                            "name": "nonce",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "The nonce value to use on dynamically generated style elements."
                        },
                        {
                            "name": "nullSortOrder",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "description": "Determines how null values are sorted."
                        },
                        {
                            "name": "ripple",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Ripple is an optional animation for the supported components such as buttons."
                        },
                        {
                            "name": "zIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "ZIndexOptions",
                            "description": "ZIndexes are managed automatically to make sure layering of overlay components work seamlessly when combining multiple components. When autoZIndex is false, each group increments its zIndex within itself."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PrimeReactPTOptions",
                            "description": "This option allows to direct implementation of all relevant attributes (e.g., style, classnames) within the respective HTML tag."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean"
                        },
                        {
                            "name": "setAppendTo",
                            "optional": false,
                            "readonly": false,
                            "type": "Dispatch<SetStateAction<AppendToType>>",
                            "description": "Sets the \"appendTo\" state of the context."
                        },
                        {
                            "name": "setAutoZIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "Dispatch<SetStateAction<boolean>>",
                            "description": "Sets the \"autoZIndex\" state of the context."
                        },
                        {
                            "name": "setCssTransition",
                            "optional": false,
                            "readonly": false,
                            "type": "Dispatch<SetStateAction<boolean>>",
                            "description": "Sets the \"cssTransition\" state of the context."
                        },
                        {
                            "name": "setFilterMatchModeOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "Dispatch<SetStateAction<FilterMatchModeOptions>>",
                            "description": "Sets the \"filterMatchModeOptions\" state of the context."
                        },
                        {
                            "name": "setHideOverlaysOnDocumentScrolling",
                            "optional": false,
                            "readonly": false,
                            "type": "Dispatch<SetStateAction<boolean>>",
                            "description": "Sets the \"hideOverlaysOnDocumentScrolling\" state of the context."
                        },
                        {
                            "name": "setInputStyle",
                            "optional": false,
                            "readonly": false,
                            "type": "Dispatch<SetStateAction<InputStyleType>>",
                            "description": "Sets the \"inputStyle\" state of the context."
                        },
                        {
                            "name": "setLocale",
                            "optional": false,
                            "readonly": false,
                            "type": "Dispatch<SetStateAction<string>>",
                            "description": "Sets the \"locale\" state of the context."
                        },
                        {
                            "name": "setNonce",
                            "optional": false,
                            "readonly": false,
                            "type": "Dispatch<SetStateAction<string>>",
                            "description": "Sets the \"nonce\" state of the context."
                        },
                        {
                            "name": "setNullSortOrder",
                            "optional": false,
                            "readonly": false,
                            "type": "Dispatch<SetStateAction<number>>",
                            "description": "Sets the \"nullSortOrder\" state of the context."
                        },
                        {
                            "name": "setRipple",
                            "optional": false,
                            "readonly": false,
                            "type": "Dispatch<SetStateAction<boolean>>",
                            "description": "Sets the \"ripple\" state of the context."
                        },
                        {
                            "name": "setZIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "Dispatch<SetStateAction<ZIndexOptions>>",
                            "description": "Sets the \"zIndex\" state of the context."
                        },
                        {
                            "name": "setPt",
                            "optional": false,
                            "readonly": false,
                            "type": "Dispatch<SetStateAction<PrimeReactPTOptions>>",
                            "description": "Sets the \"pt\" state of the context."
                        }
                    ],
                    "callbacks": [
                        {
                            "name": "changeTheme",
                            "parameters": [
                                {
                                    "name": "theme",
                                    "optional": true,
                                    "type": "string",
                                    "description": "The name of the theme to be applied."
                                },
                                {
                                    "name": "newTheme",
                                    "optional": true,
                                    "type": "string",
                                    "description": "The name of the new theme to be applied."
                                },
                                {
                                    "name": "linkElementId",
                                    "optional": true,
                                    "type": "string",
                                    "description": "The id of the link element to be updated."
                                },
                                {
                                    "name": "callback",
                                    "optional": true,
                                    "type": "Function",
                                    "description": "Callback to invoke when the theme change is completed."
                                }
                            ],
                            "returnType": "void",
                            "description": "This method is used to change the theme dynamically."
                        }
                    ]
                },
                "PrimeReactPTOptions": {
                    "description": "This option allows to direct implementation of all relevant attributes (e.g., style, classnames) within the respective HTML tag globally for all components.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "accordion",
                            "optional": true,
                            "readonly": false,
                            "type": "AccordionPassThroughOptions",
                            "description": "Custom passthrough(pt) options for Accordion."
                        },
                        {
                            "name": "accordiontab",
                            "optional": true,
                            "readonly": false,
                            "type": "AccordionTabPassThroughOptions",
                            "description": "Custom passthrough(pt) options for AccordionTab."
                        },
                        {
                            "name": "autocomplete",
                            "optional": true,
                            "readonly": false,
                            "type": "AutoCompletePassThroughOptions",
                            "description": "Custom passthrough(pt) options for AutoComplete."
                        },
                        {
                            "name": "avatar",
                            "optional": true,
                            "readonly": false,
                            "type": "AvatarPassThroughOptions",
                            "description": "Custom passthrough(pt) options for Avatar."
                        },
                        {
                            "name": "avatargroup",
                            "optional": true,
                            "readonly": false,
                            "type": "AvatarGroupPassThroughOptions",
                            "description": "Custom passthrough(pt) options for AvatarGroup."
                        },
                        {
                            "name": "badge",
                            "optional": true,
                            "readonly": false,
                            "type": "BadgePassThroughOptions",
                            "description": "Custom passthrough(pt) options for Badge."
                        },
                        {
                            "name": "blockui",
                            "optional": true,
                            "readonly": false,
                            "type": "BlockUIPassThroughOptions",
                            "description": "Custom passthrough(pt) options for BlockUI."
                        },
                        {
                            "name": "breadcrumb",
                            "optional": true,
                            "readonly": false,
                            "type": "BreadCrumbPassThroughOptions",
                            "description": "Custom passthrough(pt) options for Breadcrumb."
                        },
                        {
                            "name": "button",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions",
                            "description": "Custom passthrough(pt) options for Button."
                        },
                        {
                            "name": "calendar",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughOptions",
                            "description": "Custom passthrough(pt) options for Calendar."
                        },
                        {
                            "name": "card",
                            "optional": true,
                            "readonly": false,
                            "type": "CardPassThroughOptions",
                            "description": "Custom passthrough(pt) options for Card."
                        },
                        {
                            "name": "carousel",
                            "optional": true,
                            "readonly": false,
                            "type": "CarouselPassThroughOptions",
                            "description": "Custom passthrough(pt) options for Carousel."
                        },
                        {
                            "name": "cascadeselect",
                            "optional": true,
                            "readonly": false,
                            "type": "CascadeSelectPassThroughOptions",
                            "description": "Custom passthrough(pt) options for CascadeSelect."
                        },
                        {
                            "name": "chart",
                            "optional": true,
                            "readonly": false,
                            "type": "ChartPassThroughOptions",
                            "description": "Custom passthrough(pt) options for Chart."
                        },
                        {
                            "name": "checkbox",
                            "optional": true,
                            "readonly": false,
                            "type": "CheckboxPassThroughOptions",
                            "description": "Custom passthrough(pt) options for Checkbox."
                        },
                        {
                            "name": "chip",
                            "optional": true,
                            "readonly": false,
                            "type": "ChipPassThroughOptions",
                            "description": "Custom passthrough(pt) options for Chip."
                        },
                        {
                            "name": "chips",
                            "optional": true,
                            "readonly": false,
                            "type": "ChipsPassThroughOptions",
                            "description": "Custom passthrough(pt) options for Chips."
                        },
                        {
                            "name": "colorpicker",
                            "optional": true,
                            "readonly": false,
                            "type": "ColorPickerPassThroughOptions",
                            "description": "Custom passthrough(pt) options for ColorPicker."
                        },
                        {
                            "name": "column",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptions",
                            "description": "Custom passthrough(pt) options for Column."
                        },
                        {
                            "name": "columngroup",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnGroupPassThroughOptions",
                            "description": "Custom passthrough(pt) options for ColumnGroup."
                        },
                        {
                            "name": "confirmdialog",
                            "optional": true,
                            "readonly": false,
                            "type": "ConfirmDialogPassThroughOptions",
                            "description": "Custom passthrough(pt) options for ConfirmDialog."
                        },
                        {
                            "name": "confirmpopup",
                            "optional": true,
                            "readonly": false,
                            "type": "ConfirmPopupPassThroughOptions",
                            "description": "Custom passthrough(pt) options for ConfirmPopup."
                        },
                        {
                            "name": "contextmenu",
                            "optional": true,
                            "readonly": false,
                            "type": "ContextMenuPassThroughOptions",
                            "description": "Custom passthrough(pt) options for ContextMenu."
                        },
                        {
                            "name": "datatable",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughOptions",
                            "description": "Custom passthrough(pt) options for DataTable."
                        },
                        {
                            "name": "dataview",
                            "optional": true,
                            "readonly": false,
                            "type": "DataViewPassThroughOptions",
                            "description": "Custom passthrough(pt) options for DataView."
                        },
                        {
                            "name": "dataviewlayoutoptions",
                            "optional": true,
                            "readonly": false,
                            "type": "DataViewLayoutOptionsPassThroughOptions",
                            "description": "Custom passthrough(pt) options for DataViewLayoutOptions."
                        },
                        {
                            "name": "deferredcontent",
                            "optional": true,
                            "readonly": false,
                            "type": "DeferredContentPassThroughOptions",
                            "description": "Custom passthrough(pt) options for DeferredContent."
                        },
                        {
                            "name": "dialog",
                            "optional": true,
                            "readonly": false,
                            "type": "DialogPassThroughOptions",
                            "description": "Custom passthrough(pt) options for Dialog."
                        },
                        {
                            "name": "divider",
                            "optional": true,
                            "readonly": false,
                            "type": "DividerPassThroughOptions",
                            "description": "Custom passthrough(pt) options for Divider."
                        },
                        {
                            "name": "dock",
                            "optional": true,
                            "readonly": false,
                            "type": "DockPassThroughOptions",
                            "description": "Custom passthrough(pt) options for Dock."
                        },
                        {
                            "name": "dropdown",
                            "optional": true,
                            "readonly": false,
                            "type": "DropdownPassThroughOptions",
                            "description": "Custom passthrough(pt) options for Dropdown."
                        },
                        {
                            "name": "editor",
                            "optional": true,
                            "readonly": false,
                            "type": "EditorPassThroughOptions",
                            "description": "Custom passthrough(pt) options for Editor."
                        },
                        {
                            "name": "fieldset",
                            "optional": true,
                            "readonly": false,
                            "type": "FieldsetPassThroughOptions",
                            "description": "Custom passthrough(pt) options for Fieldset."
                        },
                        {
                            "name": "fileupload",
                            "optional": true,
                            "readonly": false,
                            "type": "FileUploadPassThroughOptions",
                            "description": "Custom passthrough(pt) options for FileUpload."
                        },
                        {
                            "name": "galleria",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughOptions",
                            "description": "Custom passthrough(pt) options for FullCalendar."
                        },
                        {
                            "name": "image",
                            "optional": true,
                            "readonly": false,
                            "type": "ImagePassThroughOptions",
                            "description": "Custom passthrough(pt) options for Galleria."
                        },
                        {
                            "name": "inplace",
                            "optional": true,
                            "readonly": false,
                            "type": "InplacePassThroughOptions",
                            "description": "Custom passthrough(pt) options for Inplace."
                        },
                        {
                            "name": "inputmask",
                            "optional": true,
                            "readonly": false,
                            "type": "InputTextPassThroughOptions",
                            "description": "Custom passthrough(pt) options for InputMask."
                        },
                        {
                            "name": "inputnumber",
                            "optional": true,
                            "readonly": false,
                            "type": "InputNumberPassThroughOptions",
                            "description": "Custom passthrough(pt) options for InputNumber."
                        },
                        {
                            "name": "inputswitch",
                            "optional": true,
                            "readonly": false,
                            "type": "InputSwitchPassThroughOptions",
                            "description": "Custom passthrough(pt) options for InputSwitch."
                        },
                        {
                            "name": "inputtext",
                            "optional": true,
                            "readonly": false,
                            "type": "InputTextPassThroughOptions",
                            "description": "Custom passthrough(pt) options for InputText."
                        },
                        {
                            "name": "inputtextarea",
                            "optional": true,
                            "readonly": false,
                            "type": "InputTextareaPassThroughOptions",
                            "description": "Custom passthrough(pt) options for InputTextarea."
                        },
                        {
                            "name": "knob",
                            "optional": true,
                            "readonly": false,
                            "type": "KnobPassThroughOptions",
                            "description": "Custom passthrough(pt) options for Knob."
                        },
                        {
                            "name": "listbox",
                            "optional": true,
                            "readonly": false,
                            "type": "ListboxPassThroughOptions",
                            "description": "Custom passthrough(pt) options for Listbox."
                        },
                        {
                            "name": "megamenu",
                            "optional": true,
                            "readonly": false,
                            "type": "MegaMenuPassThroughOptions",
                            "description": "Custom passthrough(pt) options for MegaMenu."
                        },
                        {
                            "name": "mention",
                            "optional": true,
                            "readonly": false,
                            "type": "MentionPassThroughOptions",
                            "description": "Custom passthrough(pt) options for Mention."
                        },
                        {
                            "name": "menu",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuPassThroughOptions",
                            "description": "Custom passthrough(pt) options for Menu."
                        },
                        {
                            "name": "menubar",
                            "optional": true,
                            "readonly": false,
                            "type": "MenubarPassThroughOptions",
                            "description": "Custom passthrough(pt) options for Menubar."
                        },
                        {
                            "name": "message",
                            "optional": true,
                            "readonly": false,
                            "type": "MessagePassThroughOptions",
                            "description": "Custom passthrough(pt) options for Message."
                        },
                        {
                            "name": "messages",
                            "optional": true,
                            "readonly": false,
                            "type": "MessagesPassThroughOptions",
                            "description": "Custom passthrough(pt) options for Messages."
                        },
                        {
                            "name": "multiselect",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughOptions",
                            "description": "Custom passthrough(pt) options for MultiSelect."
                        },
                        {
                            "name": "multisatecheckbox",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiStateCheckboxPassThroughOptions",
                            "description": "Custom passthrough(pt) options for MultiStateCheckbox."
                        },
                        {
                            "name": "orderlist",
                            "optional": true,
                            "readonly": false,
                            "type": "OrderListPassThroughOptions",
                            "description": "Custom passthrough(pt) options for OrderList."
                        },
                        {
                            "name": "organizationchart",
                            "optional": true,
                            "readonly": false,
                            "type": "OrganizationChartPassThroughOptions",
                            "description": "Custom passthrough(pt) options for OrganizationChart."
                        },
                        {
                            "name": "overlaypanel",
                            "optional": true,
                            "readonly": false,
                            "type": "OverlayPanelPassThroughOptions",
                            "description": "Custom passthrough(pt) options for OverlayPanel."
                        },
                        {
                            "name": "paginator",
                            "optional": true,
                            "readonly": false,
                            "type": "PaginatorPassThroughOptions",
                            "description": "Custom passthrough(pt) options for Paginator."
                        },
                        {
                            "name": "panel",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelPassThroughOptions",
                            "description": "Custom passthrough(pt) options for Panel."
                        },
                        {
                            "name": "panelmenu",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelMenuPassThroughOptions",
                            "description": "Custom passthrough(pt) options for PanelMenu."
                        },
                        {
                            "name": "password",
                            "optional": true,
                            "readonly": false,
                            "type": "PasswordPassThroughOptions",
                            "description": "Custom passthrough(pt) options for Password."
                        },
                        {
                            "name": "picklist",
                            "optional": true,
                            "readonly": false,
                            "type": "PickListPassThroughOptions",
                            "description": "Custom passthrough(pt) options for PickList."
                        },
                        {
                            "name": "progressbar",
                            "optional": true,
                            "readonly": false,
                            "type": "ProgressBarPassThroughOptions",
                            "description": "Custom passthrough(pt) options for ProgressBar."
                        },
                        {
                            "name": "progressspinner",
                            "optional": true,
                            "readonly": false,
                            "type": "ProgressSpinnerPassThroughOptions",
                            "description": "Custom passthrough(pt) options for ProgressSpinner."
                        },
                        {
                            "name": "radiobutton",
                            "optional": true,
                            "readonly": false,
                            "type": "RadioButtonPassThroughOptions",
                            "description": "Custom passthrough(pt) options for RadioButton."
                        },
                        {
                            "name": "rating",
                            "optional": true,
                            "readonly": false,
                            "type": "RatingPassThroughOptions",
                            "description": "Custom passthrough(pt) options for Rating."
                        },
                        {
                            "name": "row",
                            "optional": true,
                            "readonly": false,
                            "type": "RowPassThroughOptions",
                            "description": "Custom passthrough(pt) options for Row."
                        },
                        {
                            "name": "scrollpanel",
                            "optional": true,
                            "readonly": false,
                            "type": "ScrollPanelPassThroughOptions",
                            "description": "Custom passthrough(pt) options for ScrollPanel."
                        },
                        {
                            "name": "scrolltop",
                            "optional": true,
                            "readonly": false,
                            "type": "ScrollTopPassThroughOptions",
                            "description": "Custom passthrough(pt) options for ScrollTop."
                        },
                        {
                            "name": "selectbutton",
                            "optional": true,
                            "readonly": false,
                            "type": "SelectButtonPassThroughOptions",
                            "description": "Custom passthrough(pt) options for SelectButton."
                        },
                        {
                            "name": "sidebar",
                            "optional": true,
                            "readonly": false,
                            "type": "SidebarPassThroughOptions",
                            "description": "Custom passthrough(pt) options for Sidebar."
                        },
                        {
                            "name": "skeleton",
                            "optional": true,
                            "readonly": false,
                            "type": "SkeletonPassThroughOptions",
                            "description": "Custom passthrough(pt) options for Skeleton."
                        },
                        {
                            "name": "slidemenu",
                            "optional": true,
                            "readonly": false,
                            "type": "SlideMenuPassThroughOptions",
                            "description": "Custom passthrough(pt) options for SliderMenu."
                        },
                        {
                            "name": "slider",
                            "optional": true,
                            "readonly": false,
                            "type": "SliderPassThroughOptions",
                            "description": "Custom passthrough(pt) options for Slider."
                        },
                        {
                            "name": "speeddial",
                            "optional": true,
                            "readonly": false,
                            "type": "SpeedDialPassThroughOptions",
                            "description": "Custom passthrough(pt) options for SpeedDial."
                        },
                        {
                            "name": "splitbutton",
                            "optional": true,
                            "readonly": false,
                            "type": "SplitButtonPassThroughOptions",
                            "description": "Custom passthrough(pt) options for SplitButton."
                        },
                        {
                            "name": "splitter",
                            "optional": true,
                            "readonly": false,
                            "type": "SplitterPassThroughOptions",
                            "description": "Custom passthrough(pt) options for Splitter."
                        },
                        {
                            "name": "steps",
                            "optional": true,
                            "readonly": false,
                            "type": "StepsPassThroughOptions",
                            "description": "Custom passthrough(pt) options for Steps."
                        },
                        {
                            "name": "tabmenu",
                            "optional": true,
                            "readonly": false,
                            "type": "TabMenuPassThroughOptions",
                            "description": "Custom passthrough(pt) options for TabMenu."
                        },
                        {
                            "name": "tabpanel",
                            "optional": true,
                            "readonly": false,
                            "type": "TabPanelPassThroughOptions",
                            "description": "Custom passthrough(pt) options for TabPanel."
                        },
                        {
                            "name": "tabview",
                            "optional": true,
                            "readonly": false,
                            "type": "TabViewPassThroughOptions",
                            "description": "Custom passthrough(pt) options for TabView."
                        },
                        {
                            "name": "tag",
                            "optional": true,
                            "readonly": false,
                            "type": "TagPassThroughOptions",
                            "description": "Custom passthrough(pt) options for Tag."
                        },
                        {
                            "name": "terminal",
                            "optional": true,
                            "readonly": false,
                            "type": "TerminalPassThroughOptions",
                            "description": "Custom passthrough(pt) options for Terminal."
                        },
                        {
                            "name": "tieredmenu",
                            "optional": true,
                            "readonly": false,
                            "type": "TieredMenuPassThroughOptions",
                            "description": "Custom passthrough(pt) options for TieredMenu."
                        },
                        {
                            "name": "timeline",
                            "optional": true,
                            "readonly": false,
                            "type": "TimelinePassThroughOptions",
                            "description": "Custom passthrough(pt) options for Timeline."
                        },
                        {
                            "name": "toast",
                            "optional": true,
                            "readonly": false,
                            "type": "ToastPassThroughOptions",
                            "description": "Custom passthrough(pt) options for Toast."
                        },
                        {
                            "name": "togglebutton",
                            "optional": true,
                            "readonly": false,
                            "type": "ToggleButtonPassThroughOptions",
                            "description": "Custom passthrough(pt) options for ToffleButton."
                        },
                        {
                            "name": "toolbar",
                            "optional": true,
                            "readonly": false,
                            "type": "ToolbarPassThroughOptions",
                            "description": "Custom passthrough(pt) options for Toolbar."
                        },
                        {
                            "name": "tooltip",
                            "optional": true,
                            "readonly": false,
                            "type": "TooltipPassThroughOptions",
                            "description": "Custom passthrough(pt) options for Tooltip."
                        },
                        {
                            "name": "tree",
                            "optional": true,
                            "readonly": false,
                            "type": "TreePassThroughOptions",
                            "description": "Custom passthrough(pt) options for Tree."
                        },
                        {
                            "name": "treeselect",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeSelectPassThroughOptions",
                            "description": "Custom passthrough(pt) options for TreeSelect."
                        },
                        {
                            "name": "treetable",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughOptions",
                            "description": "Custom passthrough(pt) options for TreeTable."
                        },
                        {
                            "name": "virtualscroller",
                            "optional": true,
                            "readonly": false,
                            "type": "VirtualScrollerPassThroughOptions",
                            "description": "Custom passthrough(pt) options for VirtualScroller."
                        }
                    ],
                    "callbacks": []
                },
                "LocaleOptions": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "startsWith",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Starts with"
                        },
                        {
                            "name": "contains",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Contains"
                        },
                        {
                            "name": "notContains",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Not contains"
                        },
                        {
                            "name": "endsWith",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Ends with"
                        },
                        {
                            "name": "equals",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Equals"
                        },
                        {
                            "name": "notEquals",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Not equals"
                        },
                        {
                            "name": "noFilter",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "No Filter"
                        },
                        {
                            "name": "filter",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Filter"
                        },
                        {
                            "name": "lt",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Less than"
                        },
                        {
                            "name": "lte",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Less than or equal to"
                        },
                        {
                            "name": "gt",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Greater than"
                        },
                        {
                            "name": "gte",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Greater than or equal to"
                        },
                        {
                            "name": "dateIs",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Date is"
                        },
                        {
                            "name": "dateIsNot",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Date is not"
                        },
                        {
                            "name": "dateBefore",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Date is before"
                        },
                        {
                            "name": "dateAfter",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Date is after"
                        },
                        {
                            "name": "custom",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Custom"
                        },
                        {
                            "name": "clear",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Clear"
                        },
                        {
                            "name": "apply",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Apply"
                        },
                        {
                            "name": "matchAll",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Match All"
                        },
                        {
                            "name": "matchAny",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Match Any"
                        },
                        {
                            "name": "addRule",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Add Rule"
                        },
                        {
                            "name": "removeRule",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Remove Rule"
                        },
                        {
                            "name": "accept",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Yes"
                        },
                        {
                            "name": "reject",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "No"
                        },
                        {
                            "name": "choose",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Choose"
                        },
                        {
                            "name": "upload",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Upload"
                        },
                        {
                            "name": "cancel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Cancel"
                        },
                        {
                            "name": "close",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Close"
                        },
                        {
                            "name": "dayNames",
                            "optional": true,
                            "readonly": false,
                            "type": "string[]",
                            "description": "['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']"
                        },
                        {
                            "name": "dayNamesShort",
                            "optional": true,
                            "readonly": false,
                            "type": "string[]",
                            "description": "['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']"
                        },
                        {
                            "name": "dayNamesMin",
                            "optional": true,
                            "readonly": false,
                            "type": "string[]",
                            "description": "['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa']"
                        },
                        {
                            "name": "monthNames",
                            "optional": true,
                            "readonly": false,
                            "type": "string[]",
                            "description": "['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']"
                        },
                        {
                            "name": "monthNamesShort",
                            "optional": true,
                            "readonly": false,
                            "type": "string[]",
                            "description": "['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']"
                        },
                        {
                            "name": "today",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Today"
                        },
                        {
                            "name": "weekHeader",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Wk"
                        },
                        {
                            "name": "firstDayOfWeek",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "description": "0"
                        },
                        {
                            "name": "dateFormat",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "mm/dd/yy"
                        },
                        {
                            "name": "weak",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Weak"
                        },
                        {
                            "name": "medium",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Medium"
                        },
                        {
                            "name": "strong",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Strong"
                        },
                        {
                            "name": "passwordPrompt",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Enter a password"
                        },
                        {
                            "name": "emptyFilterMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "No available options"
                        },
                        {
                            "name": "emptyMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "No results found"
                        },
                        {
                            "name": "aria",
                            "optional": true,
                            "readonly": false,
                            "type": "Object",
                            "description": "True"
                        }
                    ],
                    "callbacks": []
                },
                "PrimeIconsOptions": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ALIGN_CENTER",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "ALIGN_JUSTIFY",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "ALIGN_LEFT",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "ALIGN_RIGHT",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "AMAZON",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "ANDROID",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "ANGLE_DOUBLE_DOWN",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "ANGLE_DOUBLE_LEFT",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "ANGLE_DOUBLE_RIGHT",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "ANGLE_DOUBLE_UP",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "ANGLE_DOWN",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "ANGLE_LEFT",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "ANGLE_RIGHT",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "ANGLE_UP",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "APPLE",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "ARROW_CIRCLE_DOWN",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "ARROW_CIRCLE_LEFT",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "ARROW_CIRCLE_RIGHT",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "ARROW_CIRCLE_UP",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "ARROW_DOWN",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "ARROW_DOWN_LEFT",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "ARROW_DOWN_RIGHT",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "ARROW_LEFT",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "ARROW_RIGHT",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "ARROW_UP",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "ARROW_UP_LEFT",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "ARROW_UP_RIGHT",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "ARROWS_H",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "ARROWS_V",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "AT",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "BACKWARD",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "BAN",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "BARS",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "BELL",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "BOLT",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "BOOK",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "BOOKMARK",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "BOOKMARK_FILL",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "BOX",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "BRIEFCASE",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "BUILDING",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "CALENDAR",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "CALENDAR_MINUS",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "CALENDAR_PLUS",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "CALENDAR_TIMES",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "CAMERA",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "CAR",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "CARET_DOWN",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "CARET_LEFT",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "CARET_RIGHT",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "CARET_UP",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "CHART_BAR",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "CHART_LINE",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "CHART_PIE",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "CHECK",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "CHECK_CIRCLE",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "CHECK_SQUARE",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "CHEVRON_CIRCLE_DOWN",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "CHEVRON_CIRCLE_LEFT",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "CHEVRON_CIRCLE_RIGHT",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "CHEVRON_CIRCLE_UP",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "CHEVRON_DOWN",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "CHEVRON_LEFT",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "CHEVRON_RIGHT",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "CHEVRON_UP",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "CIRCLE",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "CIRCLE_FILL",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "CLOCK",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "CLONE",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "CLOUD",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "CLOUD_DOWNLOAD",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "CLOUD_UPLOAD",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "CODE",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "COG",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "COMMENT",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "COMMENTS",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "COMPASS",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "COPY",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "CREDIT_CARD",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "DATABASE",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "DESKTOP",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "DIRECTIONS",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "DIRECTIONS_ALT",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "DISCORD",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "DOLLAR",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "DOWNLOAD",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "EJECT",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "ELLIPSIS_H",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "ELLIPSIS_V",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "ENVELOPE",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "EURO",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "EXCLAMATION_CIRCLE",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "EXCLAMATION_TRIANGLE",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "EXTERNAL_LINK",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "EYE",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "EYE_SLASH",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "FACEBOOK",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "FAST_BACKWARD",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "FAST_FORWARD",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "FILE",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "FILE_EXCEL",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "FILE_PDF",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "FILTER",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "FILTER_FILL",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "FILTER_SLASH",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "FLAG",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "FLAG_FILL",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "FOLDER",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "FOLDER_OPEN",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "FORWARD",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "GITHUB",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "GLOBE",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "GOOGLE",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "HASHTAG",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "HEART",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "HEART_FILL",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "HISTORY",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "HOME",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "ID_CARD",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "IMAGE",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "IMAGES",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "INBOX",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "INFO",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "INFO_CIRCLE",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "INSTAGRAM",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "KEY",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "LINK",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "LINKEDIN",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "LIST",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "LOCK",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "LOCK_OPEN",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "MAP",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "MAP_MARKER",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "MICROSOFT",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "MINUS",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "MINUS_CIRCLE",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "MOBILE",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "MONEY_BILL",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "MOON",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "PALETTE",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "PAPERCLIP",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "PAUSE",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "PAYPAL",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "PENCIL",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "PERCENTAGE",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "PHONE",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "PLAY",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "PLUS",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "PLUS_CIRCLE",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "POUND",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "POWER_OFF",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "PRIME",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "PRINT",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "QRCODE",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "QUESTION",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "QUESTION_CIRCLE",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "REDDIT",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "REFRESH",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "REPLAY",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "REPLY",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "SAVE",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "SEARCH",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "SEARCH_MINUS",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "SEARCH_PLUS",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "SEND",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "SERVER",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "SHARE_ALT",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "SHIELD",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "SHOPPING_BAG",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "SHOPPING_CART",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "SIGN_IN",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "SIGN_OUT",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "SITEMAP",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "SLACK",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "SLIDERS_H",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "SLIDERS_V",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "SORT",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "SORT_ALPHA_DOWN",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "SORT_ALPHA_ALT_DOWN",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "SORT_ALPHA_UP",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "SORT_ALPHA_ALT_UP",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "SORT_ALT",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "SORT_ALT_SLASH",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "SORT_AMOUNT_DOWN",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "SORT_AMOUNT_DOWN_ALT",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "SORT_AMOUNT_UP",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "SORT_AMOUNT_UP_ALT",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "SORT_DOWN",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "SORT_NUMERIC_DOWN",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "SORT_NUMERIC_ALT_DOWN",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "SORT_NUMERIC_UP",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "SORT_NUMERIC_ALT_UP",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "SORT_UP",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "SPINNER",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "STAR",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "STAR_FILL",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "STEP_BACKWARD",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "STEP_BACKWARD_ALT",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "STEP_FORWARD",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "STEP_FORWARD_ALT",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "STOP",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "STOP_CIRCLE",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "SUN",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "SYNC",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "TABLE",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "TABLET",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "TAG",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "TAGS",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "TELEGRAM",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "TH_LARGE",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "THUMBS_DOWN",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "THUMBS_UP",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "TICKET",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "TIMES",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "TIMES_CIRCLE",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "TRASH",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "TWITTER",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "UNDO",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "UNLOCK",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "UPLOAD",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "USER",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "USER_EDIT",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "USER_MINUS",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "USER_PLUS",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "USERS",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "VIDEO",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "VIMEO",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "VOLUME_DOWN",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "VOLUME_OFF",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "VOLUME_UP",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "WALLET",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "WHATSAPP",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "WIFI",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "WINDOW_MAXIMIZE",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "WINDOW_MINIMIZE",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        },
                        {
                            "name": "YOUTUBE",
                            "optional": false,
                            "readonly": true,
                            "type": "string"
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "InputStyleType": {
                    "values": "\"outlined\" | \"filled\""
                },
                "AppendToType": {
                    "values": "\"self\" | HTMLElement | undefined | null"
                }
            }
        }
    },
    "autocomplete": {
        "description": "AutoComplete is an input component that provides real-time suggestions while being typed.\n\n[Live Demo](https://www.primereact.org/autocomplete/)",
        "components": {
            "AutoComplete": {
                "description": "AutoComplete is an input component that provides real-time suggestions while being typed.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Used to show the overlay."
                        },
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Used to hide the overlay."
                        },
                        {
                            "name": "focus",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Used to focus the component."
                        },
                        {
                            "name": "search",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Browser event."
                                },
                                {
                                    "name": "query",
                                    "type": "string",
                                    "description": "Value to search with."
                                },
                                {
                                    "name": "source",
                                    "type": "null | \"input\" | \"dropdown\"",
                                    "description": "Source type, valid values are 'dropdown' and 'input'"
                                }
                            ],
                            "returnType": "void",
                            "description": "Used to search new suggestions."
                        },
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLSpanElement",
                            "description": "Used to get container element."
                        },
                        {
                            "name": "getInput",
                            "parameters": [],
                            "returnType": "HTMLInputElement",
                            "description": "Used to get input element."
                        },
                        {
                            "name": "getOverlay",
                            "parameters": [],
                            "returnType": "HTMLElement",
                            "description": "Used to get overlay element."
                        },
                        {
                            "name": "getVirtualScroller",
                            "parameters": [],
                            "returnType": "VirtualScroller",
                            "description": "Used to get the options of inline virtualScroller component."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in AutoComplete component. In addition to these, all properties of HTMLSpanElement can be used in this component.",
                    "values": [
                        {
                            "name": "id",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Unique identifier of the element."
                        },
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "null | HTMLElement | \"self\"",
                            "default": "document.body",
                            "description": "DOM element instance where the overlay panel should be mounted. Valid values are any DOM Element and \"self\". The \"self\" value is used to render a component where it is located."
                        },
                        {
                            "name": "autoFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should automatically get focus on load."
                        },
                        {
                            "name": "autoHighlight",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, highlights the first item in the list by default."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "delay",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "300",
                            "description": "Delay between keystrokes to wait before sending a query."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "dropdown",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Displays a button next to the input field when enabled."
                        },
                        {
                            "name": "dropdownAriaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "Choose",
                            "description": "ARIA label for the dropdown button. Defaults to placeholder then Locale \"choose\" label."
                        },
                        {
                            "name": "dropdownAutoFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Focus the input field when the dropdown button is clicked if enabled."
                        },
                        {
                            "name": "dropdownIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<AutoCompleteProps>",
                            "default": "",
                            "description": "Icon of the dropdown."
                        },
                        {
                            "name": "dropdownMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"blank\" | \"current\"",
                            "default": "blank",
                            "description": "Specifies the behavior dropdown button. Default \"blank\" mode sends an empty string and \"current\" mode sends the input value."
                        },
                        {
                            "name": "emptyMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "No results found.",
                            "description": "Text to display when there is no data. Defaults to global value in i18n translation configuration."
                        },
                        {
                            "name": "field",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Field of a suggested object to resolve and display."
                        },
                        {
                            "name": "forceSelection",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, autocomplete clears the manual input if it does not match of the suggestions to force only accepting values from the suggestions."
                        },
                        {
                            "name": "inputClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the input field."
                        },
                        {
                            "name": "inputId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the input element."
                        },
                        {
                            "name": "inputRef",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<HTMLInputElement>",
                            "default": "",
                            "description": "Reference of the input element."
                        },
                        {
                            "name": "inputStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the input field."
                        },
                        {
                            "name": "loadingIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<AutoCompleteProps>",
                            "default": "",
                            "description": "Icon of the loader."
                        },
                        {
                            "name": "itemTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Template of a list item."
                        },
                        {
                            "name": "maxLength",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Maximum number of characters to initiate a search."
                        },
                        {
                            "name": "minLength",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Minimum number of characters to initiate a search."
                        },
                        {
                            "name": "multiple",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Specifies if multiple values can be selected."
                        },
                        {
                            "name": "selectionLimit",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Number of maximum options that can be selected."
                        },
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Name of the input element."
                        },
                        {
                            "name": "optionGroupChildren",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Property name or getter function that refers to the children options of option group."
                        },
                        {
                            "name": "optionGroupLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Property name or getter function to use as the label of an option group."
                        },
                        {
                            "name": "optionGroupTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Template of an option group item."
                        },
                        {
                            "name": "panelClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the overlay panel element."
                        },
                        {
                            "name": "panelFooterTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Template of the panel footer."
                        },
                        {
                            "name": "panelStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the overlay panel element."
                        },
                        {
                            "name": "placeholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Hint text for the input field."
                        },
                        {
                            "name": "readOnly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the input cannot be typed."
                        },
                        {
                            "name": "removeTokenIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<AutoCompleteProps>",
                            "default": "",
                            "description": "Icon of the remove chip element in multiple mode."
                        },
                        {
                            "name": "scrollHeight",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "200px",
                            "description": "Maximum height of the suggestions panel."
                        },
                        {
                            "name": "selectedItemTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Template of a selected item."
                        },
                        {
                            "name": "showEmptyMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to show the empty message or not."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Size of the input field."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "suggestions",
                            "optional": true,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "An array of suggestions to display."
                        },
                        {
                            "name": "tabIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "tooltip",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Content of the tooltip."
                        },
                        {
                            "name": "tooltipOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "TooltipOptions",
                            "default": "",
                            "description": "Configuration of the tooltip, refer to the tooltip documentation for more information."
                        },
                        {
                            "name": "transitionOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSTransitionProps",
                            "default": "",
                            "description": "The properties of CSSTransition can be customized, except for \"nodeRef\" and \"in\" properties."
                        },
                        {
                            "name": "type",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Type of the input element."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Value of the component."
                        },
                        {
                            "name": "virtualScrollerOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "VirtualScrollerProps",
                            "default": "",
                            "description": "Whether to use the virtualScroller feature. The properties of VirtualScroller component can be used like an object in it."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "AutoCompletePassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "completeMethod",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "AutoCompleteCompleteEvent",
                                    "description": "Custom complete method event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke to search for suggestions."
                        },
                        {
                            "name": "onBlur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FocusEvent<HTMLInputElement, Element>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when autocomplete loses focus."
                        },
                        {
                            "name": "onChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "AutoCompleteChangeEvent",
                                    "description": "Custom change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when autocomplete value changes."
                        },
                        {
                            "name": "onClear",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when input is cleared by the user."
                        },
                        {
                            "name": "onClick",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "MouseEvent<HTMLElement, MouseEvent>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on click."
                        },
                        {
                            "name": "onContextMenu",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "MouseEvent<HTMLElement, MouseEvent>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on right-click."
                        },
                        {
                            "name": "onDblClick",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "MouseEvent<HTMLElement, MouseEvent>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on double click."
                        },
                        {
                            "name": "onDropdownClick",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "AutoCompleteDropdownClickEvent",
                                    "description": "Custom click event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke to when dropdown button is clicked."
                        },
                        {
                            "name": "onFocus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FocusEvent<HTMLInputElement, Element>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when autocomplete gets focus."
                        },
                        {
                            "name": "onHide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when overlay panel becomes hidden."
                        },
                        {
                            "name": "onKeyPress",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "KeyboardEvent<HTMLInputElement>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke to when a key is pressed."
                        },
                        {
                            "name": "onKeyUp",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "KeyboardEvent<HTMLInputElement>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke to when a key is released."
                        },
                        {
                            "name": "onMouseDown",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "MouseEvent<HTMLElement, MouseEvent>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke to when a mouse button is pressed."
                        },
                        {
                            "name": "onSelect",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "AutoCompleteSelectEvent",
                                    "description": "Custom select event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a suggestion is selected."
                        },
                        {
                            "name": "onShow",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when overlay panel becomes visible."
                        },
                        {
                            "name": "onUnselect",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "AutoCompleteUnselectEvent",
                                    "description": "Custom unselect event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a selected value is removed."
                        }
                    ]
                }
            }
        },
        "events": {
            "description": "Defines the custom events used by the component's callbacks.",
            "values": {
                "AutoCompleteChangeEvent": {
                    "description": "Custom change event.",
                    "relatedProp": "onChange",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": true,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        },
                        {
                            "name": "checked",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean"
                        },
                        {
                            "name": "target",
                            "optional": false,
                            "readonly": false,
                            "type": "FormTarget<any>"
                        }
                    ]
                },
                "AutoCompleteSelectEvent": {
                    "description": "Custom select event.",
                    "relatedProp": "onSelect",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Browser event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Selected option value"
                        }
                    ],
                    "extendedBy": "AutoCompleteUnselectEvent"
                },
                "AutoCompleteUnselectEvent": {
                    "description": "Custom unselect event.",
                    "relatedProp": "onUnselect",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Browser event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Selected option value"
                        }
                    ]
                },
                "AutoCompleteDropdownClickEvent": {
                    "description": "Custom click event.",
                    "relatedProp": "onDropdownClick",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Browser event"
                        },
                        {
                            "name": "query",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Current value of the input field"
                        }
                    ]
                },
                "AutoCompleteCompleteEvent": {
                    "description": "Custom complete method event.",
                    "relatedProp": "completeMethod",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Browser event"
                        },
                        {
                            "name": "query",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Value to search with"
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "AutoCompletePassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "AutoCompleteProps"
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "AutoCompleteState"
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "AutoCompleteContext"
                        }
                    ],
                    "callbacks": []
                },
                "AutoCompletePassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "AutoCompletePassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "footer",
                            "optional": true,
                            "readonly": false,
                            "type": "AutoCompletePassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "input",
                            "optional": true,
                            "readonly": false,
                            "type": "AutoCompletePassThroughType<HTMLAttributes<HTMLInputElement>>",
                            "description": "Uses to pass attributes to the input's DOM element."
                        },
                        {
                            "name": "container",
                            "optional": true,
                            "readonly": false,
                            "type": "AutoCompletePassThroughType<HTMLAttributes<HTMLUListElement>>",
                            "description": "Uses to pass attributes to the container's DOM element."
                        },
                        {
                            "name": "token",
                            "optional": true,
                            "readonly": false,
                            "type": "AutoCompletePassThroughType<HTMLAttributes<HTMLLIElement>>",
                            "description": "Uses to pass attributes to the token's DOM element."
                        },
                        {
                            "name": "tokenLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "AutoCompletePassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the token label's DOM element."
                        },
                        {
                            "name": "removeTokenIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "AutoCompletePassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the remove token icon's DOM element."
                        },
                        {
                            "name": "inputToken",
                            "optional": true,
                            "readonly": false,
                            "type": "AutoCompletePassThroughType<HTMLAttributes<HTMLLIElement>>",
                            "description": "Uses to pass attributes to the input token's DOM element."
                        },
                        {
                            "name": "loadingIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "AutoCompletePassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the loading icon's DOM element."
                        },
                        {
                            "name": "dropdownButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions",
                            "description": "Uses to pass attributes to the Button component."
                        },
                        {
                            "name": "panel",
                            "optional": true,
                            "readonly": false,
                            "type": "AutoCompletePassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the panel's DOM element."
                        },
                        {
                            "name": "virtualScroller",
                            "optional": true,
                            "readonly": false,
                            "type": "VirtualScrollerPassThroughOptions",
                            "description": "Uses to pass attributes to the VirtualScroller component."
                        },
                        {
                            "name": "list",
                            "optional": true,
                            "readonly": false,
                            "type": "AutoCompletePassThroughType<HTMLAttributes<HTMLUListElement>>",
                            "description": "Uses to pass attributes to the list's DOM element."
                        },
                        {
                            "name": "itemGroup",
                            "optional": true,
                            "readonly": false,
                            "type": "AutoCompletePassThroughType<HTMLAttributes<HTMLLIElement>>",
                            "description": "Uses to pass attributes to the item group's DOM element."
                        },
                        {
                            "name": "item",
                            "optional": true,
                            "readonly": false,
                            "type": "AutoCompletePassThroughType<HTMLAttributes<HTMLLIElement>>",
                            "description": "Uses to pass attributes to the item's DOM element."
                        },
                        {
                            "name": "emptyMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "AutoCompletePassThroughType<HTMLAttributes<HTMLLIElement>>",
                            "description": "Uses to pass attributes to the empty message's DOM element."
                        },
                        {
                            "name": "tooltip",
                            "optional": true,
                            "readonly": false,
                            "type": "TooltipPassThroughOptions",
                            "description": "Uses to pass attributes tooltip's DOM element."
                        }
                    ],
                    "callbacks": []
                },
                "AutoCompleteState": {
                    "description": "Defines current inline state in AutoComplete component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Current id state as a string."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current focused state as a boolean."
                        },
                        {
                            "name": "overlayVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current overlay visible state as a boolean."
                        },
                        {
                            "name": "searching",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current search state as a boolean."
                        }
                    ],
                    "callbacks": []
                },
                "AutoCompleteContext": {
                    "description": "Defines current options in AutoComplete component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "selected",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current selection state of the item as a boolean."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "AutoCompletePassThroughType": {
                    "values": "PassThroughType<T, AutoCompletePassThroughMethodOptions>"
                }
            }
        }
    },
    "avatar": {
        "description": "Avatar represents people using icons, labels and images.\n\n[Live Demo](https://www.primereact.org/avatar)",
        "components": {
            "Avatar": {
                "description": "Avatar represents people using icons, labels and images.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in Avatar component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "values": [
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<AvatarProps>",
                            "default": "",
                            "description": "Defines the icon to display."
                        },
                        {
                            "name": "image",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines the image to display."
                        },
                        {
                            "name": "imageAlt",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "avatar",
                            "description": "It specifies an alternate text for an image, if the image cannot be displayed."
                        },
                        {
                            "name": "imageFallback",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "default",
                            "description": "Defines a fallback image or URL if the main image fails to load. If \"default\" will fallback to label then icon."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines the text to display."
                        },
                        {
                            "name": "shape",
                            "optional": true,
                            "readonly": false,
                            "type": "\"square\" | \"circle\"",
                            "default": "square",
                            "description": "Shape of the element."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "\"normal\" | \"large\" | \"xlarge\"",
                            "default": "normal",
                            "description": "Size of the element."
                        },
                        {
                            "name": "template",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Template of the content."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "AvatarPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onImageError",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "This event is triggered if an error occurs while loading an image file."
                        },
                        {
                            "name": "onClick",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "MouseEvent<HTMLElement, MouseEvent>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on click."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "AvatarPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "AvatarProps"
                        }
                    ],
                    "callbacks": []
                },
                "AvatarPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "AvatarPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "AvatarPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the label's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "AvatarPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the icon's DOM element."
                        },
                        {
                            "name": "image",
                            "optional": true,
                            "readonly": false,
                            "type": "AvatarPassThroughType<ImgHTMLAttributes<HTMLImageElement>>",
                            "description": "Uses to pass attributes to the image's DOM element."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "AvatarPassThroughType": {
                    "values": "PassThroughType<T, AvatarPassThroughMethodOptions>"
                }
            }
        }
    },
    "avatargroup": {
        "description": "A set of Avatars can be displayed together using the AvatarGroup component.\n\n[Live Demo](https://www.primereact.org/avatar/)",
        "components": {
            "AvatarGroup": {
                "description": "A set of Avatars can be displayed together using the AvatarGroup component.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in Avatar component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "values": [
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "AvatarGroupPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "AvatarGroupPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [],
                    "callbacks": []
                },
                "AvatarGroupPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "AvatarGroupPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "AvatarGroupPassThroughType": {
                    "values": "PassThroughType<T, AvatarGroupPassThroughMethodOptions>"
                }
            }
        }
    },
    "badge": {
        "description": "Badge represents people using icons, labels and images.\n\n[Live Demo](https://www.primereact.org/badge)",
        "components": {
            "Badge": {
                "description": "Badge represents people using icons, labels and images.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLSpanElement",
                            "description": "Used to get container element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in Badge component. In addition to these, all properties of HTMLSpanElement can be used in this component.",
                    "values": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Value to display inside the badge."
                        },
                        {
                            "name": "severity",
                            "optional": true,
                            "readonly": false,
                            "type": "null | \"success\" | \"warning\" | \"info\" | \"danger\"",
                            "default": "null",
                            "description": "Severity type of the badge."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "null | \"normal\" | \"large\" | \"xlarge\"",
                            "default": "null",
                            "description": "Size of the badge, valid options are \"large\" and \"xlarge\"."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "BadgePassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "BadgePassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "BadgeProps"
                        }
                    ],
                    "callbacks": []
                },
                "BadgePassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "BadgePassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "BadgePassThroughType": {
                    "values": "PassThroughType<T, BadgePassThroughMethodOptions>"
                }
            }
        }
    },
    "blockui": {
        "description": "BlockUI represents people using icons, labels and images.\n\n[Live Demo](https://www.primereact.org/blockui)",
        "components": {
            "BlockUI": {
                "description": "BlockUI represents people using icons, labels and images.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "block",
                            "parameters": [],
                            "returnType": "void"
                        },
                        {
                            "name": "unblock",
                            "parameters": [],
                            "returnType": "void"
                        },
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in BlockUI component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "values": [
                        {
                            "name": "autoZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to automatically manage layering."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "blocked",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Controls the blocked state."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "containerClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the container element."
                        },
                        {
                            "name": "containerStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the container element."
                        },
                        {
                            "name": "fullScreen",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, the whole document gets blocked."
                        },
                        {
                            "name": "template",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Template of mask."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "BlockUIPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onBlocked",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Fired when the element gets blocked."
                        },
                        {
                            "name": "onUnblocked",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Fired when the element gets unblocked."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "BlockUIPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "BlockUIProps"
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "BlockUIState"
                        }
                    ],
                    "callbacks": []
                },
                "BlockUIPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "BlockUIPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        }
                    ],
                    "callbacks": []
                },
                "BlockUIState": {
                    "description": "Defines current inline state in BlockUI component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "blocked",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current blocked state as a boolean."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "BlockUIPassThroughType": {
                    "values": "PassThroughType<T, BlockUIPassThroughMethodOptions>"
                }
            }
        }
    },
    "breadcrumb": {
        "description": "Breadcrumb provides contextual information about page hierarchy.\n\n[Live Demo](https://www.primereact.org/breadcrumb/)",
        "components": {
            "BreadCrumb": {
                "description": "Breadcrumb provides contextual information about page hierarchy.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLElement",
                            "description": "Used to get container element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in BreadCrumb component. In addition to these, all properties of HTMLElement can be used in this component.",
                    "values": [
                        {
                            "name": "model",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuItem[]",
                            "default": "",
                            "description": "An array of menuitems."
                        },
                        {
                            "name": "home",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuItem",
                            "default": "",
                            "description": "MenuItem configuration for the home icon."
                        },
                        {
                            "name": "separatorIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<BreadCrumbProps>",
                            "default": "",
                            "description": "Icon of the separator."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "BreadCrumbPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "BreadCrumbPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "BreadCrumbProps"
                        }
                    ],
                    "callbacks": []
                },
                "BreadCrumbPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "BreadCrumbPassThroughType<HTMLAttributes<HTMLElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "menu",
                            "optional": true,
                            "readonly": false,
                            "type": "BreadCrumbPassThroughType<HTMLAttributes<HTMLUListElement>>",
                            "description": "Uses to pass attributes to the list's DOM element."
                        },
                        {
                            "name": "menuitem",
                            "optional": true,
                            "readonly": false,
                            "type": "BreadCrumbPassThroughType<HTMLAttributes<HTMLLIElement>>",
                            "description": "Uses to pass attributes to the list item's DOM element."
                        },
                        {
                            "name": "action",
                            "optional": true,
                            "readonly": false,
                            "type": "BreadCrumbPassThroughType<HTMLAttributes<HTMLAnchorElement>>",
                            "description": "Uses to pass attributes to the action's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "BreadCrumbPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the icon's DOM element."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "BreadCrumbPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the label's DOM element."
                        },
                        {
                            "name": "separator",
                            "optional": true,
                            "readonly": false,
                            "type": "BreadCrumbPassThroughType<HTMLAttributes<HTMLLIElement>>",
                            "description": "Uses to pass attributes to the separator's DOM element."
                        },
                        {
                            "name": "separatorIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "BreadCrumbPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the separator icon's DOM element."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "BreadCrumbPassThroughType": {
                    "values": "PassThroughType<T, BreadCrumbPassThroughMethodOptions>"
                }
            }
        }
    },
    "button": {
        "description": "Button is an extension to standard button element with icons and theming.\n\n[Live Demo](https://www.primereact.org/button/)",
        "components": {
            "Button": {
                "description": "Button is an extension to standard button element with icons and theming.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                },
                "props": {
                    "description": "Defines valid properties in Button component. In addition to these, all properties of HTMLButtonElement can be used in this component.",
                    "values": [
                        {
                            "name": "badge",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Value of the badge."
                        },
                        {
                            "name": "badgeClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the badge."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the element should be disabled."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<ButtonProps>",
                            "default": "",
                            "description": "Name of the icon or JSX.Element for icon."
                        },
                        {
                            "name": "text",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Add a textual class to the button without a background initially."
                        },
                        {
                            "name": "rounded",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Add a circular border radius to the button."
                        },
                        {
                            "name": "raised",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Add a shadow to indicate elevation."
                        },
                        {
                            "name": "outlined",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Add a border class without a background initially."
                        },
                        {
                            "name": "link",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Add a link style to the button."
                        },
                        {
                            "name": "severity",
                            "optional": true,
                            "readonly": false,
                            "type": "\"success\" | \"help\" | \"warning\" | \"secondary\" | \"info\" | \"danger\"",
                            "default": "",
                            "description": "Defines the style of the button, valid values are \"secondary\", \"success\", \"info\", \"warning\", \"danger\", \"help\"."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "\"small\" | \"large\"",
                            "default": "",
                            "description": "Defines the size of the button, valid values are \"small\" and \"large\"."
                        },
                        {
                            "name": "iconPos",
                            "optional": true,
                            "readonly": false,
                            "type": "\"left\" | \"top\" | \"bottom\" | \"right\"",
                            "default": "left",
                            "description": "Position of the icon, valid values are \"left\", \"right\", \"top\" and \"bottom\"."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Text of the button."
                        },
                        {
                            "name": "loading",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Display loading icon of the button"
                        },
                        {
                            "name": "loadingIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<ButtonProps>",
                            "default": "",
                            "description": "Name of the loading icon or JSX.Element for loading icon."
                        },
                        {
                            "name": "tooltip",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Content of the tooltip."
                        },
                        {
                            "name": "tooltipOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "TooltipOptions",
                            "default": "",
                            "description": "Configuration of the tooltip, refer to the tooltip documentation for more information."
                        },
                        {
                            "name": "visible",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "When present, it specifies that the element should be visible."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "ButtonPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ButtonProps"
                        }
                    ],
                    "callbacks": []
                },
                "ButtonPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughType<HTMLAttributes<HTMLButtonElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "loadingIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughType<SVGProps<SVGSVGElement> | HTMLAttributes<SVGSVGElement | HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the loading icon's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughType<SVGProps<SVGSVGElement> | HTMLAttributes<SVGSVGElement | HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the icon's DOM element."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the label's DOM element."
                        },
                        {
                            "name": "badge",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the badge's DOM element."
                        },
                        {
                            "name": "tooltip",
                            "optional": true,
                            "readonly": false,
                            "type": "TooltipPassThroughOptions",
                            "description": "Uses to pass attributes to the Tooltip component."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ButtonPassThroughType": {
                    "values": "PassThroughType<T, ButtonPassThroughMethodOptions>"
                }
            }
        }
    },
    "calendar": {
        "description": "Calendar also known as DatePicker, is a form component to work with dates.\n\n[Live Demo](https://www.primereact.org/calendar/)",
        "components": {
            "Calendar": {
                "description": "Calendar also known as DatePicker, is a form component to work with dates.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Used to show the overlay."
                        },
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Used to hide the overlay."
                        },
                        {
                            "name": "focus",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Used to focus the component."
                        },
                        {
                            "name": "getCurrentDateTime",
                            "parameters": [],
                            "returnType": "Date | Date[]",
                            "description": "Used to get the current date."
                        },
                        {
                            "name": "getViewDate",
                            "parameters": [],
                            "returnType": "Date | Date[]",
                            "description": "Used to get the view date."
                        },
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLSpanElement",
                            "description": "Used to get container element."
                        },
                        {
                            "name": "getInput",
                            "parameters": [],
                            "returnType": "HTMLInputElement",
                            "description": "Used to get input element."
                        },
                        {
                            "name": "getOverlay",
                            "parameters": [],
                            "returnType": "HTMLElement",
                            "description": "Used to get overlay element."
                        },
                        {
                            "name": "updateViewDate",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "null | SyntheticEvent<Element, Event>",
                                    "description": "Browser event."
                                },
                                {
                                    "name": "value",
                                    "type": "undefined | null | Date | Date[]",
                                    "description": "New date."
                                }
                            ],
                            "returnType": "void",
                            "description": "Used to update the current view date."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in Calendar component.",
                    "values": [
                        {
                            "name": "id",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Unique identifier of the element."
                        },
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "null | HTMLElement | \"self\"",
                            "default": "document.body",
                            "description": "DOM element instance where the overlay panel should be mounted. Valid values are any DOM Element and \"self\". The \"self\" value is used to render a component where it is located."
                        },
                        {
                            "name": "autoFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should automatically get focus on load."
                        },
                        {
                            "name": "ariaLabelledBy",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "autoZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to automatically manage layering."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the element."
                        },
                        {
                            "name": "clearButtonClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "p-secondary-button",
                            "description": "Style class of the clear button."
                        },
                        {
                            "name": "dateFormat",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "mm/dd/yy",
                            "description": "Format of the date."
                        },
                        {
                            "name": "decrementIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<CalendarProps>",
                            "default": "",
                            "description": "Icon to show in each of the decrement buttons."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified, disables the component."
                        },
                        {
                            "name": "disabledDates",
                            "optional": true,
                            "readonly": false,
                            "type": "Date[]",
                            "default": "",
                            "description": "Array with dates to disable."
                        },
                        {
                            "name": "disabledDays",
                            "optional": true,
                            "readonly": false,
                            "type": "number[]",
                            "default": "",
                            "description": "Array with disabled weekday numbers."
                        },
                        {
                            "name": "hideOnDateTimeSelect",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to hide the overlay on date selection when showTime is enabled."
                        },
                        {
                            "name": "hourFormat",
                            "optional": true,
                            "readonly": false,
                            "type": "\"12\" | \"24\"",
                            "default": "24",
                            "description": "Specifies 12 or 24 hour format."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<CalendarProps>",
                            "default": "",
                            "description": "Icon of the calendar button."
                        },
                        {
                            "name": "iconPos",
                            "optional": true,
                            "readonly": false,
                            "type": "\"left\" | \"right\"",
                            "default": "right",
                            "description": "Icon position of the calendar button."
                        },
                        {
                            "name": "incrementIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<CalendarProps>",
                            "default": "",
                            "description": "Icon to show in each of the increment buttons."
                        },
                        {
                            "name": "inline",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, displays the calendar as inline instead of an overlay."
                        },
                        {
                            "name": "inputClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the input element."
                        },
                        {
                            "name": "inputId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the input element."
                        },
                        {
                            "name": "inputRef",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<HTMLInputElement>",
                            "default": "",
                            "description": "Reference of the input element."
                        },
                        {
                            "name": "inputStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the input field."
                        },
                        {
                            "name": "keepInvalid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Keep invalid value when input blur."
                        },
                        {
                            "name": "locale",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "en",
                            "description": "Used to display the values ​​of the locale object defined in the Locale API."
                        },
                        {
                            "name": "mask",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Mask pattern for input element."
                        },
                        {
                            "name": "maxDate",
                            "optional": true,
                            "readonly": false,
                            "type": "Date",
                            "default": "",
                            "description": "The maximum selectable date."
                        },
                        {
                            "name": "maxDateCount",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Maximum number of selectable dates in multiple mode."
                        },
                        {
                            "name": "minDate",
                            "optional": true,
                            "readonly": false,
                            "type": "Date",
                            "default": "",
                            "description": "The minimum selectable date."
                        },
                        {
                            "name": "monthNavigator",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the month should be rendered as a dropdown instead of text."
                        },
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Name of the input element."
                        },
                        {
                            "name": "nextIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<CalendarProps>",
                            "default": "",
                            "description": "Icon to show in the next button."
                        },
                        {
                            "name": "numberOfMonths",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Number of months to display."
                        },
                        {
                            "name": "panelClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the datetimepicker panel."
                        },
                        {
                            "name": "panelStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the datetimepicker panel."
                        },
                        {
                            "name": "placeholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Placeholder text for the input."
                        },
                        {
                            "name": "prevIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<CalendarProps>",
                            "default": "",
                            "description": "Icon to show in the previous button."
                        },
                        {
                            "name": "readOnlyInput",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified, prevents entering the date manually with keyboard."
                        },
                        {
                            "name": "required",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that an input field must be filled out before submitting the form."
                        },
                        {
                            "name": "selectOtherMonths",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether days in other months shown before or after the current month are selectable. This only applies if the showOtherMonths option is set to true."
                        },
                        {
                            "name": "selectionMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"multiple\" | \"range\" | \"single\"",
                            "default": "single",
                            "description": "Specifies the selection mode."
                        },
                        {
                            "name": "shortYearCutoff",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "+10",
                            "description": "The cutoff year for determining the century for a date."
                        },
                        {
                            "name": "showButtonBar",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display today and clear buttons at the footer"
                        },
                        {
                            "name": "showIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, displays a button with icon next to input."
                        },
                        {
                            "name": "showMillisec",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to show the milliseconds in time picker."
                        },
                        {
                            "name": "showMinMaxRange",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to allow navigation past min/max dates."
                        },
                        {
                            "name": "showOnFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "When disabled, datepicker will not be visible with input focus."
                        },
                        {
                            "name": "showOtherMonths",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to display dates in other months (non-selectable) at the start or end of the current month. To make these days selectable use the selectOtherMonths option."
                        },
                        {
                            "name": "showSeconds",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to show the seconds in time picker."
                        },
                        {
                            "name": "showTime",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display timepicker."
                        },
                        {
                            "name": "showWeek",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, calendar will show week numbers."
                        },
                        {
                            "name": "stepHour",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Hours to change per step."
                        },
                        {
                            "name": "stepMillisec",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Milliseconds to change per step."
                        },
                        {
                            "name": "stepMinute",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Minutes to change per step."
                        },
                        {
                            "name": "stepSecond",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Seconds to change per step."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the element."
                        },
                        {
                            "name": "tabIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "timeOnly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display timepicker only."
                        },
                        {
                            "name": "todayButtonClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "p-secondary-button",
                            "description": "Style class of the today button."
                        },
                        {
                            "name": "tooltip",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Content of the tooltip."
                        },
                        {
                            "name": "tooltipOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "TooltipOptions",
                            "default": "",
                            "description": "Configuration of the tooltip, refer to the tooltip documentation for more information."
                        },
                        {
                            "name": "touchUI",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, calendar overlay is displayed as optimized for touch devices."
                        },
                        {
                            "name": "transitionOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSTransitionProps",
                            "default": "",
                            "description": "The properties of CSSTransition can be customized, except for \"nodeRef\" and \"in\" properties."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "null | string | Date | Date[]",
                            "default": "null",
                            "description": "Value of the component."
                        },
                        {
                            "name": "view",
                            "optional": true,
                            "readonly": false,
                            "type": "\"month\" | \"year\" | \"date\"",
                            "default": "date",
                            "description": "Type of view to display."
                        },
                        {
                            "name": "viewDate",
                            "optional": true,
                            "readonly": false,
                            "type": "null | Date",
                            "default": "",
                            "description": "Date instance whose month and year are used to display the calendar."
                        },
                        {
                            "name": "visible",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Specifies the visibility of the overlay."
                        },
                        {
                            "name": "yearNavigator",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the year should be rendered as a dropdown instead of text."
                        },
                        {
                            "name": "yearRange",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "The range of years displayed in the year drop-down in (nnnn:nnnn) format such as (2000:2020)."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "formatDateTime",
                            "parameters": [
                                {
                                    "name": "date",
                                    "optional": false,
                                    "type": "Date",
                                    "description": "Formating date"
                                }
                            ],
                            "returnType": "string",
                            "description": "Function for overriding default behavior that formats a Date to the string representation."
                        },
                        {
                            "name": "parseDateTime",
                            "parameters": [
                                {
                                    "name": "text",
                                    "optional": false,
                                    "type": "string",
                                    "description": "Parsing date"
                                }
                            ],
                            "returnType": "Date",
                            "description": "Function for overriding default behavior that parses text into the Date."
                        },
                        {
                            "name": "dateTemplate",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "CalendarDateTemplateEvent",
                                    "description": "Custom date template event"
                                }
                            ],
                            "returnType": "ReactNode",
                            "description": "Function that gets a date information and returns the cell content in datepicker."
                        },
                        {
                            "name": "decadeTemplate",
                            "parameters": [
                                {
                                    "name": "yearValues",
                                    "optional": false,
                                    "type": "number[]",
                                    "description": "The values of years"
                                }
                            ],
                            "returnType": "ReactNode",
                            "description": "Function that gets a navigator information and returns the decade selections in the panel."
                        },
                        {
                            "name": "footerTemplate",
                            "parameters": [],
                            "returnType": "ReactNode",
                            "description": "Custom footer template of overlay."
                        },
                        {
                            "name": "headerTemplate",
                            "parameters": [],
                            "returnType": "ReactNode",
                            "description": "Custom header template of overlay."
                        },
                        {
                            "name": "monthNavigatorTemplate",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "CalendarMonthNavigatorTemplateEvent",
                                    "description": "Custom month navigator template event."
                                }
                            ],
                            "returnType": "ReactNode",
                            "description": "Function that gets a navigator information and returns the navigator element in header."
                        },
                        {
                            "name": "onBlur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FocusEvent<HTMLInputElement, Element>",
                                    "description": "Browser event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on blur event of input field."
                        },
                        {
                            "name": "onChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "CalendarChangeEvent",
                                    "description": "Custom change event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when value changes."
                        },
                        {
                            "name": "onClearButtonClick",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "MouseEvent<HTMLButtonElement, MouseEvent>",
                                    "description": "Browser event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when clear button is clicked."
                        },
                        {
                            "name": "onFocus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FocusEvent<HTMLInputElement, Element>",
                                    "description": "Browser event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on focus event of input field."
                        },
                        {
                            "name": "onHide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when overlay panel or modal becomes hidden."
                        },
                        {
                            "name": "onInput",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FormEvent<HTMLInputElement>",
                                    "description": "Browser event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on input event of input field."
                        },
                        {
                            "name": "onMonthChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "CalendarMonthChangeEvent",
                                    "description": "Custom month change event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when month changes."
                        },
                        {
                            "name": "onSelect",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "CalendarSelectEvent",
                                    "description": "Custom select event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a date is selected."
                        },
                        {
                            "name": "onShow",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when overlay panel or modal becomes visible."
                        },
                        {
                            "name": "onTodayButtonClick",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "MouseEvent<HTMLButtonElement, MouseEvent>",
                                    "description": "Browser event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when today button is clicked."
                        },
                        {
                            "name": "onViewDateChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "CalendarViewChangeEvent",
                                    "description": "Custom view change event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the displayed month/year is changed."
                        },
                        {
                            "name": "onVisibleChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "CalendarVisibleChangeEvent",
                                    "description": "Custom visible change event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when visible is changed."
                        },
                        {
                            "name": "yearNavigatorTemplate",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "CalendarYearNavigatorTemplateEvent",
                                    "description": "Custom year navigator template event"
                                }
                            ],
                            "returnType": "ReactNode",
                            "description": "Function that gets a navigator information and returns the navigator in header."
                        }
                    ]
                }
            }
        },
        "events": {
            "description": "Defines the custom events used by the component's callbacks.",
            "values": {
                "CalendarChangeEvent": {
                    "description": "Custom change event.",
                    "relatedProp": "onChange",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": true,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "Nullable<string | Date | Date[]>"
                        },
                        {
                            "name": "checked",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean"
                        },
                        {
                            "name": "target",
                            "optional": false,
                            "readonly": false,
                            "type": "FormTarget<string | Date | Date[]>"
                        }
                    ]
                },
                "CalendarMonthChangeEvent": {
                    "description": "Custom month change event.",
                    "relatedProp": "onMonthChange",
                    "props": [
                        {
                            "name": "month",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "The number of month"
                        },
                        {
                            "name": "year",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "The number of year"
                        }
                    ]
                },
                "CalendarViewChangeEvent": {
                    "description": "Custom view change event",
                    "relatedProp": "onViewDateChange",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Browser event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "Date",
                            "description": "New date"
                        }
                    ]
                },
                "CalendarDateTemplateEvent": {
                    "description": "Custom date template event",
                    "relatedProp": "dateTemplate",
                    "props": [
                        {
                            "name": "day",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Current day"
                        },
                        {
                            "name": "month",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Current month"
                        },
                        {
                            "name": "year",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Current year"
                        },
                        {
                            "name": "otherMonth",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether the date belongs to the other month"
                        },
                        {
                            "name": "today",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether the day is today"
                        },
                        {
                            "name": "selectable",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether the date is selectable"
                        }
                    ]
                },
                "CalendarVisibleChangeEvent": {
                    "description": "Custom visible change event",
                    "relatedProp": "onVisibleChange",
                    "props": [
                        {
                            "name": "visible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether the overlay is opened."
                        },
                        {
                            "name": "type",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | null | \"outside\" | \"dateselect\"",
                            "description": "The type of visible action when the overlay is visible/hidden."
                        }
                    ]
                },
                "CalendarMonthNavigatorTemplateEvent": {
                    "description": "Custom month navigator template event",
                    "relatedProp": "monthNavigatorTemplate",
                    "props": [
                        {
                            "name": "className",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the navigator."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | null | string | number",
                            "description": "The value of the current navigator"
                        },
                        {
                            "name": "names",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "description": "The names of the current navigator"
                        },
                        {
                            "name": "options",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "description": "The options of the current navigator"
                        },
                        {
                            "name": "element",
                            "optional": false,
                            "readonly": false,
                            "type": "ReactNode",
                            "description": "The default navigator component"
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "CalendarProps",
                            "description": "The props of Calendar component"
                        }
                    ]
                },
                "CalendarYearNavigatorTemplateEvent": {
                    "description": "Custom year navigator template event",
                    "relatedProp": "yearNavigatorTemplate",
                    "props": [
                        {
                            "name": "className",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the navigator."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | null | string | number",
                            "description": "The value of the current navigator"
                        },
                        {
                            "name": "names",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "description": "The names of the current navigator"
                        },
                        {
                            "name": "options",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "description": "The options of the current navigator"
                        },
                        {
                            "name": "element",
                            "optional": false,
                            "readonly": false,
                            "type": "ReactNode",
                            "description": "The default navigator component"
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "CalendarProps",
                            "description": "The props of Calendar component"
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "CalendarPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "CalendarProps"
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "CalendarState"
                        }
                    ],
                    "callbacks": []
                },
                "CalendarPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "input",
                            "optional": true,
                            "readonly": false,
                            "type": "InputTextPassThroughOptions",
                            "description": "Uses to pass attributes to the InputText component."
                        },
                        {
                            "name": "dropdownButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions",
                            "description": "Uses to pass attributes to the Button component."
                        },
                        {
                            "name": "panel",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the panel's DOM element."
                        },
                        {
                            "name": "groupContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the group container's DOM element."
                        },
                        {
                            "name": "group",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the group's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "previousButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions",
                            "description": "Uses to pass attributes to the Button component."
                        },
                        {
                            "name": "previousIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the previous icon's DOM element."
                        },
                        {
                            "name": "title",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the title's DOM element."
                        },
                        {
                            "name": "monthTitle",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughType<HTMLAttributes<HTMLButtonElement>>",
                            "description": "Uses to pass attributes to the month title's DOM element."
                        },
                        {
                            "name": "yearTitle",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughType<HTMLAttributes<HTMLButtonElement>>",
                            "description": "Uses to pass attributes to the year title's DOM element."
                        },
                        {
                            "name": "decadeTitle",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the decade title's DOM element."
                        },
                        {
                            "name": "decadeTitleText",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the decade title text's DOM element."
                        },
                        {
                            "name": "nextButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions",
                            "description": "Uses to pass attributes to the Button component."
                        },
                        {
                            "name": "nextIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the next icon's DOM element."
                        },
                        {
                            "name": "container",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the container's DOM element."
                        },
                        {
                            "name": "table",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughType<HTMLAttributes<HTMLTableElement>>",
                            "description": "Uses to pass attributes to the table's DOM element."
                        },
                        {
                            "name": "tableHeader",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughType<HTMLAttributes<HTMLTableSectionElement>>",
                            "description": "Uses to pass attributes to the table header's DOM element."
                        },
                        {
                            "name": "tableHeaderRow",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughType<HTMLAttributes<HTMLTableRowElement>>",
                            "description": "Uses to pass attributes to the table header row's DOM element."
                        },
                        {
                            "name": "weekHeader",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the week header's DOM element."
                        },
                        {
                            "name": "tableHeaderCell",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughType<HTMLAttributes<HTMLTableCellElement>>",
                            "description": "Uses to pass attributes to the table header cell's DOM element."
                        },
                        {
                            "name": "weekLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the week label's DOM element."
                        },
                        {
                            "name": "weekDay",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the week day's DOM element."
                        },
                        {
                            "name": "tableBody",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughType<HTMLAttributes<HTMLTableSectionElement>>",
                            "description": "Uses to pass attributes to the table body's DOM element."
                        },
                        {
                            "name": "tableBodyRow",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughType<HTMLAttributes<HTMLTableRowElement>>",
                            "description": "Uses to pass attributes to the table body row's DOM element."
                        },
                        {
                            "name": "weekNumber",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughType<HTMLAttributes<HTMLTableCellElement>>",
                            "description": "Uses to pass attributes to the week number's DOM element."
                        },
                        {
                            "name": "weekLabelContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the week label container's DOM element."
                        },
                        {
                            "name": "day",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughType<HTMLAttributes<HTMLTableCellElement>>",
                            "description": "Uses to pass attributes to the day's DOM element."
                        },
                        {
                            "name": "dayLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the day label's DOM element."
                        },
                        {
                            "name": "monthPicker",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the month picker's DOM element."
                        },
                        {
                            "name": "month",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the month's DOM element."
                        },
                        {
                            "name": "yearPicker",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the year picker's DOM element."
                        },
                        {
                            "name": "year",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the year's DOM element."
                        },
                        {
                            "name": "timePicker",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the time picker's DOM element."
                        },
                        {
                            "name": "hourPicker",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the hour picker's DOM element."
                        },
                        {
                            "name": "incrementIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the increment icon's DOM element."
                        },
                        {
                            "name": "incrementButton",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughType<HTMLAttributes<HTMLButtonElement>>",
                            "description": "Uses to pass attributes to the increment button's DOM element."
                        },
                        {
                            "name": "decrementButton",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughType<HTMLAttributes<HTMLButtonElement>>",
                            "description": "Uses to pass attributes to the decrement button's DOM element."
                        },
                        {
                            "name": "decrementIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the increment icon's DOM element."
                        },
                        {
                            "name": "hour",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the hour's DOM element."
                        },
                        {
                            "name": "separatorContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the separatorc ontainer's DOM element."
                        },
                        {
                            "name": "separator",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the separator's DOM element."
                        },
                        {
                            "name": "minutePicker",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the minute picker's DOM element."
                        },
                        {
                            "name": "minute",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the minute's DOM element."
                        },
                        {
                            "name": "secondPicker",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the second picker's DOM element."
                        },
                        {
                            "name": "second",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the second's DOM element."
                        },
                        {
                            "name": "ampmPicker",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the ampm picker's DOM element."
                        },
                        {
                            "name": "ampm",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the ampm's DOM element."
                        },
                        {
                            "name": "buttonbar",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the buttonbar's DOM element."
                        },
                        {
                            "name": "todayButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions",
                            "description": "Uses to pass attributes to the Button component."
                        },
                        {
                            "name": "clearButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions",
                            "description": "Uses to pass attributes to the Button component."
                        },
                        {
                            "name": "select",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughType<HTMLAttributes<HTMLSelectElement>>",
                            "description": "Uses to pass attributes to the select's DOM element."
                        },
                        {
                            "name": "option",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughType<HTMLAttributes<HTMLOptionElement>>",
                            "description": "Uses to pass attributes to the option's DOM element."
                        }
                    ],
                    "callbacks": []
                },
                "CalendarState": {
                    "description": "Defines current inline state in Calendar component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current focused state as a boolean."
                        },
                        {
                            "name": "overlayVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current overlay visible state as a boolean."
                        },
                        {
                            "name": "viewDate",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Current viewDate state as a string."
                        }
                    ],
                    "callbacks": []
                },
                "CalendarSelectEvent": {
                    "description": "Custom Select event",
                    "relatedProp": "onSelect",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Browser event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "Nullable<string | Date | Date[]>",
                            "description": "Selected date"
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "CalendarPassThroughType": {
                    "values": "PassThroughType<T, CalendarPassThroughMethodOptions>"
                }
            }
        }
    },
    "card": {
        "description": "Card is a flexible container component.\n\n[Live Demo](https://www.primereact.org/card/)",
        "components": {
            "Card": {
                "description": "Card is a flexible container component.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                },
                "props": {
                    "description": "Defines valid properties in Card component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "values": [
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Header of the card."
                        },
                        {
                            "name": "footer",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Footer of the card."
                        },
                        {
                            "name": "title",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Title of the card."
                        },
                        {
                            "name": "subTitle",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Secondary title of the card."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "CardPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "CardPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "CardProps"
                        }
                    ],
                    "callbacks": []
                },
                "CardPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "CardPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "CardPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "body",
                            "optional": true,
                            "readonly": false,
                            "type": "CardPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the body's DOM element."
                        },
                        {
                            "name": "title",
                            "optional": true,
                            "readonly": false,
                            "type": "CardPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the title's DOM element."
                        },
                        {
                            "name": "subTitle",
                            "optional": true,
                            "readonly": false,
                            "type": "CardPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the subtitle's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "CardPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "footer",
                            "optional": true,
                            "readonly": false,
                            "type": "CardPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the footer's DOM element."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "CardPassThroughType": {
                    "values": "PassThroughType<T, CardPassThroughMethodOptions>"
                }
            }
        }
    },
    "carousel": {
        "description": "Carousel is a content slider featuring various customization options.\n\n[Live Demo](https://www.primereact.org/carousel)",
        "components": {
            "Carousel": {
                "description": "Carousel is a content slider featuring various customization options.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "startAutoplay",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Used to start the autoplay if it is currently stopped."
                        },
                        {
                            "name": "stopAutoplay",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Used to stop the autoplay if it is currently started."
                        },
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in Carousel component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "values": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "An array of objects to display."
                        },
                        {
                            "name": "page",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the first item."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Label of header."
                        },
                        {
                            "name": "footer",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Label of footer."
                        },
                        {
                            "name": "circular",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if scrolling would be infinite."
                        },
                        {
                            "name": "showIndicators",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to display indicator container."
                        },
                        {
                            "name": "showNavigators",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to display navigation buttons in container."
                        },
                        {
                            "name": "autoplayInterval",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Time in milliseconds to scroll items automatically."
                        },
                        {
                            "name": "numVisible",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Number of items per page."
                        },
                        {
                            "name": "numScroll",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Number of items to scroll."
                        },
                        {
                            "name": "prevIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<CarouselProps>",
                            "default": "",
                            "description": "Icon for the previous button by orientation."
                        },
                        {
                            "name": "nextIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<CarouselProps>",
                            "default": "",
                            "description": "Icon for the next button by orientation."
                        },
                        {
                            "name": "responsiveOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "CarouselResponsiveOption[]",
                            "default": "",
                            "description": "An array of options for responsive design."
                        },
                        {
                            "name": "orientation",
                            "optional": true,
                            "readonly": false,
                            "type": "\"horizontal\" | \"vertical\"",
                            "default": "horizontal",
                            "description": "Specifies the layout of the component, valid values are \"horizontal\" and \"vertical\"."
                        },
                        {
                            "name": "verticalViewPortHeight",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "300px",
                            "description": "Height of the viewport in vertical layout."
                        },
                        {
                            "name": "contentClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of main content."
                        },
                        {
                            "name": "containerClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the viewport container."
                        },
                        {
                            "name": "indicatorsContentClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the paginator items."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "CarouselPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "itemTemplate",
                            "parameters": [
                                {
                                    "name": "item",
                                    "optional": false,
                                    "type": "any",
                                    "description": "Current item"
                                }
                            ],
                            "returnType": "ReactNode",
                            "description": "Function that gets an item in the value and returns the content for it."
                        },
                        {
                            "name": "onPageChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "CarouselPageChangeEvent",
                                    "description": "Custom change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke after scroll."
                        }
                    ]
                }
            }
        },
        "events": {
            "description": "Defines the custom events used by the component's callbacks.",
            "values": {
                "CarouselPageChangeEvent": {
                    "description": "Custom complete method event.",
                    "relatedProp": "onPageChange",
                    "props": [
                        {
                            "name": "page",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Value of the new page."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "CarouselPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "CarouselProps"
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "CarouselState"
                        }
                    ],
                    "callbacks": []
                },
                "CarouselPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "CarouselPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "CarouselPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "CarouselPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "container",
                            "optional": true,
                            "readonly": false,
                            "type": "CarouselPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the container's DOM element."
                        },
                        {
                            "name": "previousButton",
                            "optional": true,
                            "readonly": false,
                            "type": "CarouselPassThroughType<HTMLAttributes<HTMLButtonElement>>",
                            "description": "Uses to pass attributes to the previous button's DOM element."
                        },
                        {
                            "name": "previousButtonIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "CarouselPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the previous button icon's DOM element."
                        },
                        {
                            "name": "itemsContent",
                            "optional": true,
                            "readonly": false,
                            "type": "CarouselPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the items content's DOM element."
                        },
                        {
                            "name": "itemsContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "CarouselPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the items container's DOM element."
                        },
                        {
                            "name": "itemCloned",
                            "optional": true,
                            "readonly": false,
                            "type": "CarouselPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the item cloned's DOM element."
                        },
                        {
                            "name": "item",
                            "optional": true,
                            "readonly": false,
                            "type": "CarouselPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the item's DOM element."
                        },
                        {
                            "name": "nextButton",
                            "optional": true,
                            "readonly": false,
                            "type": "CarouselPassThroughType<HTMLAttributes<HTMLButtonElement>>",
                            "description": "Uses to pass attributes to the next button's DOM element."
                        },
                        {
                            "name": "nextButtonIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "CarouselPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the next button icon's DOM element."
                        },
                        {
                            "name": "indicators",
                            "optional": true,
                            "readonly": false,
                            "type": "CarouselPassThroughType<HTMLAttributes<HTMLUListElement>>",
                            "description": "Uses to pass attributes to the indicators's DOM element."
                        },
                        {
                            "name": "indicator",
                            "optional": true,
                            "readonly": false,
                            "type": "CarouselPassThroughType<HTMLAttributes<HTMLLIElement>>",
                            "description": "Uses to pass attributes to the indicator's DOM element."
                        },
                        {
                            "name": "indicatorButton",
                            "optional": true,
                            "readonly": false,
                            "type": "CarouselPassThroughType<HTMLAttributes<HTMLButtonElement>>",
                            "description": "Uses to pass attributes to the indicator button's DOM element."
                        },
                        {
                            "name": "footer",
                            "optional": true,
                            "readonly": false,
                            "type": "CarouselPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the footer's DOM element."
                        }
                    ],
                    "callbacks": []
                },
                "CarouselState": {
                    "description": "Defines current inline state in Carousel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "numVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Number of items per page as a number."
                        },
                        {
                            "name": "numScroll",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Number of items to scroll as a number."
                        },
                        {
                            "name": "page",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Index of the first item."
                        },
                        {
                            "name": "totalShiftedItems",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Total shifted items' count as a number."
                        }
                    ],
                    "callbacks": []
                },
                "CarouselResponsiveOption": {
                    "description": "Custom responsive option",
                    "relatedProp": "responsiveOptions",
                    "props": [
                        {
                            "name": "breakpoint",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "The breakpoint to define the maximum width boundary."
                        },
                        {
                            "name": "numVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Number of items per page."
                        },
                        {
                            "name": "numScroll",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Number of items to scroll."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "CarouselPassThroughType": {
                    "values": "PassThroughType<T, CarouselPassThroughMethodOptions>"
                }
            }
        }
    },
    "cascadeselect": {
        "description": "CascadeSelect is a form component to select a value from a nested structure of options.\n\n[Live Demo](https://www.primereact.org/cascadeselect/)",
        "components": {
            "CascadeSelect": {
                "description": "CascadeSelect is a form component to select a value from a nested structure of options.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "focus",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Used to focus the component."
                        },
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        },
                        {
                            "name": "getInput",
                            "parameters": [],
                            "returnType": "HTMLInputElement",
                            "description": "Used to get input element."
                        },
                        {
                            "name": "getOverlay",
                            "parameters": [],
                            "returnType": "HTMLElement",
                            "description": "Used to get overlay element."
                        },
                        {
                            "name": "getLabel",
                            "parameters": [],
                            "returnType": "HTMLSpanElement",
                            "description": "Used to get label element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in CascadeSelect component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "values": [
                        {
                            "name": "id",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Unique identifier of the element."
                        },
                        {
                            "name": "autoFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should automatically get focus on load."
                        },
                        {
                            "name": "inputRef",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<HTMLInputElement>",
                            "default": "",
                            "description": "Reference of the input element."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Value of the component."
                        },
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Name of the input element."
                        },
                        {
                            "name": "options",
                            "optional": true,
                            "readonly": false,
                            "type": "SelectItemOptionsType",
                            "default": "",
                            "description": "An array of selectitems to display as the available options."
                        },
                        {
                            "name": "optionLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Property name or getter function to use as the label of an option."
                        },
                        {
                            "name": "optionValue",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Property name or getter function to use as the value of an option, defaults to the option itself when not defined."
                        },
                        {
                            "name": "optionGroupIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<CascadeSelectProps>",
                            "default": "",
                            "description": "Icon of the option group."
                        },
                        {
                            "name": "optionGroupLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Property name or getter function to use as the label of an option group."
                        },
                        {
                            "name": "optionGroupChildren",
                            "optional": true,
                            "readonly": false,
                            "type": "string[]",
                            "default": "",
                            "description": "Property name or getter function to retrieve the items of a group."
                        },
                        {
                            "name": "placeholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Default text to display when no option is selected."
                        },
                        {
                            "name": "itemTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "The template of items."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "dataKey",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "A property to uniquely identify an option."
                        },
                        {
                            "name": "breakpoint",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "The breakpoint to define the maximum width boundary when responsiveness is enabled."
                        },
                        {
                            "name": "inputId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "tabIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "ariaLabelledBy",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "null | HTMLElement | \"self\"",
                            "default": "document.body",
                            "description": "DOM element instance where the overlay panel should be mounted. Valid values are any DOM Element and \"self\". The \"self\" value is used to render a component where it is located."
                        },
                        {
                            "name": "transitionOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSTransitionProps",
                            "default": "",
                            "description": "The properties of CSSTransition can be customized, except for \"nodeRef\" and \"in\" properties."
                        },
                        {
                            "name": "dropdownIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<CascadeSelectProps>",
                            "default": "",
                            "description": "Icon of the dropdown icon."
                        },
                        {
                            "name": "scrollHeight",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "400px",
                            "description": "Maximum height of the options panel on responsive mode."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "CascadeSelectPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "CascadeSelectChangeEvent",
                                    "description": "Custom change event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on value change"
                        },
                        {
                            "name": "onGroupChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "CascadeSelectGroupChangeEvent",
                                    "description": "Custom group change event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a group changes."
                        },
                        {
                            "name": "onBeforeShow",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke before the overlay is shown."
                        },
                        {
                            "name": "onBeforeHide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke before the overlay is hidden."
                        },
                        {
                            "name": "onShow",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when the overlay is shown."
                        },
                        {
                            "name": "onHide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when the overlay is hidden."
                        }
                    ]
                }
            }
        },
        "events": {
            "description": "Defines the custom events used by the component's callbacks.",
            "values": {
                "CascadeSelectChangeEvent": {
                    "description": "Custom change event",
                    "relatedProp": "onChange",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Browser event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "New value"
                        }
                    ],
                    "extendedBy": "CascadeSelectGroupChangeEvent"
                },
                "CascadeSelectGroupChangeEvent": {
                    "description": "Custom group change event.",
                    "relatedProp": "onGroupChange",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Browser event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "New value"
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "CascadeSelectPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "CascadeSelectProps"
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "CascadeSelectState"
                        }
                    ],
                    "callbacks": []
                },
                "CascadeSelectState": {
                    "description": "Defines current inline state in CascadeSelect component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current focused state as a boolean."
                        },
                        {
                            "name": "overlayVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current overlay visible state as a boolean."
                        },
                        {
                            "name": "attributeSelector",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Current overlay attributeSelector state as a string."
                        }
                    ],
                    "callbacks": []
                },
                "CascadeSelectPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "CascadeSelectPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "input",
                            "optional": true,
                            "readonly": false,
                            "type": "CascadeSelectPassThroughType<HTMLAttributes<HTMLInputElement>>",
                            "description": "Uses to pass attributes to the input's DOM element."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "CascadeSelectPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the label's DOM element."
                        },
                        {
                            "name": "dropdownButton",
                            "optional": true,
                            "readonly": false,
                            "type": "CascadeSelectPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the dropdown button's DOM element."
                        },
                        {
                            "name": "dropdownIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "CascadeSelectPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the dropdown icon's DOM element."
                        },
                        {
                            "name": "panel",
                            "optional": true,
                            "readonly": false,
                            "type": "CascadeSelectPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the panel's DOM element."
                        },
                        {
                            "name": "wrapper",
                            "optional": true,
                            "readonly": false,
                            "type": "CascadeSelectPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the wrapper's DOM element."
                        },
                        {
                            "name": "list",
                            "optional": true,
                            "readonly": false,
                            "type": "CascadeSelectPassThroughType<HTMLAttributes<HTMLUListElement>>",
                            "description": "Uses to pass attributes to the list's DOM element."
                        },
                        {
                            "name": "item",
                            "optional": true,
                            "readonly": false,
                            "type": "CascadeSelectPassThroughType<HTMLAttributes<HTMLLIElement>>",
                            "description": "Uses to pass attributes to the item's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "CascadeSelectPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "optionGroupIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "CascadeSelectPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the optionGroup icon's DOM element."
                        },
                        {
                            "name": "text",
                            "optional": true,
                            "readonly": false,
                            "type": "CascadeSelectPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the text's DOM element."
                        },
                        {
                            "name": "hiddenSelectedMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "CascadeSelectPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the hidden selected message's DOM element."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "CascadeSelectPassThroughType": {
                    "values": "PassThroughType<T, CascadeSelectPassThroughMethodOptions>"
                }
            }
        }
    },
    "chart": {
        "description": "Chart components are based on Chart.js, an open source HTML5 based charting library.\n\n[Live Demo](https://www.primereact.org/chart)",
        "components": {
            "Chart": {
                "description": "Chart components are based on Chart.js, an open source HTML5 based charting library.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "getCanvas",
                            "parameters": [],
                            "returnType": "HTMLCanvasElement",
                            "description": "Used to get canvas element."
                        },
                        {
                            "name": "getChart",
                            "parameters": [],
                            "returnType": "any",
                            "description": "Used to get chart instance."
                        },
                        {
                            "name": "getBase64Image",
                            "parameters": [],
                            "returnType": "any",
                            "description": "Used to get base64 image."
                        },
                        {
                            "name": "generateLegend",
                            "parameters": [],
                            "returnType": "string",
                            "description": "Used to generate legend."
                        },
                        {
                            "name": "refresh",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Redraws the graph."
                        },
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in Chart component.",
                    "values": [
                        {
                            "name": "id",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Unique identifier of the element."
                        },
                        {
                            "name": "type",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Type of the chart."
                        },
                        {
                            "name": "data",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Data to display."
                        },
                        {
                            "name": "options",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Options to customize the chart."
                        },
                        {
                            "name": "plugins",
                            "optional": true,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Used to custom plugins of the chart."
                        },
                        {
                            "name": "width",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Width of the chart in non-responsive mode."
                        },
                        {
                            "name": "height",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Height of the chart in non-responsive mode."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the element."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the element."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "ARIA label for the chart canvas. Defaults to options.plugins.title.text if available."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "ChartPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "ChartPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ChartProps"
                        }
                    ],
                    "callbacks": []
                },
                "ChartPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ChartPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "canvas",
                            "optional": true,
                            "readonly": false,
                            "type": "ChartPassThroughType<HTMLAttributes<HTMLCanvasElement>>",
                            "description": "Uses to pass attributes to the canvas's DOM element."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ChartPassThroughType": {
                    "values": "PassThroughType<T, ChartPassThroughMethodOptions>"
                }
            }
        }
    },
    "checkbox": {
        "description": "Checkbox is an extension to standard checkbox element with skinning capabilities.\n\n[Live Demo](https://www.primereact.org/checkbox/)",
        "components": {
            "Checkbox": {
                "description": "Checkbox is an extension to standard checkbox element with skinning capabilities.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "focus",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Used to focus the component."
                        },
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        },
                        {
                            "name": "getInput",
                            "parameters": [],
                            "returnType": "HTMLInputElement",
                            "description": "Used to get input element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in Checkbox component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "values": [
                        {
                            "name": "id",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Unique identifier of the element."
                        },
                        {
                            "name": "autoFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should automatically get focus on load."
                        },
                        {
                            "name": "inputRef",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<HTMLInputElement>",
                            "default": "",
                            "description": "Reference of the input element."
                        },
                        {
                            "name": "inputId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the input element."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Value of the component."
                        },
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Name of the checkbox element ."
                        },
                        {
                            "name": "checked",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Specifies whether a checkbox should be checked or not."
                        },
                        {
                            "name": "trueValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "true",
                            "description": "Value in checked state."
                        },
                        {
                            "name": "falseValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "false",
                            "description": "Value in unchecked state."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the element."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the element."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the element value cannot be altered."
                        },
                        {
                            "name": "required",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that an input field must be filled out before submitting the form."
                        },
                        {
                            "name": "readOnly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the value cannot be changed."
                        },
                        {
                            "name": "tabIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "false",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<CheckboxProps>",
                            "default": "",
                            "description": "Icon to display in checkbox."
                        },
                        {
                            "name": "tooltip",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Content of the tooltip."
                        },
                        {
                            "name": "tooltipOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "TooltipOptions",
                            "default": "",
                            "description": "Configuration of the tooltip, refer to the tooltip documentation for more information."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "CheckboxPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "CheckboxChangeEvent",
                                    "description": "Custom change event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on value change"
                        },
                        {
                            "name": "onClick",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "CheckboxClickEvent",
                                    "description": "Custom click event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on value change. Mark the event with preventDefault to prevent the option from changing."
                        },
                        {
                            "name": "onMouseDown",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "MouseEvent<HTMLElement, MouseEvent>",
                                    "description": "Browser event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke to when a mouse button is pressed."
                        },
                        {
                            "name": "onContextMenu",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "MouseEvent<HTMLElement, MouseEvent>",
                                    "description": "Browser event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on right-click."
                        }
                    ]
                }
            }
        },
        "events": {
            "description": "Defines the custom events used by the component's callbacks.",
            "values": {
                "CheckboxChangeEvent": {
                    "description": "Custom change event.",
                    "relatedProp": "onChange",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": true,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        },
                        {
                            "name": "checked",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean"
                        },
                        {
                            "name": "target",
                            "optional": false,
                            "readonly": false,
                            "type": "FormTarget<any>"
                        }
                    ]
                },
                "CheckboxClickEvent": {
                    "description": "Custom click event.",
                    "relatedProp": "onClick",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": true,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        },
                        {
                            "name": "checked",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean"
                        },
                        {
                            "name": "target",
                            "optional": false,
                            "readonly": false,
                            "type": "FormTarget<any>"
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "CheckboxPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "CheckboxProps"
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "CheckboxState"
                        }
                    ],
                    "callbacks": []
                },
                "CheckboxPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "CheckboxPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "input",
                            "optional": true,
                            "readonly": false,
                            "type": "CheckboxPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the input's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "CheckboxPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the icon's DOM element."
                        },
                        {
                            "name": "tooltip",
                            "optional": true,
                            "readonly": false,
                            "type": "TooltipPassThroughOptions",
                            "description": "Uses to pass attributes tooltip's DOM element."
                        },
                        {
                            "name": "hiddenInputWrapper",
                            "optional": true,
                            "readonly": false,
                            "type": "CheckboxPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the hidden input wrapper's DOM element."
                        },
                        {
                            "name": "hiddenInput",
                            "optional": true,
                            "readonly": false,
                            "type": "CheckboxPassThroughType<HTMLAttributes<HTMLInputElement>>",
                            "description": "Uses to pass attributes to the hidden input's DOM element."
                        }
                    ],
                    "callbacks": []
                },
                "CheckboxState": {
                    "description": "Defines current inline state in Checkbox component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current focus state as a boolean."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "CheckboxPassThroughType": {
                    "values": "PassThroughType<T, CheckboxPassThroughMethodOptions>"
                }
            }
        }
    },
    "chip": {
        "description": "Chip represents people using icons, labels and images.\n\n[Live Demo](https://www.primereact.org/chip)",
        "components": {
            "Chip": {
                "description": "Chip represents people using icons, labels and images.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in Chip component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "values": [
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines the text to display."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<ChipProps>",
                            "default": "",
                            "description": "Defines the icon to display."
                        },
                        {
                            "name": "image",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines the image to display."
                        },
                        {
                            "name": "removable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display a remove icon."
                        },
                        {
                            "name": "removeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<ChipProps>",
                            "default": "",
                            "description": "Icon of the remove element."
                        },
                        {
                            "name": "template",
                            "optional": true,
                            "readonly": false,
                            "type": "TemplateType<ChipProps>",
                            "default": "",
                            "description": "Template of an item."
                        },
                        {
                            "name": "imageAlt",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "It specifies an alternate text for an image, if the image cannot be displayed."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "ChipPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onImageError",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "This event is triggered if an error occurs while loading an image file."
                        },
                        {
                            "name": "onRemove",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "MouseEvent<HTMLElement, MouseEvent>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a chip is removed."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "ChipPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ChipProps"
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "ChipState"
                        }
                    ],
                    "callbacks": []
                },
                "ChipPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ChipPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "image",
                            "optional": true,
                            "readonly": false,
                            "type": "ChipPassThroughType<ImgHTMLAttributes<HTMLImageElement>>",
                            "description": "Uses to pass attributes to the image's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "ChipPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the icon's DOM element."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "ChipPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the label' DOM element."
                        },
                        {
                            "name": "removeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ChipPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the removeIcon's DOM element."
                        }
                    ],
                    "callbacks": []
                },
                "ChipState": {
                    "description": "Defines current inline state in Chip component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "visible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current visible state as a boolean."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ChipPassThroughType": {
                    "values": "PassThroughType<T, ChipPassThroughMethodOptions>"
                }
            }
        }
    },
    "chips": {
        "description": "Chips is used to enter multiple values on an input field.\n\n[Live Demo](https://www.primereact.org/chips/)",
        "components": {
            "Chips": {
                "description": "Chips is used to enter multiple values on an input field.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "focus",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Used to focus the component."
                        },
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        },
                        {
                            "name": "getInput",
                            "parameters": [],
                            "returnType": "HTMLInputElement",
                            "description": "Used to get input element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in Chips component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "values": [
                        {
                            "name": "autoFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should automatically get focus on load."
                        },
                        {
                            "name": "inputRef",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<HTMLInputElement>",
                            "default": "",
                            "description": "Reference of the input element."
                        },
                        {
                            "name": "inputId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the input element."
                        },
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Name of the input field."
                        },
                        {
                            "name": "placeholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Advisory information to display on input."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "string[]",
                            "default": "",
                            "description": "Value of the component."
                        },
                        {
                            "name": "max",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Maximum number of entries allowed."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the element should be disabled."
                        },
                        {
                            "name": "readOnly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the element should be read-only."
                        },
                        {
                            "name": "removable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean | Function",
                            "default": "true",
                            "description": "Whether an item is removable."
                        },
                        {
                            "name": "removeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<ChipsProps>",
                            "default": "",
                            "description": "Icon of the remove element."
                        },
                        {
                            "name": "tooltip",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Content of the tooltip."
                        },
                        {
                            "name": "tooltipOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "TooltipOptions",
                            "default": "",
                            "description": "Configuration of the tooltip, refer to the tooltip documentation for more information."
                        },
                        {
                            "name": "ariaLabelledBy",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "separator",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Separator char to add an item when pressed in addition to the enter key. Currently only possible value is ','."
                        },
                        {
                            "name": "allowDuplicate",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to allow duplicate values or not."
                        },
                        {
                            "name": "keyfilter",
                            "optional": true,
                            "readonly": false,
                            "type": "KeyFilterType",
                            "default": "",
                            "description": "Format definition of the keys to block."
                        },
                        {
                            "name": "addOnBlur",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to add an item when the input loses focus."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "ChipsPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "itemTemplate",
                            "parameters": [
                                {
                                    "name": "item",
                                    "optional": false,
                                    "type": "any",
                                    "description": "Current item"
                                }
                            ],
                            "returnType": "ReactNode",
                            "description": "The template of each item"
                        },
                        {
                            "name": "onAdd",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "ChipsAddEvent",
                                    "description": "Custom add event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a chip is added. Return 'false' to prevent the item from being added."
                        },
                        {
                            "name": "onRemove",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "ChipsRemoveEvent",
                                    "description": "Custom remove event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a chip is removed."
                        },
                        {
                            "name": "onChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "ChipsChangeEvent",
                                    "description": "Custom change event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a chip is added or removed."
                        },
                        {
                            "name": "onFocus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FocusEvent<HTMLInputElement, Element>",
                                    "description": "Browser event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component gets focus."
                        },
                        {
                            "name": "onBlur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FocusEvent<HTMLInputElement, Element>",
                                    "description": "Browser event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component loses focus."
                        },
                        {
                            "name": "onKeyDown",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "KeyboardEvent<HTMLInputElement>",
                                    "description": "Browser event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the key pressed."
                        }
                    ]
                }
            }
        },
        "events": {
            "description": "Defines the custom events used by the component's callbacks.",
            "values": {
                "ChipsRemoveEvent": {
                    "description": "Custom remove event",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Browser event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Removed item value"
                        }
                    ]
                },
                "ChipsChangeEvent": {
                    "description": "Custom change event.",
                    "relatedProp": "onChange",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": true,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "Nullable<string[]>"
                        },
                        {
                            "name": "checked",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean"
                        },
                        {
                            "name": "target",
                            "optional": false,
                            "readonly": false,
                            "type": "FormTarget<string[]>"
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "ChipsPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ChipsProps"
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "ChipsState"
                        }
                    ],
                    "callbacks": []
                },
                "ChipsPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ChipsPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "container",
                            "optional": true,
                            "readonly": false,
                            "type": "ChipsPassThroughType<HTMLAttributes<HTMLUListElement>>",
                            "description": "Uses to pass attributes to the container's DOM element."
                        },
                        {
                            "name": "token",
                            "optional": true,
                            "readonly": false,
                            "type": "ChipsPassThroughType<HTMLAttributes<HTMLLIElement>>",
                            "description": "Uses to pass attributes to the token's DOM element."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "ChipsPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the label's DOM element."
                        },
                        {
                            "name": "removeTokenIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ChipsPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the remove token icon's DOM element."
                        },
                        {
                            "name": "inputToken",
                            "optional": true,
                            "readonly": false,
                            "type": "ChipsPassThroughType<HTMLAttributes<HTMLLIElement>>",
                            "description": "Uses to pass attributes to the input token's DOM element."
                        },
                        {
                            "name": "input",
                            "optional": true,
                            "readonly": false,
                            "type": "ChipsPassThroughType<HTMLAttributes<HTMLInputElement>>",
                            "description": "Uses to pass attributes to the input's DOM element."
                        },
                        {
                            "name": "tooltip",
                            "optional": true,
                            "readonly": false,
                            "type": "TooltipPassThroughOptions",
                            "description": "Uses to pass attributes tooltip's DOM element."
                        }
                    ],
                    "callbacks": []
                },
                "ChipsState": {
                    "description": "Defines current inline state in Chips component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current focused state as a boolean."
                        }
                    ],
                    "callbacks": []
                },
                "ChipsAddEvent": {
                    "description": "Custom add event",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Browser event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Added item value"
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ChipsPassThroughType": {
                    "values": "PassThroughType<T, ChipsPassThroughMethodOptions>"
                }
            }
        }
    },
    "colorpicker": {
        "description": "ColorPicker is an input component to select a color.\n\n[Live Demo](https://www.primereact.org/colorpicker/)",
        "components": {
            "ColorPicker": {
                "description": "ColorPicker is an input component to select a color.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Used to show the overlay."
                        },
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Used to hide the overlay."
                        },
                        {
                            "name": "focus",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Used to focus the component."
                        },
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        },
                        {
                            "name": "getInput",
                            "parameters": [],
                            "returnType": "HTMLInputElement",
                            "description": "Used to get input element."
                        },
                        {
                            "name": "getOverlay",
                            "parameters": [],
                            "returnType": "HTMLElement",
                            "description": "Used to get overlay element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in AutoComplete component. In addition to these, all properties of HTMLInputElement can be used in this component.",
                    "values": [
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "null | HTMLElement | \"self\"",
                            "default": "document.body",
                            "description": "DOM element instance where the overlay panel should be mounted. Valid values are any DOM Element and \"self\". The \"self\" value is used to render a component where it is located."
                        },
                        {
                            "name": "autoFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should automatically get focus on load."
                        },
                        {
                            "name": "defaultColor",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "ff0000",
                            "description": "Default color to display when value is null."
                        },
                        {
                            "name": "format",
                            "optional": true,
                            "readonly": false,
                            "type": "\"rgb\" | \"hex\" | \"hsb\"",
                            "default": "hex",
                            "description": "Format to use in value binding."
                        },
                        {
                            "name": "inline",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display as an overlay or not."
                        },
                        {
                            "name": "inputId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the focus input to match a label defined for the dropdown."
                        },
                        {
                            "name": "inputRef",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<HTMLInputElement>",
                            "default": "",
                            "description": "Reference of the input element."
                        },
                        {
                            "name": "inputStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the input field."
                        },
                        {
                            "name": "inputClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Inline style of the input field."
                        },
                        {
                            "name": "panelClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the overlay panel."
                        },
                        {
                            "name": "panelStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the overlay panel."
                        },
                        {
                            "name": "tooltip",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Content of the tooltip."
                        },
                        {
                            "name": "tooltipOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "TooltipOptions",
                            "default": "",
                            "description": "Configuration of the tooltip, refer to the tooltip documentation for more information."
                        },
                        {
                            "name": "transitionOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSTransitionProps",
                            "default": "",
                            "description": "The properties of CSSTransition can be customized, except for \"nodeRef\" and \"in\" properties."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "string | ColorPickerRGBType | ColorPickerHSBType",
                            "default": "",
                            "description": "Value of the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "ColorPickerPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "ColorPickerChangeEvent",
                                    "description": "Custom change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a color is selected."
                        },
                        {
                            "name": "onShow",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when overlay panel becomes visible."
                        },
                        {
                            "name": "onHide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when overlay panel becomes hidden."
                        }
                    ]
                }
            }
        },
        "events": {
            "description": "Defines the custom events used by the component's callbacks.",
            "values": {
                "ColorPickerChangeEvent": {
                    "description": "Custom change event.",
                    "relatedProp": "onChange",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": true,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "Nullable<string | ColorPickerRGBType | ColorPickerHSBType>"
                        },
                        {
                            "name": "checked",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean"
                        },
                        {
                            "name": "target",
                            "optional": false,
                            "readonly": false,
                            "type": "FormTarget<string | ColorPickerRGBType | ColorPickerHSBType>"
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "ColorPickerPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ColorPickerProps"
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "ColorPickerState"
                        }
                    ],
                    "callbacks": []
                },
                "ColorPickerPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ColorPickerPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "input",
                            "optional": true,
                            "readonly": false,
                            "type": "ColorPickerPassThroughType<HTMLAttributes<HTMLInputElement>>",
                            "description": "Uses to pass attributes to the input's DOM element."
                        },
                        {
                            "name": "panel",
                            "optional": true,
                            "readonly": false,
                            "type": "ColorPickerPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the panel's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "ColorPickerPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "selector",
                            "optional": true,
                            "readonly": false,
                            "type": "ColorPickerPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the selector's DOM element."
                        },
                        {
                            "name": "color",
                            "optional": true,
                            "readonly": false,
                            "type": "ColorPickerPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the color's DOM element."
                        },
                        {
                            "name": "colorHandler",
                            "optional": true,
                            "readonly": false,
                            "type": "ColorPickerPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the color handler's DOM element."
                        },
                        {
                            "name": "hue",
                            "optional": true,
                            "readonly": false,
                            "type": "ColorPickerPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the hue's DOM element."
                        },
                        {
                            "name": "hueHandler",
                            "optional": true,
                            "readonly": false,
                            "type": "ColorPickerPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the hue handler's DOM element."
                        },
                        {
                            "name": "tooltip",
                            "optional": true,
                            "readonly": false,
                            "type": "TooltipPassThroughOptions",
                            "description": "Uses to pass attributes tooltip's DOM element."
                        }
                    ],
                    "callbacks": []
                },
                "ColorPickerState": {
                    "description": "Defines current inline state in ColorPicker component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "overlayVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current overlay visible state as a boolean."
                        }
                    ],
                    "callbacks": []
                },
                "ColorPickerRGBType": {
                    "description": "RGB type of value",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "r",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "red color number"
                        },
                        {
                            "name": "g",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "green color number"
                        },
                        {
                            "name": "b",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "blue color number"
                        }
                    ],
                    "callbacks": []
                },
                "ColorPickerHSBType": {
                    "description": "HSB type of value",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "h",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "hue number"
                        },
                        {
                            "name": "s",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "saturation number"
                        },
                        {
                            "name": "b",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "brightness number"
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ColorPickerPassThroughType": {
                    "values": "PassThroughType<T, ColorPickerPassThroughMethodOptions>"
                }
            }
        }
    },
    "column": {
        "description": "Column component defines various options to specify corresponding features.\nIt is a helper component for DataTable and TreeTable.\n\n[Live Demo](https://www.primereact.org/datatable/)",
        "components": {
            "Column": {
                "description": "Column is a helper component for DataTable and TreeTable.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                },
                "props": {
                    "description": "Defines valid properties in ColumnProps component.",
                    "values": [
                        {
                            "name": "align",
                            "optional": true,
                            "readonly": false,
                            "type": "null | \"center\" | \"left\" | \"right\"",
                            "default": "",
                            "description": "Aligns the content of the column, valid values are left, right and center."
                        },
                        {
                            "name": "alignFrozen",
                            "optional": true,
                            "readonly": false,
                            "type": "\"left\" | \"right\"",
                            "default": "",
                            "description": "Position of a frozen column, valid values are left and right."
                        },
                        {
                            "name": "alignHeader",
                            "optional": true,
                            "readonly": false,
                            "type": "null | \"center\" | \"left\" | \"right\"",
                            "default": "",
                            "description": "Aligns the header of the column, valid values are left, right and center."
                        },
                        {
                            "name": "body",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Body content of the column."
                        },
                        {
                            "name": "bodyClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Style class of the body. If using a function must return a string."
                        },
                        {
                            "name": "bodyStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the body."
                        },
                        {
                            "name": "cellEditValidatorEvent",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "click",
                            "description": "Event to trigger the validation, possible values are \"click\" and \"blur\"."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "colSpan",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Number of columns to span for grouping."
                        },
                        {
                            "name": "columnKey",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of a column if field property is not defined. Only utilized by reorderableColumns feature at the moment."
                        },
                        {
                            "name": "dataType",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Depending on the dataType of the column, suitable match modes are displayed."
                        },
                        {
                            "name": "editor",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Function to provide the cell editor input."
                        },
                        {
                            "name": "excludeGlobalFilter",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to exclude from global filtering or not."
                        },
                        {
                            "name": "expander",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean | Function",
                            "default": "false",
                            "description": "Displays an icon to toggle row expansion."
                        },
                        {
                            "name": "exportable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Defines whether the column is exported or not."
                        },
                        {
                            "name": "exportField",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Property of a row data used for exporting, defaults to field."
                        },
                        {
                            "name": "exportHeader",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Custom export header of the column to be exported."
                        },
                        {
                            "name": "field",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Property of a row data."
                        },
                        {
                            "name": "filter",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if a column can be filtered."
                        },
                        {
                            "name": "filterApply",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Template of apply element in menu."
                        },
                        {
                            "name": "filterClear",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Template of clear element in menu."
                        },
                        {
                            "name": "filterElement",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Element for custom filtering."
                        },
                        {
                            "name": "filterField",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Property of a row data used for filtering, defaults to field."
                        },
                        {
                            "name": "filterFooter",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Template of footer element in menu."
                        },
                        {
                            "name": "filterHeader",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Template of header element in menu."
                        },
                        {
                            "name": "filterHeaderClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the filter header."
                        },
                        {
                            "name": "filterHeaderStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the filter header."
                        },
                        {
                            "name": "filterMatchMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"endsWith\" | \"startsWith\" | \"custom\" | \"contains\" | \"in\" | \"equals\" | \"notEquals\" | \"lt\" | \"lte\" | \"gt\" | \"gte\"",
                            "default": "",
                            "description": "Defines filterMatchMode; \"startsWith\", \"contains\", \"endsWith\", \"equals\", \"notEquals\", \"in\", \"lt\", \"lte\", \"gt\", \"gte\" and \"custom\"."
                        },
                        {
                            "name": "filterMatchModeOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnFilterMatchModeOptions[]",
                            "default": "",
                            "description": "An array of label-value pairs to override the global match mode options."
                        },
                        {
                            "name": "filterMaxLength",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Specifies the maximum number of characters allowed in the filter element."
                        },
                        {
                            "name": "filterMenuClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the column filter overlay."
                        },
                        {
                            "name": "filterMenuStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the column filter overlay."
                        },
                        {
                            "name": "filterPlaceholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines placeholder of the input fields."
                        },
                        {
                            "name": "filterType",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "text",
                            "description": "Type of the filter input field."
                        },
                        {
                            "name": "footer",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Footer content of the table."
                        },
                        {
                            "name": "footerClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the footer."
                        },
                        {
                            "name": "footerStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the footer."
                        },
                        {
                            "name": "frozen",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the column is fixed in horizontal scrolling or not."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Header content of the table."
                        },
                        {
                            "name": "headerClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the header."
                        },
                        {
                            "name": "headerStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the header."
                        },
                        {
                            "name": "headerTooltip",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Content of the header tooltip."
                        },
                        {
                            "name": "headerTooltipOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "TooltipOptions",
                            "default": "",
                            "description": "Configuration of the header tooltip, refer to the tooltip documentation for more information."
                        },
                        {
                            "name": "hidden",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the column is rendered."
                        },
                        {
                            "name": "maxConstraints",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "2",
                            "description": "Maximum number of constraints for a column filter."
                        },
                        {
                            "name": "reorderable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Used to defined reorderableColumns per column when reorderableColumns of table is enabled, defaults to value of reorderableColumns."
                        },
                        {
                            "name": "resizeable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Used to defined resizeableColumns per column when resizeableColumns of table is enabled, defaults to value of resizeableColumns."
                        },
                        {
                            "name": "rowEditor",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Displays icons to edit row."
                        },
                        {
                            "name": "rowReorder",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether this column displays an icon to reorder the rows."
                        },
                        {
                            "name": "rowReorderIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<ColumnProps>",
                            "default": "",
                            "description": "Icon of the drag handle to reorder rows."
                        },
                        {
                            "name": "rowSpan",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Number of rows to span for grouping."
                        },
                        {
                            "name": "selectionMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"multiple\" | \"single\"",
                            "default": "",
                            "description": "Specifies the selection mode, valid values are \"single\", \"multiple\", \"radiobutton\" and \"checkbox\"."
                        },
                        {
                            "name": "showAddButton",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "When enabled, a button is displayed to add more rules."
                        },
                        {
                            "name": "showApplyButton",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Displays a button to apply the column filtering."
                        },
                        {
                            "name": "showClearButton",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Displays a button to clear the column filtering."
                        },
                        {
                            "name": "showFilterMatchModes",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show the match modes selector."
                        },
                        {
                            "name": "showFilterMenu",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to display the filter overlay."
                        },
                        {
                            "name": "showFilterMenuOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show the match modes selector and match operator selector."
                        },
                        {
                            "name": "showFilterOperator",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "When enabled, match all and match any operator selector is displayed."
                        },
                        {
                            "name": "sortField",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Name of the field to sort data by default."
                        },
                        {
                            "name": "sortable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if a column is sortable."
                        },
                        {
                            "name": "sortableDisabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, the data of columns with this property cannot be sorted or changed by the user."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "cellEditValidator",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "ColumnEvent",
                                    "description": "Custom event."
                                }
                            ],
                            "returnType": "boolean",
                            "description": "Validator function to validate the cell input value."
                        },
                        {
                            "name": "filterFunction",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any",
                                    "description": "Value of the filter event."
                                },
                                {
                                    "name": "filter",
                                    "optional": false,
                                    "type": "any",
                                    "description": "Filter of the filter event."
                                },
                                {
                                    "name": "filterLocale",
                                    "optional": false,
                                    "type": "string",
                                    "description": "Filter locale of the event."
                                },
                                {
                                    "name": "params",
                                    "optional": false,
                                    "type": "ColumnFilterEvent",
                                    "description": "Params of the filter event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Custom filter function."
                        },
                        {
                            "name": "onBeforeCellEditHide",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "ColumnEvent",
                                    "description": "Custom event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke before the cell editor is hidden."
                        },
                        {
                            "name": "onBeforeCellEditShow",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "ColumnEvent",
                                    "description": "Custom event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke before the cell editor is shown. To prevent editor from showing return false or originalEvent.preventDefault()."
                        },
                        {
                            "name": "onCellEditCancel",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "ColumnEvent",
                                    "description": "Custom event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to execute when editor is cancelled."
                        },
                        {
                            "name": "onCellEditComplete",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "ColumnEvent",
                                    "description": "Custom event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to execute when editor is submitted."
                        },
                        {
                            "name": "onCellEditInit",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "ColumnEvent",
                                    "description": "Custom event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when cell edit is initiated. To prevent editor from showing return false or originalEvent.preventDefault()."
                        },
                        {
                            "name": "onFilterApplyClick",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "ColumnFilterApplyClickEvent",
                                    "description": "Custom filter event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the apply button is clicked."
                        },
                        {
                            "name": "onFilterClear",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when the filter meta is cleared."
                        },
                        {
                            "name": "onFilterConstraintAdd",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "ColumnFilterConstraintAddEvent",
                                    "description": "Custom filter event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a new constraint is added."
                        },
                        {
                            "name": "onFilterConstraintRemove",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "ColumnFilterConstraintRemoveEvent",
                                    "description": "Custom filter event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a constraint is removed."
                        },
                        {
                            "name": "onFilterMatchModeChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "ColumnFilterMatchModeChangeEvent",
                                    "description": "Custom filter event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the match mode option is changed."
                        },
                        {
                            "name": "onFilterOperatorChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "ColumnFilterOperatorChangeEvent",
                                    "description": "Custom filter event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the filter operator option is changed."
                        },
                        {
                            "name": "sortFunction",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "ColumnSortEvent",
                                    "description": "Custom sort event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Sort function for custom sorting."
                        }
                    ]
                }
            }
        },
        "events": {
            "description": "Defines the custom events used by the component's callbacks.",
            "values": {
                "ColumnEvent": {
                    "description": "Custom event.",
                    "relatedProp": "cellEditValidator",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Original event triggered."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Value of the element."
                        },
                        {
                            "name": "field",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Field name of the column."
                        },
                        {
                            "name": "rowData",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Data of the selected row."
                        },
                        {
                            "name": "rowIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Index of the selected row."
                        },
                        {
                            "name": "cellIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Index of the selected cell."
                        },
                        {
                            "name": "selected",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether the element is selected or not."
                        },
                        {
                            "name": "column",
                            "optional": false,
                            "readonly": false,
                            "type": "Column",
                            "description": "Column of the element."
                        },
                        {
                            "name": "newRowData",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "New data of the row."
                        },
                        {
                            "name": "newValue",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "New value of the element."
                        }
                    ]
                },
                "ColumnSortEvent": {
                    "description": "Custom sort event.",
                    "relatedProp": "sortFunction",
                    "props": [
                        {
                            "name": "field",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Field name of the column."
                        },
                        {
                            "name": "order",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | null | 0 | 1 | -1",
                            "description": "Sort order of the column."
                        },
                        {
                            "name": "data",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Data to be sorted."
                        },
                        {
                            "name": "multiSortMeta",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnSortMetaData[]",
                            "description": "Array of multiple sort metadata for multi-column sorting."
                        }
                    ]
                },
                "ColumnFilterApplyClickEvent": {
                    "description": "Custom filter event.",
                    "relatedProp": "onFilterApplyClick",
                    "props": [
                        {
                            "name": "field",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Field name of the column."
                        },
                        {
                            "name": "constraints",
                            "optional": false,
                            "readonly": false,
                            "type": "ColumnFilterMetaData[]",
                            "description": "Array of ColumnFilterMetaData objects representing the constraints."
                        }
                    ]
                },
                "ColumnFilterMatchModeChangeEvent": {
                    "description": "Custom filter event.",
                    "relatedProp": "onFilterMatchModeChange",
                    "props": [
                        {
                            "name": "field",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Field name of the column."
                        },
                        {
                            "name": "matchMode",
                            "optional": false,
                            "readonly": false,
                            "type": "\"endsWith\" | \"startsWith\" | \"custom\" | \"contains\" | \"in\" | \"equals\" | \"notEquals\" | \"lt\" | \"lte\" | \"gt\" | \"gte\"",
                            "description": "Type of filter match."
                        }
                    ]
                },
                "ColumnFilterOperatorChangeEvent": {
                    "description": "Custom filter event.",
                    "relatedProp": "onFilterOperatorChange",
                    "props": [
                        {
                            "name": "field",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Field name of the column."
                        },
                        {
                            "name": "operator",
                            "optional": false,
                            "readonly": false,
                            "type": "\"and\" | \"or\"",
                            "description": "Logical operator for the filter."
                        }
                    ]
                },
                "ColumnFilterConstraintAddEvent": {
                    "description": "Custom filter event.",
                    "relatedProp": "onFilterConstraintAdd",
                    "props": [
                        {
                            "name": "field",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Field name of the column."
                        },
                        {
                            "name": "constraint",
                            "optional": false,
                            "readonly": false,
                            "type": "ColumnFilterMetaData",
                            "description": "Array of ColumnFilterMetaData objects representing the constraints."
                        }
                    ],
                    "extendedBy": "ColumnFilterConstraintRemoveEvent"
                },
                "ColumnFilterConstraintRemoveEvent": {
                    "description": "Custom filter event.",
                    "relatedProp": "onFilterConstraintRemove",
                    "props": [
                        {
                            "name": "field",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Field name of the column."
                        },
                        {
                            "name": "constraint",
                            "optional": false,
                            "readonly": false,
                            "type": "ColumnFilterMetaData",
                            "description": "Array of ColumnFilterMetaData objects representing the constraints."
                        }
                    ]
                },
                "ColumnFilterEvent": {
                    "description": "Custom filter event.",
                    "relatedProp": "filterFunction",
                    "props": [
                        {
                            "name": "rowData",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Data of the current row.\""
                        },
                        {
                            "name": "filters",
                            "optional": false,
                            "readonly": false,
                            "type": "ColumnFilterMeta",
                            "description": "Object containing filter metadata for all columns."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Additional properties passed to the filter function."
                        },
                        {
                            "name": "column",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Object containing metadata for the current column, including filter metadata, field name, and column properties."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "ColumnPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ColumnProps"
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "ColumnState"
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "ColumnContext"
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTablePassThroughOptions"
                        }
                    ],
                    "callbacks": []
                },
                "ColumnContext": {
                    "description": "Defines current options in Column component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "checked",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current checked state of row as a boolean."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current disabled state of row as a boolean."
                        }
                    ],
                    "callbacks": []
                },
                "ColumnState": {
                    "description": "Defines current inline state in Column component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "editing",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current editing state of the body cell."
                        },
                        {
                            "name": "editingRowData",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Current editing row data of the body cell."
                        },
                        {
                            "name": "styleObject",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "description": "Current style of the body cell."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current focused state as a boolean."
                        },
                        {
                            "name": "rowGroupHeaderStyleObject",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "description": "Current style of the rowgroup header."
                        },
                        {
                            "name": "sortableDisabledFields",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "description": "Current sortable disabled fields of the table header."
                        },
                        {
                            "name": "allSortableDisabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current style of the table header."
                        }
                    ],
                    "callbacks": []
                },
                "ColumnPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "headerCell",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughType<HTMLAttributes<HTMLTableCellElement>>",
                            "description": "Uses to pass attributes to the header cell's DOM element."
                        },
                        {
                            "name": "columnResizer",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the column resizer's DOM element."
                        },
                        {
                            "name": "headerContent",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the header content's DOM element."
                        },
                        {
                            "name": "headerTitle",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the header title's DOM element."
                        },
                        {
                            "name": "sort",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the sort's DOM element."
                        },
                        {
                            "name": "sortIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the sort's DOM element."
                        },
                        {
                            "name": "sortBadge",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the sort badge's DOM element."
                        },
                        {
                            "name": "headerCheckboxWrapper",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the checkbox wrapper's DOM element."
                        },
                        {
                            "name": "headerCheckbox",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the header checkbox's DOM element."
                        },
                        {
                            "name": "headerCheckboxIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the header checkbox icon's DOM element."
                        },
                        {
                            "name": "columnFilter",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the column filter's DOM element."
                        },
                        {
                            "name": "filterInput",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the filter input's DOM element."
                        },
                        {
                            "name": "filterMenuButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughType<HTMLAttributes<HTMLButtonElement>>",
                            "description": "Uses to pass attributes to the filter menu button's DOM element."
                        },
                        {
                            "name": "headerFilterClearButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughType<HTMLAttributes<HTMLButtonElement>>",
                            "description": "Uses to pass attributes to the header filter clear button's DOM element."
                        },
                        {
                            "name": "filterClearIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the filter clear icon's DOM element."
                        },
                        {
                            "name": "filterOverlay",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the filter overlay's DOM element."
                        },
                        {
                            "name": "filterRowItems",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughType<HTMLAttributes<HTMLUListElement>>",
                            "description": "Uses to pass attributes to the filter row items' DOM element."
                        },
                        {
                            "name": "filterRowItem",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughType<HTMLAttributes<HTMLLIElement>>",
                            "description": "Uses to pass attributes to the filter row item's DOM element."
                        },
                        {
                            "name": "filterSeparator",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughType<HTMLAttributes<HTMLLIElement>>",
                            "description": "Uses to pass attributes to the filter separator's DOM element."
                        },
                        {
                            "name": "filterOperator",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the filter operator's DOM element."
                        },
                        {
                            "name": "filterOperatorDropdown",
                            "optional": true,
                            "readonly": false,
                            "type": "DropdownPassThroughOptions",
                            "description": "Uses to pass attributes to the Dropdown component."
                        },
                        {
                            "name": "filterConstraints",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the filter constraints' DOM element."
                        },
                        {
                            "name": "filterConstraint",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the filter constraint's DOM element."
                        },
                        {
                            "name": "filterMatchModeDropdown",
                            "optional": true,
                            "readonly": false,
                            "type": "DropdownPassThroughOptions",
                            "description": "Uses to pass attributes to the Dropdown component."
                        },
                        {
                            "name": "filterRemove",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the filter remove button container's DOM element."
                        },
                        {
                            "name": "filterRemoveButton",
                            "optional": true,
                            "readonly": false,
                            "type": "DropdownPassThroughOptions",
                            "description": "Uses to pass attributes to the Button component."
                        },
                        {
                            "name": "filterAddRule",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the filter add rule's DOM element."
                        },
                        {
                            "name": "filterAddRuleButton",
                            "optional": true,
                            "readonly": false,
                            "type": "DropdownPassThroughOptions",
                            "description": "Uses to pass attributes to the Button component."
                        },
                        {
                            "name": "filterButtonbar",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the filter buttonbar's DOM element."
                        },
                        {
                            "name": "filterClearButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions",
                            "description": "Uses to pass attributes to the Button component."
                        },
                        {
                            "name": "filterApplyButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions",
                            "description": "Uses to pass attributes to the Button component."
                        },
                        {
                            "name": "bodyCell",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughType<HTMLAttributes<HTMLTableCellElement>>",
                            "description": "Uses to pass attributes to the body cell's DOM element."
                        },
                        {
                            "name": "rowGroupToggler",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the rowgroup toggler's DOM element."
                        },
                        {
                            "name": "rowGroupTogglerIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the rowgroup toggler icon's DOM element."
                        },
                        {
                            "name": "columnTitle",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the column title's DOM element."
                        },
                        {
                            "name": "radiobuttonWrapper",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the radiobutton wrapper's DOM element."
                        },
                        {
                            "name": "radiobutton",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the radiobutton's DOM element."
                        },
                        {
                            "name": "radiobuttonIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the radiobutton icon's DOM element."
                        },
                        {
                            "name": "checkboxWrapper",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the checkbox wrapper's DOM element."
                        },
                        {
                            "name": "checkbox",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the checkbox's DOM element."
                        },
                        {
                            "name": "checkboxIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the checkbox icon's DOM element."
                        },
                        {
                            "name": "rowToggler",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the rowtoggler's DOM element."
                        },
                        {
                            "name": "rowTogglerIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the rowtoggler icon's DOM element."
                        },
                        {
                            "name": "rowEditorInitButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughType<HTMLAttributes<HTMLButtonElement>>",
                            "description": "Uses to pass attributes to the row editor init button's DOM element."
                        },
                        {
                            "name": "rowEditorInitIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the row editor init icon's DOM element."
                        },
                        {
                            "name": "rowEditorEditButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughType<HTMLAttributes<HTMLButtonElement>>",
                            "description": "Uses to pass attributes to the row editor edit button's DOM element."
                        },
                        {
                            "name": "rowEditorEditIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the row editor edit icon's DOM element."
                        },
                        {
                            "name": "rowEditorCancelButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughType<HTMLAttributes<HTMLButtonElement>>",
                            "description": "Uses to pass attributes to the row editor cancel button's DOM element."
                        },
                        {
                            "name": "rowEditorCancelIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the row editor cancel icon's DOM element."
                        },
                        {
                            "name": "hiddenHeaderInputWrapper",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the hidden input wrapper's DOM element."
                        },
                        {
                            "name": "hiddenInputWrapper",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the hidden input wrapper's DOM element."
                        },
                        {
                            "name": "hiddenInput",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughType<HTMLAttributes<HTMLInputElement>>",
                            "description": "Uses to pass attributes to the hidden input's DOM element."
                        }
                    ],
                    "callbacks": []
                },
                "ColumnHeaderOptions": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Additional properties passed to the body component."
                        }
                    ],
                    "callbacks": [],
                    "extendedBy": "ColumnFooterOptions"
                },
                "ColumnFooterOptions": {
                    "description": "Column Header Options",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Additional properties passed to the body component."
                        }
                    ],
                    "callbacks": [],
                    "extendedTypes": "ColumnHeaderOptions"
                },
                "ColumnBodyOptions": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "column",
                            "optional": false,
                            "readonly": false,
                            "type": "Column",
                            "description": "Column of the options."
                        },
                        {
                            "name": "field",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Field name of the column."
                        },
                        {
                            "name": "rowIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Index of the row."
                        },
                        {
                            "name": "props",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "description": "Additional properties passed to the body component."
                        },
                        {
                            "name": "frozenRow",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether the row is frozen or not."
                        },
                        {
                            "name": "expander",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnBodyExpanderOptions",
                            "description": "Options for the expander component."
                        },
                        {
                            "name": "rowEditor",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnBodyRowEditorOptions",
                            "description": "Options for the row editor component."
                        }
                    ],
                    "callbacks": []
                },
                "ColumnBodyExpanderOptions": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Class name of the options."
                        },
                        {
                            "name": "iconClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Class name of the options icon."
                        },
                        {
                            "name": "element",
                            "optional": true,
                            "readonly": false,
                            "type": "Element",
                            "description": "Custom JSX element for the options."
                        }
                    ],
                    "callbacks": [
                        {
                            "name": "onClick",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "any",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Event on click of the expander."
                        }
                    ]
                },
                "ColumnBodyRowEditorOptions": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "editing",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether row is in editing mode."
                        },
                        {
                            "name": "element",
                            "optional": true,
                            "readonly": false,
                            "type": "Element",
                            "description": "Custom JSX element for the options."
                        },
                        {
                            "name": "saveClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Class name of the save button."
                        },
                        {
                            "name": "saveIconClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Class name of the save icon."
                        },
                        {
                            "name": "cancelClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Class name of the cancel button."
                        },
                        {
                            "name": "cancelIconClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Class name of the cancel icon."
                        },
                        {
                            "name": "initClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Class name of the init button."
                        },
                        {
                            "name": "initIconClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Class name of the init icon."
                        }
                    ],
                    "callbacks": [
                        {
                            "name": "onSaveClick",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "any",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Event on save click of the row editor."
                        },
                        {
                            "name": "onCancelClick",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "any",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Event on cancel click of the row editor."
                        },
                        {
                            "name": "onInitClick",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "any",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Event on init click of the row editor."
                        }
                    ]
                },
                "ColumnEditorOptions": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "node",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "description": "Node element of the editor."
                        },
                        {
                            "name": "rowData",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Data of the edited row."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Value of the editor."
                        },
                        {
                            "name": "column",
                            "optional": false,
                            "readonly": false,
                            "type": "Column",
                            "description": "Column of the editor."
                        },
                        {
                            "name": "field",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Field name of the column."
                        },
                        {
                            "name": "rowIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Index of the edited row."
                        },
                        {
                            "name": "frozenRow",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether the row is frozen or not."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Additional properties passed to the body component."
                        }
                    ],
                    "callbacks": [
                        {
                            "name": "editorCallback",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any",
                                    "description": "Browser event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback function triggered on editor change."
                        }
                    ]
                },
                "ColumnFilterModelOptions": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "ColumnFilterMetaData | ColumnFilterMetaDataWithConstraint"
                        }
                    ],
                    "callbacks": []
                },
                "ColumnFilterClearTemplateOptions": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "field",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Field name of the column."
                        },
                        {
                            "name": "filterModel",
                            "optional": false,
                            "readonly": false,
                            "type": "ColumnFilterModelOptions",
                            "description": "Object containing column filter model options."
                        }
                    ],
                    "callbacks": [
                        {
                            "name": "filterClearCallback",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback function to clear the filters."
                        }
                    ]
                },
                "ColumnFilterApplyTemplateOptions": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "field",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Field name of the column."
                        },
                        {
                            "name": "filterModel",
                            "optional": false,
                            "readonly": false,
                            "type": "ColumnFilterModelOptions",
                            "description": "Object containing column filter model options."
                        }
                    ],
                    "callbacks": [
                        {
                            "name": "filterApplyCallback",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": true,
                                    "type": "any",
                                    "description": "Value of the filter."
                                },
                                {
                                    "name": "index",
                                    "optional": true,
                                    "type": "number",
                                    "description": "Index of the filter."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback function to apply the filters with optional value and index parameters."
                        }
                    ],
                    "extendedBy": "ColumnFilterHeaderTemplateOptions,ColumnFilterFooterTemplateOptions"
                },
                "ColumnFilterHeaderTemplateOptions": {
                    "description": "Column Filter Header Template Opitons",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "field",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Field name of the column."
                        },
                        {
                            "name": "filterModel",
                            "optional": false,
                            "readonly": false,
                            "type": "ColumnFilterModelOptions",
                            "description": "Object containing column filter model options."
                        }
                    ],
                    "callbacks": [
                        {
                            "name": "filterApplyCallback",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": true,
                                    "type": "any",
                                    "description": "Value of the filter."
                                },
                                {
                                    "name": "index",
                                    "optional": true,
                                    "type": "number",
                                    "description": "Index of the filter."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback function to apply the filters with optional value and index parameters."
                        }
                    ],
                    "extendedTypes": "ColumnFilterApplyTemplateOptions"
                },
                "ColumnFilterFooterTemplateOptions": {
                    "description": "Column Filter Footer Template Opitons",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "field",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Field name of the column."
                        },
                        {
                            "name": "filterModel",
                            "optional": false,
                            "readonly": false,
                            "type": "ColumnFilterModelOptions",
                            "description": "Object containing column filter model options."
                        }
                    ],
                    "callbacks": [
                        {
                            "name": "filterApplyCallback",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": true,
                                    "type": "any",
                                    "description": "Value of the filter."
                                },
                                {
                                    "name": "index",
                                    "optional": true,
                                    "type": "number",
                                    "description": "Index of the filter."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback function to apply the filters with optional value and index parameters."
                        }
                    ],
                    "extendedTypes": "ColumnFilterApplyTemplateOptions"
                },
                "ColumnFilterElementTemplateOptions": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "field",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Field name of the column."
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Index of the filter."
                        },
                        {
                            "name": "filterModel",
                            "optional": false,
                            "readonly": false,
                            "type": "ColumnFilterModelOptions",
                            "description": "Object containing column filter model options."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Value of the filter."
                        }
                    ],
                    "callbacks": [
                        {
                            "name": "filterApplyCallback",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": true,
                                    "type": "any",
                                    "description": "Value of the filter."
                                },
                                {
                                    "name": "index",
                                    "optional": true,
                                    "type": "number",
                                    "description": "Index of the filter."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback function to apply the filters with optional value and index parameters."
                        },
                        {
                            "name": "filterCallback",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": true,
                                    "type": "any",
                                    "description": "Value of the filter."
                                },
                                {
                                    "name": "index",
                                    "optional": true,
                                    "type": "number",
                                    "description": "Index of the filter."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback function with optional value and index parameters."
                        }
                    ]
                },
                "ColumnSortMetaData": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "field",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Field name of the column."
                        },
                        {
                            "name": "order",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | null | 0 | 1 | -1",
                            "description": "Sort order of the column."
                        }
                    ],
                    "callbacks": [],
                    "extendedBy": "ColumnSortEvent"
                },
                "ColumnFilterMetaData": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Value of the filter."
                        },
                        {
                            "name": "matchMode",
                            "optional": false,
                            "readonly": false,
                            "type": "\"endsWith\" | \"startsWith\" | \"custom\" | \"contains\" | \"in\" | \"equals\" | \"notEquals\" | \"lt\" | \"lte\" | \"gt\" | \"gte\"",
                            "description": "Type of filter match."
                        }
                    ],
                    "callbacks": []
                },
                "ColumnFilterMetaDataWithConstraint": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "operator",
                            "optional": false,
                            "readonly": false,
                            "type": "\"and\" | \"or\"",
                            "description": "Logical operator for the constraints."
                        },
                        {
                            "name": "constraints",
                            "optional": false,
                            "readonly": false,
                            "type": "ColumnFilterMetaData[]",
                            "description": "Array of ColumnFilterMetaData objects representing the constraints."
                        }
                    ],
                    "callbacks": []
                },
                "ColumnFilterMeta": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "ColumnFilterMetaData"
                        }
                    ],
                    "callbacks": []
                },
                "ColumnFilterMatchModeOptions": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "string"
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ColumnPassThroughType": {
                    "values": "PassThroughType<T, ColumnPassThroughMethodOptions>"
                }
            }
        }
    },
    "columngroup": {
        "description": "Columns can be grouped at header and footer sections by defining a ColumnGroup component.\nIt is a helper component for DataTable.\n\n[Live Demo](https://www.primereact.org/datatable/)",
        "components": {
            "ColumnGroup": {
                "description": "It is a helper component for DataTable.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                },
                "props": {
                    "description": "Defines valid properties in ColumnGroup component.",
                    "values": [
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnGroupPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "ColumnGroupPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ColumnGroupProps"
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTablePassThroughOptions"
                        }
                    ],
                    "callbacks": []
                },
                "ColumnGroupPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnGroupPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ColumnGroupPassThroughType": {
                    "values": "PassThroughType<T, ColumnGroupPassThroughMethodOptions>"
                }
            }
        }
    },
    "confirmdialog": {
        "description": "ConfirmDialog uses a Dialog UI with confirmDialog method or <ConfirmDialog> tag.\n\n[Live Demo](https://www.primereact.org/confirmdialog)",
        "components": {
            "ConfirmDialog": {
                "description": "ConfirmDialog uses a Dialog UI with confirmDialog method or <ConfirmDialog> tag.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "confirm",
                            "parameters": [
                                {
                                    "name": "props",
                                    "type": "ConfirmDialogProps",
                                    "description": "All component props"
                                }
                            ],
                            "returnType": "void",
                            "description": "Used to call/update the component manually"
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in ConfirmDialog component. In addition to these, all properties of  dialog  can be used in this component.",
                    "values": [
                        {
                            "name": "tagKey",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Unique tag key used to separate the confirmDialog components in the page."
                        },
                        {
                            "name": "visible",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Specifies the visibility of the confirm dialog."
                        },
                        {
                            "name": "message",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Message of the confirmation."
                        },
                        {
                            "name": "rejectLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "No",
                            "description": "Label of the reject button."
                        },
                        {
                            "name": "acceptLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "Yes",
                            "description": "Label of the accept button."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<ConfirmDialogProps>",
                            "default": "",
                            "description": "Icon to display next to the message."
                        },
                        {
                            "name": "rejectIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<ConfirmDialogProps>",
                            "default": "",
                            "description": "Icon of the reject button."
                        },
                        {
                            "name": "acceptIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<ConfirmDialogProps>",
                            "default": "",
                            "description": "Icon of the accept button."
                        },
                        {
                            "name": "rejectClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the reject button."
                        },
                        {
                            "name": "acceptClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the accept button."
                        },
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "null | HTMLElement | \"self\"",
                            "default": "document.body",
                            "description": "DOM element instance where the overlay panel should be mounted. Valid values are any DOM Element and \"self\". The \"self\" value is used to render a component where it is located."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the element."
                        },
                        {
                            "name": "footer",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Footer content of the confirm dialog."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "ConfirmDialogPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ariaCloseIconLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a string that labels the close icon."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "blockScroll",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether background scroll should be blocked when dialog is visible."
                        },
                        {
                            "name": "breakpoints",
                            "optional": true,
                            "readonly": false,
                            "type": "DialogBreakpoints",
                            "default": "",
                            "description": "Object literal to define widths per screen size."
                        },
                        {
                            "name": "closable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Adds a close icon to the header to hide the dialog."
                        },
                        {
                            "name": "closeOnEscape",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Specifies if pressing escape key should hide the dialog."
                        },
                        {
                            "name": "contentClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the content section."
                        },
                        {
                            "name": "contentStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Style of the content section."
                        },
                        {
                            "name": "dismissableMask",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Specifies if clicking the modal background should hide the dialog."
                        },
                        {
                            "name": "draggable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Enables dragging to change the position using header."
                        },
                        {
                            "name": "focusOnShow",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "When enabled, first button receives focus on show."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Title content of the dialog."
                        },
                        {
                            "name": "headerClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the header section."
                        },
                        {
                            "name": "closeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<DialogProps>",
                            "default": "",
                            "description": "Icon to display in the dialog close button."
                        },
                        {
                            "name": "headerStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Style of the header section."
                        },
                        {
                            "name": "icons",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Custom icons template for the header."
                        },
                        {
                            "name": "id",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Unique identifier of the element."
                        },
                        {
                            "name": "keepInViewport",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Keeps dialog in the viewport."
                        },
                        {
                            "name": "maskClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the mask."
                        },
                        {
                            "name": "maskStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the mask."
                        },
                        {
                            "name": "maximizable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the dialog can be displayed full screen."
                        },
                        {
                            "name": "maximized",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, the dialog is initially displayed full screen."
                        },
                        {
                            "name": "minX",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Minimum value for the left coordinate of dialog in dragging."
                        },
                        {
                            "name": "minY",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Minimum value for the top coordinate of dialog in dragging."
                        },
                        {
                            "name": "modal",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Defines if background should be blocked when dialog is displayed."
                        },
                        {
                            "name": "position",
                            "optional": true,
                            "readonly": false,
                            "type": "\"center\" | \"left\" | \"top\" | \"bottom\" | \"right\" | \"bottom-right\" | \"bottom-left\" | \"top-right\" | \"top-left\"",
                            "default": "center",
                            "description": "Position of the dialog, options are \"center\", \"top\", \"bottom\", \"left\", \"right\", \"top-left\", \"top-right\", \"bottom-left\" or \"bottom-right\"."
                        },
                        {
                            "name": "resizable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Enables resizing of the content."
                        },
                        {
                            "name": "rtl",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled dialog is displayed in RTL direction."
                        },
                        {
                            "name": "showHeader",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show the header or not."
                        },
                        {
                            "name": "maximizeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<DialogProps>",
                            "default": "",
                            "description": "Icon to display in the dialog maximize button when dialog is not maximized."
                        },
                        {
                            "name": "minimizeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<DialogProps>",
                            "default": "",
                            "description": "Icon to display in the dialog maximize button when dialog is maximized."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "transitionOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSTransitionProps",
                            "default": "",
                            "description": "The properties of CSSTransition can be customized, except for \"nodeRef\" and \"in\" properties."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onHide",
                            "parameters": [
                                {
                                    "name": "result",
                                    "optional": false,
                                    "type": "string"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when confirm dialog is hidden."
                        },
                        {
                            "name": "accept",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to execute when action is confirmed."
                        },
                        {
                            "name": "reject",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to execute when action is rejected."
                        },
                        {
                            "name": "onClick",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "PointerEvent<HTMLElement>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when dialog is clicked."
                        },
                        {
                            "name": "onDrag",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DragEvent<HTMLElement>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when dragging dialog."
                        },
                        {
                            "name": "onDragEnd",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DragEvent<HTMLElement>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when dialog dragging is completed."
                        },
                        {
                            "name": "onDragStart",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DragEvent<HTMLElement>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when dialog dragging is initiated."
                        },
                        {
                            "name": "onMaskClick",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "MouseEvent<HTMLElement, MouseEvent>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the mask is clicked."
                        },
                        {
                            "name": "onMaximize",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DialogMaximizeEvent",
                                    "description": "Custom click event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when toggle maximize icon is clicked."
                        },
                        {
                            "name": "onResize",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "MouseEvent<HTMLElement, MouseEvent>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke while resizing dialog."
                        },
                        {
                            "name": "onResizeEnd",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "MouseEvent<HTMLElement, MouseEvent>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when dialog resizing is completed."
                        },
                        {
                            "name": "onResizeStart",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "MouseEvent<HTMLElement, MouseEvent>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when dialog resizing is initiated."
                        },
                        {
                            "name": "onShow",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when dialog is showed."
                        }
                    ]
                }
            }
        },
        "functions": {
            "description": "Defines the custom functions used by the module.",
            "values": {
                "confirmDialog": {
                    "name": "confirmDialog",
                    "parameters": [
                        {
                            "name": "props",
                            "type": "ConfirmDialogProps"
                        }
                    ],
                    "returnType": "ConfirmDialogReturn"
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "ConfirmDialogThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ConfirmDialogProps"
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "ConfirmDialogState"
                        }
                    ],
                    "callbacks": []
                },
                "ConfirmDialogPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ConfirmDialogPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "ConfirmDialogPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "headerTitle",
                            "optional": true,
                            "readonly": false,
                            "type": "ConfirmDialogPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the header title's DOM element."
                        },
                        {
                            "name": "headerIcons",
                            "optional": true,
                            "readonly": false,
                            "type": "ConfirmDialogPassThroughType<SVGProps<SVGSVGElement> | HTMLAttributes<SVGSVGElement | HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the header icons' DOM element."
                        },
                        {
                            "name": "closeButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ConfirmDialogPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the close button's component."
                        },
                        {
                            "name": "closeButtonIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ConfirmDialogPassThroughType<SVGProps<SVGSVGElement> | HTMLAttributes<SVGSVGElement | HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the close button icon's component."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "ConfirmDialogPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "ConfirmDialogPassThroughType<SVGProps<SVGSVGElement> | HTMLAttributes<SVGSVGElement | HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the icon's DOM element."
                        },
                        {
                            "name": "message",
                            "optional": true,
                            "readonly": false,
                            "type": "ConfirmDialogPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the message's DOM element."
                        },
                        {
                            "name": "footer",
                            "optional": true,
                            "readonly": false,
                            "type": "ConfirmDialogPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the footer's DOM element."
                        },
                        {
                            "name": "rejectButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions",
                            "description": "Uses to pass attributes to the Button component."
                        },
                        {
                            "name": "acceptButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions",
                            "description": "Uses to pass attributes to the Button component."
                        }
                    ],
                    "callbacks": []
                },
                "ConfirmDialogState": {
                    "description": "Defines current inline state in ConfirmDialog component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "visible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current visible state as a boolean."
                        },
                        {
                            "name": "confirmation",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Current confirmation message."
                        }
                    ],
                    "callbacks": []
                },
                "ConfirmDialogOptions": {
                    "description": "Custom confirm dialog options",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "acceptClassName",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the accept button."
                        },
                        {
                            "name": "rejectClassName",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the reject button."
                        },
                        {
                            "name": "acceptLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Label of the accept button."
                        },
                        {
                            "name": "rejectLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Label of the reject button."
                        },
                        {
                            "name": "element",
                            "optional": false,
                            "readonly": false,
                            "type": "ReactNode",
                            "description": "Default element created by the component."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ConfirmDialogProps",
                            "description": "All component props"
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "callbacks": [
                        {
                            "name": "accept",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to execute when action is confirmed."
                        },
                        {
                            "name": "reject",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to execute when action is rejected."
                        }
                    ]
                },
                "ConfirmDialogReturn": {
                    "description": "Object returned by the  confirmDialog  method.",
                    "relatedProp": "",
                    "props": [],
                    "callbacks": [
                        {
                            "name": "show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Used to show the dialog."
                        },
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Used to hide the dialog."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ConfirmDialogPassThroughType": {
                    "values": "PassThroughType<T, ConfirmDialogThroughMethodOptions>"
                }
            }
        }
    },
    "confirmpopup": {
        "description": "ConfirmPopup displays a confirmation overlay displayed relatively to its target.\n\n[Live Demo](https://www.primereact.org/confirmpopup)",
        "components": {
            "ConfirmPopup": {
                "description": "ConfirmPopup displays a confirmation overlay displayed relatively to its target.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "confirm",
                            "parameters": [
                                {
                                    "name": "props",
                                    "type": "ConfirmPopupProps",
                                    "description": "All component props"
                                }
                            ],
                            "returnType": "void",
                            "description": "Used to call/update the component manually"
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in ConfirmPopup component.",
                    "values": [
                        {
                            "name": "tagKey",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Unique tag key used to separate the confirmPopup components in the page."
                        },
                        {
                            "name": "target",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLElement",
                            "default": "",
                            "description": "Target element to align the popup."
                        },
                        {
                            "name": "visible",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Specifies the visibility of the confirm popup."
                        },
                        {
                            "name": "message",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Message of the confirmation."
                        },
                        {
                            "name": "rejectLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "No",
                            "description": "Label of the reject button."
                        },
                        {
                            "name": "acceptLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "Yes",
                            "description": "Label of the accept button."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<ConfirmPopupProps>",
                            "default": "",
                            "description": "Icon to display next to the message."
                        },
                        {
                            "name": "rejectIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<ConfirmPopupProps>",
                            "default": "",
                            "description": "Icon of the reject button."
                        },
                        {
                            "name": "acceptIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<ConfirmPopupProps>",
                            "default": "",
                            "description": "Icon of the accept button."
                        },
                        {
                            "name": "rejectClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the reject button."
                        },
                        {
                            "name": "acceptClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the accept button."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the element."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the element."
                        },
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "null | HTMLElement | \"self\"",
                            "default": "document.body",
                            "description": "DOM element instance where the overlay panel should be mounted. Valid values are any DOM Element and 'self'. The self value is used to render a component where it is located."
                        },
                        {
                            "name": "dismissable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Enables to hide the popup when outside is clicked."
                        },
                        {
                            "name": "footer",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Footer content of the confirm popup."
                        },
                        {
                            "name": "transitionOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSTransitionProps",
                            "default": "",
                            "description": "The properties of CSSTransition can be customized, except for \"nodeRef\" and \"in\" properties."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "ConfirmPopupPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onShow",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when overlay panel becomes visible."
                        },
                        {
                            "name": "onHide",
                            "parameters": [
                                {
                                    "name": "result",
                                    "optional": false,
                                    "type": "string"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when confirm popup is hidden."
                        },
                        {
                            "name": "accept",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to execute when action is confirmed."
                        },
                        {
                            "name": "reject",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to execute when action is rejected."
                        }
                    ]
                }
            }
        },
        "functions": {
            "description": "Defines the custom functions used by the module.",
            "values": {
                "confirmPopup": {
                    "name": "confirmPopup",
                    "parameters": [
                        {
                            "name": "props",
                            "type": "ConfirmPopupProps"
                        }
                    ],
                    "returnType": "ConfirmPopupReturn"
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "ConfirmPopupPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ConfirmPopupProps"
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "ConfirmPopupState"
                        }
                    ],
                    "callbacks": []
                },
                "ConfirmPopupPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ConfirmPopupPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "ConfirmPopupPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "ConfirmPopupPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the icon's DOM element."
                        },
                        {
                            "name": "message",
                            "optional": true,
                            "readonly": false,
                            "type": "ConfirmPopupPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the message's DOM element."
                        },
                        {
                            "name": "footer",
                            "optional": true,
                            "readonly": false,
                            "type": "ConfirmPopupPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the footer's DOM element."
                        },
                        {
                            "name": "rejectButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions",
                            "description": "Uses to pass attributes to the Button component."
                        },
                        {
                            "name": "acceptButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions",
                            "description": "Uses to pass attributes to the Button component."
                        }
                    ],
                    "callbacks": []
                },
                "ConfirmPopupState": {
                    "description": "Defines current inline state in ConfirmPopup component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "visible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current visible state as a boolean."
                        },
                        {
                            "name": "reshow",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current reshow state as a boolean."
                        }
                    ],
                    "callbacks": []
                },
                "ConfirmPopupOptions": {
                    "description": "Custom confirm popup options",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "className",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "acceptClassName",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the accept button."
                        },
                        {
                            "name": "rejectClassName",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the reject button."
                        },
                        {
                            "name": "acceptLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Label of the accept button."
                        },
                        {
                            "name": "rejectLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Label of the reject button."
                        },
                        {
                            "name": "element",
                            "optional": false,
                            "readonly": false,
                            "type": "ReactNode",
                            "description": "Default element created by the component."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ConfirmPopupProps",
                            "description": "All component props"
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "callbacks": [
                        {
                            "name": "accept",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to execute when action is confirmed."
                        },
                        {
                            "name": "reject",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to execute when action is rejected."
                        }
                    ]
                },
                "ConfirmPopupReturn": {
                    "description": "Object returned by the  confirmPopup  method.",
                    "relatedProp": "",
                    "props": [],
                    "callbacks": [
                        {
                            "name": "show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Used to show the popup."
                        },
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Used to hide the popup."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ConfirmPopupPassThroughType": {
                    "values": "PassThroughType<T, ConfirmPopupPassThroughMethodOptions>"
                }
            }
        }
    },
    "contextmenu": {
        "description": "ContextMenu displays an overlay menu on right click of its target. Note that components like DataTable has special integration with ContextMenu. Refer to documentation of the individual documentation of the components having a special integration.\n\n[Live Demo](https://www.primereact.org/contextmenu/)",
        "components": {
            "ContextMenu": {
                "description": "ContextMenu displays an overlay menu on right click of its target. Note that components like DataTable has special integration with ContextMenu. Refer to documentation of the individual documentation of the components having a special integration.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "show",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Browser event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Displays the popup menu."
                        },
                        {
                            "name": "hide",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Browser event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Hides the popup menu."
                        },
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in ContextMenu component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "values": [
                        {
                            "name": "model",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuItem[]",
                            "default": "",
                            "description": "An array of menuitems."
                        },
                        {
                            "name": "global",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Attaches the menu to document instead of a particular item."
                        },
                        {
                            "name": "autoZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to automatically manage layering."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "breakpoint",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "The breakpoint to define the maximum width boundary when responsiveness is enabled."
                        },
                        {
                            "name": "scrollHeight",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "400px",
                            "description": "Maximum height of the options panel on responsive mode."
                        },
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "null | HTMLElement | \"self\"",
                            "default": "document.body",
                            "description": "DOM element instance where the overlay panel should be mounted. Valid values are any DOM Element and 'self'. The self value is used to render a component where it is located."
                        },
                        {
                            "name": "transitionOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSTransitionProps",
                            "default": "",
                            "description": "The properties of CSSTransition can be customized, except for \"nodeRef\" and \"in\" properties."
                        },
                        {
                            "name": "submenuIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<ContextMenuProps>",
                            "default": "",
                            "description": "Icon of the submenu."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "ContextMenuPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onShow",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a popup menu is shown."
                        },
                        {
                            "name": "onHide",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a popup menu is hidden."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "ContextMenuPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ContextMenuProps"
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "ContextMenuState"
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "ContextMenuContext"
                        }
                    ],
                    "callbacks": []
                },
                "ContextMenuPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ContextMenuPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "menu",
                            "optional": true,
                            "readonly": false,
                            "type": "ContextMenuPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the list's DOM element."
                        },
                        {
                            "name": "menuitem",
                            "optional": true,
                            "readonly": false,
                            "type": "ContextMenuPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the list item's DOM element."
                        },
                        {
                            "name": "action",
                            "optional": true,
                            "readonly": false,
                            "type": "ContextMenuPassThroughType<HTMLAttributes<HTMLAnchorElement>>",
                            "description": "Uses to pass attributes to the action's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "ContextMenuPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the icon's DOM element."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "ContextMenuPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the label's DOM element."
                        },
                        {
                            "name": "submenuIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ContextMenuPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the submenu icon's DOM element."
                        },
                        {
                            "name": "separator",
                            "optional": true,
                            "readonly": false,
                            "type": "ContextMenuPassThroughType<HTMLAttributes<HTMLLIElement>>",
                            "description": "Uses to pass attributes to the separator's DOM element."
                        }
                    ],
                    "callbacks": []
                },
                "ContextMenuState": {
                    "description": "Defines current inline state in ContextMenu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "visible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current visible state as a boolean."
                        },
                        {
                            "name": "reshow",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current reshow state as a boolean."
                        },
                        {
                            "name": "resetMenu",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current resetMenu state as a boolean."
                        },
                        {
                            "name": "attributeSelector",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current attributeSelector visible state as a string."
                        }
                    ],
                    "callbacks": []
                },
                "ContextMenuContext": {
                    "description": "Defines current options in ContextMenu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current active state of menuitem as a boolean."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ContextMenuPassThroughType": {
                    "values": "PassThroughType<T, ContextMenuPassThroughMethodOptions>"
                }
            }
        }
    },
    "csstransition": {
        "description": "CSSTransition component wraps [ReactCSSTransition](https://reactcommunity.org/react-transition-group/css-transition) API.\nIt allows us to easily manage animations. All PrimeReact components use this component.\n\n[Live Demo](https://www.primereact.org/dropdown/)",
        "components": {
            "CSSTransition": {
                "description": "CSSTransition component wraps [ReactCSSTransition](https://reactcommunity.org/react-transition-group/css-transition) API.\nIt allows us to easily manage animations. All PrimeReact components use this component.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                },
                "props": {
                    "description": "Defines valid properties in [ReactCSSTransition](https://reactcommunity.org/react-transition-group/css-transition) API. In addition to these, all properties of HTMLElement can be used in this component.",
                    "values": []
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        }
    },
    "datascroller": {
        "description": "DataScroller displays data with on demand loading using scroll.\n\n[Live Demo](https://www.primereact.org/datascroller/)",
        "components": {
            "DataScroller": {
                "description": "DataScroller displays data with on demand loading using scroll.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "load",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Used to load data manually"
                        },
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in DataScroller component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "values": [
                        {
                            "name": "buffer",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0.9",
                            "description": "Number of buffer size."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "emptyMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "No records found",
                            "description": "Text to display when there is no data."
                        },
                        {
                            "name": "footer",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Label of footer."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Label of header."
                        },
                        {
                            "name": "inline",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if the event target to listen the scroll event is the element itself."
                        },
                        {
                            "name": "lazy",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if data is loaded and interacted with in lazy manner."
                        },
                        {
                            "name": "loader",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Determines whether data is loaded by a target element."
                        },
                        {
                            "name": "rows",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Number of rows to fetch in a load event."
                        },
                        {
                            "name": "scrollHeight",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Max height of the content area in inline mode."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "An array of objects to display."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "DataScrollerPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "itemTemplate",
                            "parameters": [
                                {
                                    "name": "item",
                                    "optional": false,
                                    "type": "any",
                                    "description": "Current item"
                                }
                            ],
                            "returnType": "ReactNode",
                            "description": "Function that gets an item in the value and returns the content for it."
                        },
                        {
                            "name": "onLazyLoad",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataScrollerLazyLoadEvents",
                                    "description": "Custom lazy event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke in lazy mode to load new data."
                        }
                    ]
                }
            }
        },
        "events": {
            "description": "Defines the custom events used by the component's callbacks.",
            "values": {
                "DataScrollerLazyLoadEvents": {
                    "description": "Custom lazy event.",
                    "relatedProp": "onLazyLoad",
                    "props": [
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "First row offset"
                        },
                        {
                            "name": "rows",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Number of rows per page"
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "DataScrollerPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "DataScrollerProps"
                        }
                    ],
                    "callbacks": []
                },
                "DataScrollerPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "DataScrollerPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "DataScrollerPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "footer",
                            "optional": true,
                            "readonly": false,
                            "type": "DataScrollerPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the footer's DOM element."
                        },
                        {
                            "name": "item",
                            "optional": true,
                            "readonly": false,
                            "type": "DataScrollerPassThroughType<HTMLAttributes<HTMLLIElement>>",
                            "description": "Uses to pass attributes to the item's DOM element."
                        },
                        {
                            "name": "emptyMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "DataScrollerPassThroughType<HTMLAttributes<HTMLLIElement>>",
                            "description": "Uses to pass attributes to the emptyMessage's DOM element."
                        },
                        {
                            "name": "list",
                            "optional": true,
                            "readonly": false,
                            "type": "DataScrollerPassThroughType<HTMLAttributes<HTMLUListElement>>",
                            "description": "Uses to pass attributes to the list's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "DataScrollerPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the list's DOM element."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "DataScrollerPassThroughType": {
                    "values": "PassThroughType<T, DataScrollerPassThroughMethodOptions>"
                }
            }
        }
    },
    "datatable": {
        "description": "DataTable displays data in tabular format.\n\n[Live Demo](https://www.primereact.org/datatable/)",
        "components": {
            "DataTable": {
                "description": "DataTable displays data in tabular format.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "clearState",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Clears the table state."
                        },
                        {
                            "name": "closeEditingCell",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Closes the current editing cell when incell editing is enabled."
                        },
                        {
                            "name": "exportCSV",
                            "parameters": [
                                {
                                    "name": "options",
                                    "type": "Object",
                                    "description": "Options to export"
                                }
                            ],
                            "returnType": "void",
                            "description": "Exports the data to CSV format."
                        },
                        {
                            "name": "filter",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "T",
                                    "description": "The filter value"
                                },
                                {
                                    "name": "field",
                                    "type": "string",
                                    "description": "The filter field"
                                },
                                {
                                    "name": "mode",
                                    "type": "\"endsWith\" | \"startsWith\" | \"custom\" | \"contains\" | \"in\" | \"equals\" | \"notEquals\" | \"lt\" | \"lte\" | \"gt\" | \"gte\" | \"notContains\" | \"between\" | \"dateIs\" | \"dateIsNot\" | \"dateBefore\" | \"dateAfter\"",
                                    "description": "Filter match mode"
                                },
                                {
                                    "name": "index",
                                    "type": "number",
                                    "description": "Index of the filter"
                                }
                            ],
                            "returnType": "void",
                            "description": "Filters the data."
                        },
                        {
                            "name": "reset",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Resets sort, filter, paginator and columnorder state."
                        },
                        {
                            "name": "resetColumnOrder",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Resets column order when reorderableColumns is enabled."
                        },
                        {
                            "name": "resetScroll",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Resets scroll position."
                        },
                        {
                            "name": "restoreColumnWidths",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Restores the column widths."
                        },
                        {
                            "name": "restoreState",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Restores the table state."
                        },
                        {
                            "name": "restoreTableState",
                            "parameters": [
                                {
                                    "name": "state",
                                    "type": "any",
                                    "description": "The state to restore"
                                }
                            ],
                            "returnType": "void",
                            "description": "Stored states can be loaded at any time using this method if there is a stateStorage property."
                        },
                        {
                            "name": "saveState",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Saves the state."
                        },
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        },
                        {
                            "name": "getTable",
                            "parameters": [],
                            "returnType": "HTMLTableElement",
                            "description": "Used to get container element."
                        },
                        {
                            "name": "getVirtualScroller",
                            "parameters": [],
                            "returnType": "VirtualScroller",
                            "description": "Used to get the virtual scroller."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in DataTable component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "values": [
                        {
                            "name": "id",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Unique identifier of the element."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "TValue",
                            "default": "",
                            "description": "An array of objects to display."
                        },
                        {
                            "name": "alwaysShowPaginator",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show it even there is only one page."
                        },
                        {
                            "name": "breakpoint",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "960px",
                            "description": "The breakpoint to define the maximum width boundary when using stack responsive layout."
                        },
                        {
                            "name": "checkIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<DataTableProps<TValue>>",
                            "default": "",
                            "description": "Icon to display in the checkbox."
                        },
                        {
                            "name": "cellSelection",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to cell selection is enabled or not."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "collapsedRowIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<DataTableProps<TValue>>",
                            "default": "",
                            "description": "Icon of the row toggler to display the row as collapsed."
                        },
                        {
                            "name": "columnResizeMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"fit\" | \"expand\"",
                            "default": "fit",
                            "description": "Used to define the resize mode of the columns, valid values are \"fit\" and \"expand\"."
                        },
                        {
                            "name": "compareSelectionBy",
                            "optional": true,
                            "readonly": false,
                            "type": "\"equals\" | \"deepEquals\"",
                            "default": "deepEquals",
                            "description": "Algorithm to define if a row is selected, valid values are \"equals\" that compares by reference and \"deepEquals\" that compares all fields."
                        },
                        {
                            "name": "contextMenuSelection",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Selected row in single mode or an array of values in multiple mode."
                        },
                        {
                            "name": "csvSeparator",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ",",
                            "description": "Character to use as the csv separator."
                        },
                        {
                            "name": "currentPageReportTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "({currentPage} of {totalPages})",
                            "description": "Template of the current page report element. Available placeholders are {currentPage}, {totalPages}, {rows}, {first}, {last} and {totalRecords}"
                        },
                        {
                            "name": "dataKey",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "({currentPage} of {totalPages})",
                            "description": "Name of the field that uniquely identifies a record in the data. Should be a unique business key to prevent re-rendering."
                        },
                        {
                            "name": "defaultSortOrder",
                            "optional": true,
                            "readonly": false,
                            "type": "null | 0 | 1 | -1",
                            "default": "({currentPage} of {totalPages})",
                            "description": "Default sort order of an unsorted column."
                        },
                        {
                            "name": "dragSelection",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, a rectangle that can be dragged can be used to make a range selection."
                        },
                        {
                            "name": "editMode",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "cell",
                            "description": "Defines editing mode, options are \"cell\" and \"row\"."
                        },
                        {
                            "name": "editingRows",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTableValueArray | DataTableEditingRows",
                            "default": "",
                            "description": "A collection of rows to represent the current editing data in row edit mode."
                        },
                        {
                            "name": "emptyMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Text to display when there is no data."
                        },
                        {
                            "name": "expandableRowGroups",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Makes row groups toggleable, default is false."
                        },
                        {
                            "name": "expandedRowIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<DataTableProps<TValue>>",
                            "default": "",
                            "description": "Icon of the row toggler to display the row as expanded."
                        },
                        {
                            "name": "expandedRows",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTableValueArray | DataTableExpandedRows",
                            "default": "",
                            "description": "A collection of rows or a map object row data keys that are expanded."
                        },
                        {
                            "name": "exportFilename",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "download",
                            "description": "Name of the exported file."
                        },
                        {
                            "name": "filterDelay",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "300",
                            "description": "Delay in milliseconds before filtering the data."
                        },
                        {
                            "name": "filterDisplay",
                            "optional": true,
                            "readonly": false,
                            "type": "\"menu\" | \"row\"",
                            "default": "menu",
                            "description": "Layout of the filter elements, valid values are \"row\" and \"menu\"."
                        },
                        {
                            "name": "filterLocale",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "undefined",
                            "description": "Locale to use in filtering. The default locale is the host environment's current locale."
                        },
                        {
                            "name": "filterIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<DataTable<TValue>>",
                            "default": "",
                            "description": "Icon to display the current filtering status."
                        },
                        {
                            "name": "filterClearIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<DataTable<TValue>>",
                            "default": "",
                            "description": "Icon to display when the filter can be cleared."
                        },
                        {
                            "name": "filters",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTableFilterMeta",
                            "default": "",
                            "description": "An array of FilterMetadata objects to provide external filters."
                        },
                        {
                            "name": "first",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Index of the first row to be displayed."
                        },
                        {
                            "name": "footer",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTableFooterTemplateType<TValue>",
                            "default": "",
                            "description": "Custom footer content of the table."
                        },
                        {
                            "name": "footerColumnGroup",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "ColumnGroup component for footer."
                        },
                        {
                            "name": "frozenValue",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTableRowDataArray<TValue>",
                            "default": "",
                            "description": "Items of the frozen part in scrollable DataTable."
                        },
                        {
                            "name": "frozenWidth",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Width of the frozen part in scrollable DataTable."
                        },
                        {
                            "name": "globalFilter",
                            "optional": true,
                            "readonly": false,
                            "type": "null | string",
                            "default": "",
                            "description": "Value of the global filter to use in filtering."
                        },
                        {
                            "name": "globalFilterFields",
                            "optional": true,
                            "readonly": false,
                            "type": "string[]",
                            "default": "",
                            "description": "Define fields to be filtered globally."
                        },
                        {
                            "name": "globalFilterMatchMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"endsWith\" | \"startsWith\" | \"custom\" | \"contains\" | \"in\" | \"equals\" | \"notEquals\" | \"lt\" | \"lte\" | \"gt\" | \"gte\"",
                            "default": "contains",
                            "description": "Defines filterMatchMode; \"startsWith\", \"contains\", \"endsWith\", \"equals\", \"notEquals\", \"in\", \"lt\", \"lte\", \"gt\", \"gte\" and \"custom\"."
                        },
                        {
                            "name": "groupRowsBy",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Used for either be grouped by a separate grouping row or using rowspan."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTableHeaderTemplateType<TValue>",
                            "default": "",
                            "description": "Custom header content of the table."
                        },
                        {
                            "name": "headerColumnGroup",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "ColumnGroup component for header."
                        },
                        {
                            "name": "lazy",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if data is loaded and interacted with in lazy manner."
                        },
                        {
                            "name": "loading",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Displays a loader to indicate data load is in progress."
                        },
                        {
                            "name": "loadingIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<DataTableProps<TValue>>",
                            "default": "",
                            "description": "The icon to show while indicating data load is in progress."
                        },
                        {
                            "name": "metaKeySelection",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Defines whether metaKey is requred or not for the selection. When true metaKey needs to be pressed to select or unselect an item and when set to false selection of each item can be toggled individually. On touch enabled devices, metaKeySelection is turned off automatically."
                        },
                        {
                            "name": "multiSortMeta",
                            "optional": true,
                            "readonly": false,
                            "type": "null | DataTableSortMeta[]",
                            "default": "",
                            "description": "An array of SortMeta objects to sort the data by default in multiple sort mode."
                        },
                        {
                            "name": "pageLinkSize",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "5",
                            "description": "Number of page links to display."
                        },
                        {
                            "name": "paginator",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified as true, enables the pagination."
                        },
                        {
                            "name": "paginatorClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the paginator element."
                        },
                        {
                            "name": "paginatorDropdownAppendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "null | HTMLElement | \"self\"",
                            "default": "document.body",
                            "description": "DOM element instance where the overlay panel should be mounted. Valid values are any DOM Element and 'self'. The self value is used to render a component where it is located."
                        },
                        {
                            "name": "paginatorLeft",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Content for the left side of the paginator."
                        },
                        {
                            "name": "paginatorPosition",
                            "optional": true,
                            "readonly": false,
                            "type": "\"both\" | \"top\" | \"bottom\"",
                            "default": "bottom",
                            "description": "Position of the paginator, options are \"top\",\"bottom\" or \"both\"."
                        },
                        {
                            "name": "paginatorRight",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Content for the right side of the paginator."
                        },
                        {
                            "name": "paginatorTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "PaginatorTemplate",
                            "default": "FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown",
                            "description": "Template of the paginator. For details, refer to the template section of the paginator documentation for further options."
                        },
                        {
                            "name": "removableSort",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, columns can have an un-sorted state."
                        },
                        {
                            "name": "reorderableColumns",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, columns can be reordered using drag and drop."
                        },
                        {
                            "name": "reorderableRows",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, rows can be reordered using drag and drop."
                        },
                        {
                            "name": "reorderIndicatorDownIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<DataTableProps<TValue>>",
                            "default": "",
                            "description": "Defines the reorder indicator down icon."
                        },
                        {
                            "name": "reorderIndicatorUpIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<DataTableProps<TValue>>",
                            "default": "",
                            "description": "Defines the reorder indicator up icon."
                        },
                        {
                            "name": "resizableColumns",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, columns can be resized using drag and drop."
                        },
                        {
                            "name": "responsiveLayout",
                            "optional": true,
                            "readonly": false,
                            "type": "\"scroll\" | \"stack\"",
                            "default": "scroll",
                            "description": "Defines the responsive mode, valid options are \"stack\" and \"scroll\".",
                            "deprecated": "since version 9.2.0"
                        },
                        {
                            "name": "rowEditorCancelIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<DataTableProps<TValue>>",
                            "default": "",
                            "description": "Icon to display in the row editor cancel button."
                        },
                        {
                            "name": "rowEditorInitIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<DataTableProps<TValue>>",
                            "default": "",
                            "description": "Icon to display in the row editor init button."
                        },
                        {
                            "name": "rowEditorSaveIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<DataTableProps<TValue>>",
                            "default": "",
                            "description": "Icon to display in the row editor save button."
                        },
                        {
                            "name": "rowGroupFooterTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTableRowGroupFooterTemplateType<TValue>",
                            "default": "",
                            "description": "Function to provide the content of row group footer."
                        },
                        {
                            "name": "rowGroupHeaderTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTableRowGroupHeaderTemplateType<TValue>",
                            "default": "",
                            "description": "Function to provide the content of row group header."
                        },
                        {
                            "name": "rowGroupMode",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines the row grouping mode, valid values are \"subheader\" and \"rowgroup\"."
                        },
                        {
                            "name": "rowHover",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "When enabled, background of the rows change on hover."
                        },
                        {
                            "name": "rows",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Number of rows to display per page."
                        },
                        {
                            "name": "rowsPerPageOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "number[]",
                            "default": "",
                            "description": "Array of integer values to display inside rows per page dropdown."
                        },
                        {
                            "name": "scrollHeight",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Height of the scroll viewport."
                        },
                        {
                            "name": "scrollable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified, enables horizontal and/or vertical scrolling."
                        },
                        {
                            "name": "selectAll",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified, selects all rows on page."
                        },
                        {
                            "name": "selectOnEdit",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Determines whether the cell editor will be opened when clicking to select any row on Selection and Cell Edit modes."
                        },
                        {
                            "name": "selection",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTableSelection<TValue>",
                            "default": "true",
                            "description": "Selected row in single mode or an array of values in multiple mode."
                        },
                        {
                            "name": "selectionAutoFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "When a selectable row is clicked on RadioButton and Checkbox selection, it automatically decides whether to focus on elements such as checkbox or radio."
                        },
                        {
                            "name": "selectionAriaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "A field property from the row to add Select {field} and Unselect {field} ARIA labels to checkbox/radio buttons."
                        },
                        {
                            "name": "selectionMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"multiple\" | \"checkbox\" | \"single\" | \"radiobutton\"",
                            "default": "",
                            "description": "Specifies the selection mode, valid values are \"single\", \"multiple\", \"radiobutton\" and \"checkbox\"."
                        },
                        {
                            "name": "selectionPageOnly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled with paginator and checkbox selection mode, the select all checkbox in the header will select all rows on the current page."
                        },
                        {
                            "name": "showGridlines",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to show grid lines between cells."
                        },
                        {
                            "name": "showHeaders",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show headers."
                        },
                        {
                            "name": "showSelectAll",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether to show the select all checkbox inside the datatable's header."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "\"small\" | \"normal\" | \"large\"",
                            "default": "normal",
                            "description": "Define to set alternative sizes. Valid values: \"small\", \"normal\" and \"large\"."
                        },
                        {
                            "name": "sortField",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Property of a row data used for sorting, defaults to field."
                        },
                        {
                            "name": "sortMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"multiple\" | \"single\"",
                            "default": "single",
                            "description": "Defines whether sorting works on single column or on multiple columns."
                        },
                        {
                            "name": "sortIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<DataTable<TValue>>",
                            "default": "",
                            "description": "Icon to display the current sorting status."
                        },
                        {
                            "name": "sortOrder",
                            "optional": true,
                            "readonly": false,
                            "type": "null | 0 | 1 | -1",
                            "default": "",
                            "description": "Order to sort the data by default."
                        },
                        {
                            "name": "stateKey",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Unique identifier of a stateful table to use in state storage."
                        },
                        {
                            "name": "stateStorage",
                            "optional": true,
                            "readonly": false,
                            "type": "\"custom\" | \"local\" | \"session\"",
                            "default": "session",
                            "description": "Defines where a stateful table keeps its state, valid values are \"session\" for sessionStorage, \"local\" for localStorage and \"custom\"."
                        },
                        {
                            "name": "stripedRows",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to displays rows with alternating colors."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "tabIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "tableClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the table element."
                        },
                        {
                            "name": "tableStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the table element."
                        },
                        {
                            "name": "totalRecords",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Number of total records, defaults to length of value when not defined."
                        },
                        {
                            "name": "virtualScrollerOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "VirtualScrollerProps",
                            "default": "",
                            "description": "Whether to use the virtualScroller feature. The properties of VirtualScroller component can be used like an object in it.\n\nNote: Currently only vertical orientation mode is supported."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "cellClassName",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any",
                                    "description": "Value of the cell."
                                },
                                {
                                    "name": "options",
                                    "optional": false,
                                    "type": "DataTableCellClassNameOptions<TValue>",
                                    "description": "ClassName options."
                                }
                            ],
                            "returnType": "undefined | string | object",
                            "description": "Function that takes the cell data and returns an object in {'styleclass' : condition} format to define a classname for a particular now."
                        },
                        {
                            "name": "customRestoreState",
                            "parameters": [],
                            "returnType": "undefined | object",
                            "description": "A function to implement custom restoreState with stateStorage=\"custom\". Need to return state object."
                        },
                        {
                            "name": "customSaveState",
                            "parameters": [
                                {
                                    "name": "state",
                                    "optional": false,
                                    "type": "object",
                                    "description": "The object to be stored."
                                }
                            ],
                            "returnType": "void",
                            "description": "A function to implement custom saveState with stateStorage=\"custom\"."
                        },
                        {
                            "name": "exportFunction",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableExportFunctionEvent<TValue>",
                                    "description": "Custom export function event."
                                }
                            ],
                            "returnType": "any",
                            "description": "A function to implement custom export. Need to return string value."
                        },
                        {
                            "name": "isDataSelectable",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableDataSelectableEvent",
                                    "description": "Custom data selectable event."
                                }
                            ],
                            "returnType": "undefined | null | boolean",
                            "description": "Function that returns a boolean to decide whether the data should be selectable."
                        },
                        {
                            "name": "onAllRowsSelect",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableSelectEvent",
                                    "description": "Custom select event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when all rows are selected using the header checkbox."
                        },
                        {
                            "name": "onAllRowsUnselect",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableUnselectEvent",
                                    "description": "Custom unselect event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when all rows are unselected using the header checkbox."
                        },
                        {
                            "name": "onCellClick",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableCellClickEvent<TValue>",
                                    "description": "Custom cell click event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on cell click."
                        },
                        {
                            "name": "onCellSelect",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableCellClickEvent<TValue>",
                                    "description": "Custom select event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on cell select."
                        },
                        {
                            "name": "onCellUnselect",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableCellClickEvent<TValue>",
                                    "description": "Custom unselect event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on cell unselect."
                        },
                        {
                            "name": "onColReorder",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableColReorderEvent",
                                    "description": "Custom column reorder event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a column is reordered."
                        },
                        {
                            "name": "onColumnResizeEnd",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableColumnResizeEndEvent",
                                    "description": "Custom column resize end event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a column is resized."
                        },
                        {
                            "name": "onColumnResizerClick",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableColumnResizerClickEvent",
                                    "description": "Custom column resizer click event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a resizer element is clicked."
                        },
                        {
                            "name": "onColumnResizerDoubleClick",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableColumnResizerClickEvent",
                                    "description": "Custom column resizer double click event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a resizer element is double clicked."
                        },
                        {
                            "name": "onContextMenu",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableRowEvent",
                                    "description": "Custom row event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a context menu is clicked."
                        },
                        {
                            "name": "onContextMenuSelectionChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableContextMenuSelectionChangeEvent<TValue>",
                                    "description": "Custom row event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a row selected with right click."
                        },
                        {
                            "name": "onFilter",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableStateEvent",
                                    "description": "Custom state event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on filtering."
                        },
                        {
                            "name": "onPage",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableStateEvent",
                                    "description": "Custom state event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on pagination."
                        },
                        {
                            "name": "onRowClick",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableRowClickEvent",
                                    "description": "Custom row click event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a row is clicked."
                        },
                        {
                            "name": "onRowCollapse",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableRowEvent",
                                    "description": "Custom row event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a row is collapsed."
                        },
                        {
                            "name": "onRowDoubleClick",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableRowClickEvent",
                                    "description": "Custom click event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a row is double clicked."
                        },
                        {
                            "name": "onRowEditCancel",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableRowEditEvent",
                                    "description": "Custom row edit event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the cancel icon is clicked on row editing mode."
                        },
                        {
                            "name": "onRowEditChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableRowEditEvent",
                                    "description": "Custom row edit event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the cancel icon is clicked on row editing mode."
                        },
                        {
                            "name": "onRowEditComplete",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableRowEditCompleteEvent",
                                    "description": "Custom row edit complete event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when row edit is completed."
                        },
                        {
                            "name": "onRowEditInit",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableRowEditEvent",
                                    "description": "Custom row edit event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the editing icon is clicked on row editing mode."
                        },
                        {
                            "name": "onRowEditSave",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableRowEditSaveEvent",
                                    "description": "Custom row edit save event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the save icon is clicked on row editing mode."
                        },
                        {
                            "name": "onRowExpand",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableRowEvent",
                                    "description": "Custom row event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a row is expanded."
                        },
                        {
                            "name": "onRowMouseEnter",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableRowMouseEvent",
                                    "description": "Custom row mouse event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a row is hovered with mouse."
                        },
                        {
                            "name": "onRowMouseLeave",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableRowMouseEvent",
                                    "description": "Custom row mouse event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a row is navigated away from with mouse."
                        },
                        {
                            "name": "onRowReorder",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableRowReorderEvent<TValue>",
                                    "description": "Custom row reorder event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to update the new order."
                        },
                        {
                            "name": "onRowSelect",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableSelectEvent",
                                    "description": "Custom select event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a row is selected."
                        },
                        {
                            "name": "onRowToggle",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableRowToggleEvent",
                                    "description": "Custom row toggle event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a row is toggled or collapsed."
                        },
                        {
                            "name": "onRowUnselect",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableUnselectEvent",
                                    "description": "Custom unselect event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a row is unselected."
                        },
                        {
                            "name": "onSelectAllChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableSelectAllChangeEvent",
                                    "description": "Custom select all change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when select all value changes."
                        },
                        {
                            "name": "onSelectionChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableSelectionChangeEvent<TValue>",
                                    "description": "Custom selection change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when selection changes."
                        },
                        {
                            "name": "onSort",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableStateEvent",
                                    "description": "Custom state event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on sort."
                        },
                        {
                            "name": "onStateRestore",
                            "parameters": [
                                {
                                    "name": "state",
                                    "optional": false,
                                    "type": "object",
                                    "description": "Table state."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke table state is restored."
                        },
                        {
                            "name": "onStateSave",
                            "parameters": [
                                {
                                    "name": "state",
                                    "optional": false,
                                    "type": "object",
                                    "description": "Table state."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke table state is saved."
                        },
                        {
                            "name": "onValueChange",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "DataTableRowDataArray<TValue>",
                                    "description": "Value displayed by the table."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke after filtering and sorting to pass the rendered value."
                        },
                        {
                            "name": "rowClassName",
                            "parameters": [
                                {
                                    "name": "data",
                                    "optional": false,
                                    "type": "DataTableRowData<TValue>",
                                    "description": "Value displayed by the table."
                                },
                                {
                                    "name": "options",
                                    "optional": false,
                                    "type": "DataTableRowClassNameOptions<TValue>"
                                }
                            ],
                            "returnType": "undefined | string | object",
                            "description": "Function that takes the row data and returns an object in {'styleclass' : condition} format to define a classname for a particular now."
                        },
                        {
                            "name": "rowEditValidator",
                            "parameters": [
                                {
                                    "name": "data",
                                    "optional": false,
                                    "type": "DataTableRowData<TValue>",
                                    "description": "Editing row data."
                                },
                                {
                                    "name": "options",
                                    "optional": false,
                                    "type": "DataTableRowEditValidatorOptions<TValue>"
                                }
                            ],
                            "returnType": "undefined | boolean",
                            "description": "Callback to invoke to validate the editing row when the save icon is clicked on row editing mode."
                        },
                        {
                            "name": "rowExpansionTemplate",
                            "parameters": [
                                {
                                    "name": "data",
                                    "optional": false,
                                    "type": "DataTableRowData<TValue>",
                                    "description": "Editing row data."
                                },
                                {
                                    "name": "options",
                                    "optional": false,
                                    "type": "DataTableRowExpansionTemplate",
                                    "description": "Options for the row expansion template."
                                }
                            ],
                            "returnType": "ReactNode",
                            "description": "Function that receives the row data as the parameter and returns the expanded row content. You can override the rendering of the content by setting options.customRendering = true."
                        },
                        {
                            "name": "showRowReorderElement",
                            "parameters": [
                                {
                                    "name": "data",
                                    "optional": false,
                                    "type": "DataTableRowData<TValue>",
                                    "description": "Editing row data."
                                },
                                {
                                    "name": "options",
                                    "optional": false,
                                    "type": "DataTableShowRowReorderElementOptions<TValue>",
                                    "description": "Options for the row reorder element."
                                }
                            ],
                            "returnType": "undefined | null | boolean",
                            "description": "Function that returns a boolean by passing the row data to decide if the row reorder element should be displayed per row."
                        },
                        {
                            "name": "showSelectionElement",
                            "parameters": [
                                {
                                    "name": "data",
                                    "optional": false,
                                    "type": "DataTableRowData<TValue>",
                                    "description": "Editing row data."
                                },
                                {
                                    "name": "options",
                                    "optional": false,
                                    "type": "DataTableShowSelectionElementOptions<TValue>",
                                    "description": "Options for the row reorder element."
                                }
                            ],
                            "returnType": "undefined | null | boolean",
                            "description": "Function that returns a boolean by passing the row data to decide if the radio or checkbox should be displayed per row."
                        }
                    ]
                }
            }
        },
        "events": {
            "description": "Defines the custom events used by the component's callbacks.",
            "values": {
                "DataTableRowToggleEvent": {
                    "description": "Custom row toggle event.",
                    "relatedProp": "onRowToggle",
                    "props": [
                        {
                            "name": "data",
                            "optional": false,
                            "readonly": false,
                            "type": "any[] | DataTableExpandedRows",
                            "description": "Expanded rows."
                        }
                    ]
                },
                "DataTableColumnResizeEndEvent": {
                    "description": "Custom resize end event.",
                    "relatedProp": "onColumnResizeEnd",
                    "props": [
                        {
                            "name": "element",
                            "optional": false,
                            "readonly": false,
                            "type": "HTMLElement",
                            "description": "DOM element of the resized column."
                        },
                        {
                            "name": "column",
                            "optional": false,
                            "readonly": false,
                            "type": "Column",
                            "description": "Properties of the resized column."
                        },
                        {
                            "name": "delta",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Change in column width."
                        }
                    ]
                },
                "DataTableColumnResizerClickEvent": {
                    "description": "Custom column resizer click event.",
                    "relatedProp": "onColumnResizerClick",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "MouseEvent<HTMLElement, MouseEvent>",
                            "description": "Browser event."
                        },
                        {
                            "name": "element",
                            "optional": false,
                            "readonly": false,
                            "type": "HTMLElement",
                            "description": "DOM element of the column."
                        },
                        {
                            "name": "column",
                            "optional": false,
                            "readonly": false,
                            "type": "Column",
                            "description": "Properties of the column."
                        }
                    ]
                },
                "DataTablePageEvent": {
                    "description": "Custom pagination event",
                    "relatedProp": "onPage",
                    "props": [
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Index of the first row."
                        },
                        {
                            "name": "rows",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Rows per page."
                        },
                        {
                            "name": "page",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "description": "The page number of the datatable."
                        },
                        {
                            "name": "pageCount",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "description": "Total number of pages."
                        }
                    ],
                    "extendedBy": "DataTableStateEvent"
                },
                "DataTableSortEvent": {
                    "description": "Custom sort event.",
                    "relatedProp": "onSort",
                    "props": [
                        {
                            "name": "sortField",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Field to sort against."
                        },
                        {
                            "name": "sortOrder",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | null | 0 | 1 | -1",
                            "description": "Sort order as integer."
                        },
                        {
                            "name": "multiSortMeta",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | null | DataTableSortMeta[]",
                            "description": "MultiSort metadata."
                        }
                    ],
                    "extendedBy": "DataTableStateEvent"
                },
                "DataTableFilterEvent": {
                    "description": "Custom filter event.",
                    "relatedProp": "onFilter",
                    "props": [
                        {
                            "name": "filters",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTableFilterMeta",
                            "description": "Collection of active filters."
                        }
                    ],
                    "extendedBy": "DataTableStateEvent"
                },
                "DataTableStateEvent": {
                    "description": "Custom state event containing page, filter and sort states.",
                    "relatedProp": " - ",
                    "props": [
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Index of the first row."
                        },
                        {
                            "name": "rows",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Rows per page."
                        },
                        {
                            "name": "page",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "description": "The page number of the datatable."
                        },
                        {
                            "name": "pageCount",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "description": "Total number of pages."
                        },
                        {
                            "name": "sortField",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Field to sort against."
                        },
                        {
                            "name": "sortOrder",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | null | 0 | 1 | -1",
                            "description": "Sort order as integer."
                        },
                        {
                            "name": "multiSortMeta",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | null | DataTableSortMeta[]",
                            "description": "MultiSort metadata."
                        },
                        {
                            "name": "filters",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTableFilterMeta",
                            "description": "Collection of active filters."
                        }
                    ]
                },
                "DataTableDataSelectableEvent": {
                    "description": "Custom data selectable event.",
                    "relatedProp": "isDataSelectable",
                    "props": [
                        {
                            "name": "data",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTableValue",
                            "description": "Original data of the row."
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Index of the row."
                        }
                    ]
                },
                "DataTableContextMenuSelectionChangeEvent": {
                    "description": "Custom selection change event for context menu.",
                    "relatedProp": "onContextMenuSelectionChange",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Browser event."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTableSelection<TValue>",
                            "description": "Selection object."
                        }
                    ]
                },
                "DataTableSelectionChangeEvent": {
                    "description": "Custom selection change event.",
                    "relatedProp": "onSelectionChange",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Browser event."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTableSelection<TValue>",
                            "description": "Selection object."
                        },
                        {
                            "name": "type",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Type of the selection."
                        }
                    ]
                },
                "DataTableRowEvent": {
                    "description": "Custom context menu event.",
                    "relatedProp": "onContextMenu",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Original event instance."
                        },
                        {
                            "name": "data",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTableValue",
                            "description": "Original rows data."
                        }
                    ],
                    "extendedBy": "DataTableRowEditEvent,DataTableRowEditCompleteEvent"
                },
                "DataTableRowClickEvent": {
                    "description": "Custom row click event.",
                    "relatedProp": "onRowClick",
                    "props": [
                        {
                            "name": "data",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTableValue",
                            "description": "Original rows data."
                        },
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "MouseEvent<HTMLElement, MouseEvent>",
                            "description": "Browser event."
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Clicked row data index"
                        }
                    ]
                },
                "DataTableRowEditEvent": {
                    "description": "Custom row edit event.",
                    "relatedProp": "onRowEditInit",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Original event instance."
                        },
                        {
                            "name": "data",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTableValue",
                            "description": "Original rows data."
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Index of the row."
                        }
                    ],
                    "extendedBy": "DataTableRowEditSaveEvent"
                },
                "DataTableRowEditCompleteEvent": {
                    "description": "Custom row edit complete event.",
                    "relatedProp": "onRowEditComplete",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Original event instance."
                        },
                        {
                            "name": "data",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTableValue",
                            "description": "Original rows data."
                        },
                        {
                            "name": "newData",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTableValue",
                            "description": "Editing rows data."
                        },
                        {
                            "name": "field",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Column field."
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Current editing row data index."
                        }
                    ]
                },
                "DataTableSelectEvent": {
                    "description": "Custom select event.",
                    "relatedProp": "onAllRowsSelect",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Browser event."
                        },
                        {
                            "name": "data",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Selected rows data."
                        },
                        {
                            "name": "type",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | \"all\" | \"checkbox\" | \"radio\" | \"cell\" | \"row\"",
                            "description": "Type of the selection, valid value is \"all\"."
                        }
                    ],
                    "extendedBy": "DataTableUnselectEvent"
                },
                "DataTableUnselectEvent": {
                    "description": "Custom unselect event.",
                    "relatedProp": "onAllRowsUnselect",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Browser event."
                        },
                        {
                            "name": "data",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Selected rows data."
                        },
                        {
                            "name": "type",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | \"all\" | \"checkbox\" | \"radio\" | \"cell\" | \"row\"",
                            "description": "Type of the selection, valid value is \"all\"."
                        }
                    ]
                },
                "DataTableExportFunctionEvent": {
                    "description": "Custom export function event.",
                    "relatedProp": "exportFunction",
                    "props": [
                        {
                            "name": "data",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTableRowDataArray<TValue>",
                            "description": "Field data."
                        },
                        {
                            "name": "field",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Column field."
                        },
                        {
                            "name": "rowData",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTableRowData<TValue>",
                            "description": "Data of the row."
                        },
                        {
                            "name": "column",
                            "optional": false,
                            "readonly": false,
                            "type": "Column",
                            "description": "Column."
                        }
                    ]
                },
                "DataTableColReorderEvent": {
                    "description": "Custom column reorder event.",
                    "relatedProp": "onColReorder",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "DragEvent<HTMLElement>",
                            "description": "Browser event."
                        },
                        {
                            "name": "dragIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Index of the dragged column."
                        },
                        {
                            "name": "dropIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Index of the dropped column."
                        },
                        {
                            "name": "columns",
                            "optional": false,
                            "readonly": false,
                            "type": "ReactElement<any, string | JSXElementConstructor<any>>",
                            "description": "Columns array after reorder."
                        }
                    ]
                },
                "DataTableRowReorderEvent": {
                    "description": "Custom column reorder event.",
                    "relatedProp": "onRowReorder",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "DragEvent<HTMLElement>",
                            "description": "Browser event."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTableRowDataArray<TValue>",
                            "description": "New value after reorder."
                        },
                        {
                            "name": "dragIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Index of the dragged row."
                        },
                        {
                            "name": "dropIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Index of the drop location."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "DataTableHeaderTemplateOptions": {
                    "description": "Custom datatable header template options.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTableProps<TValue>",
                            "description": "The props of the datatable."
                        }
                    ],
                    "callbacks": [],
                    "extendedBy": "DataTableFooterTemplateOptions"
                },
                "DataTableFooterTemplateOptions": {
                    "description": "Custom datatable header template options.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTableProps<TValue>",
                            "description": "The props of the datatable."
                        }
                    ],
                    "callbacks": [],
                    "extendedTypes": "DataTableHeaderTemplateOptions<TValue>"
                },
                "DataTableRowGroupHeaderTemplateOptions": {
                    "description": "Custom datatable row group header template options.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "index of the row group header template."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTableProps<TValue>",
                            "description": "The props of the datatable."
                        },
                        {
                            "name": "customRendering",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Used to override the rendering of the content."
                        }
                    ],
                    "callbacks": [],
                    "extendedBy": "DataTableRowGroupFooterTemplateOptions"
                },
                "DataTableRowGroupFooterTemplateOptions": {
                    "description": "Custom datatable row group footer template options.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "index of the row group header template."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTableProps<T>",
                            "description": "The props of the datatable."
                        },
                        {
                            "name": "customRendering",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Used to override the rendering of the content."
                        },
                        {
                            "name": "colSpan",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Number of columns to span for grouping."
                        }
                    ],
                    "callbacks": [],
                    "extendedTypes": "DataTableRowGroupHeaderTemplateOptions<T>"
                },
                "DataTableSortMeta": {
                    "description": "Custom datatable sort meta",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "field",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Column field to sort against."
                        },
                        {
                            "name": "order",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | null | 0 | 1 | -1",
                            "description": "Sort order as integer."
                        }
                    ],
                    "callbacks": []
                },
                "DataTableFilterMetaData": {
                    "description": "Custom datatable filter metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Value to filter against."
                        },
                        {
                            "name": "matchMode",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | \"endsWith\" | \"startsWith\" | \"custom\" | \"contains\" | \"in\" | \"equals\" | \"notEquals\" | \"lt\" | \"lte\" | \"gt\" | \"gte\" | \"notContains\" | \"between\" | \"dateIs\" | \"dateIsNot\" | \"dateBefore\" | \"dateAfter\"",
                            "description": "Type of filter match."
                        }
                    ],
                    "callbacks": []
                },
                "DataTableOperatorFilterMetaData": {
                    "description": "Custom datatable operator filter metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "operator",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Operator to use for filtering."
                        },
                        {
                            "name": "constraints",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTableFilterMetaData[]",
                            "description": "Operator to use for filtering."
                        }
                    ],
                    "callbacks": []
                },
                "DataTableFilterMeta": {
                    "description": "Custom datatable filter meta.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTableFilterMetaData | DataTableOperatorFilterMetaData"
                        }
                    ],
                    "callbacks": []
                },
                "DataTableExpandedRows": {
                    "description": "Custom datatable expanded rows.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean"
                        }
                    ],
                    "callbacks": []
                },
                "DataTableEditingRows": {
                    "description": "Custom datatable editing rows.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean"
                        }
                    ],
                    "callbacks": []
                },
                "DataTableSelectAllChangeEvent": {
                    "description": "Custom select all change event.",
                    "relatedProp": "onSelectAllChange",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Browser event."
                        },
                        {
                            "name": "checked",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether all data is selected."
                        }
                    ],
                    "callbacks": []
                },
                "DataTableRowMouseEvent": {
                    "description": "Custom row mouse event.",
                    "relatedProp": "onRowMouseEnter",
                    "props": [
                        {
                            "name": "data",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTableValue",
                            "description": "Original rows data."
                        },
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "MouseEvent<HTMLElement, MouseEvent>",
                            "description": "Browser event."
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Clicked row data index"
                        }
                    ],
                    "callbacks": [],
                    "extendedBy": "DataTableRowClickEvent",
                    "extendedTypes": "Omit<DataTableRowEvent, \"originalEvent\">"
                },
                "DataTableCellClickEvent": {
                    "description": "Custom cell click event.",
                    "relatedProp": "onCellClick",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "MouseEvent<HTMLElement, MouseEvent>",
                            "description": "Browser event."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Value of the cell."
                        },
                        {
                            "name": "field",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Column field."
                        },
                        {
                            "name": "rowData",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTableRowData<TValue>",
                            "description": "Data of the row."
                        },
                        {
                            "name": "rowIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Index of the row."
                        },
                        {
                            "name": "cellIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Index of the cell."
                        },
                        {
                            "name": "selected",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether the cell is selected or not."
                        }
                    ],
                    "callbacks": []
                },
                "DataTableRowEditSaveEvent": {
                    "description": "Custom row edit save event.",
                    "relatedProp": "onRowEditSave",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Original event instance."
                        },
                        {
                            "name": "data",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTableValue",
                            "description": "Original rows data."
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Index of the row."
                        },
                        {
                            "name": "valid",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether the row is valid or not."
                        }
                    ],
                    "callbacks": [],
                    "extendedTypes": "DataTableRowEditEvent"
                },
                "DataTableRowExpansionTemplate": {
                    "description": "Options for the row expansion template",
                    "relatedProp": "rowExpansionTemplate",
                    "props": [
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Index of the row."
                        },
                        {
                            "name": "customRendering",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Used to override the rendering of the content."
                        }
                    ],
                    "callbacks": []
                },
                "DataTableRowClassNameOptions": {
                    "description": "Custom row className options.",
                    "relatedProp": "rowClassName",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTableProps<TValue>",
                            "description": "The props of the datatable."
                        }
                    ],
                    "callbacks": []
                },
                "DataTableCellClassNameOptions": {
                    "description": "Custom cell className options.",
                    "relatedProp": "cellClassName",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTableProps<TValue>",
                            "description": "The props of the datatable."
                        },
                        {
                            "name": "column",
                            "optional": false,
                            "readonly": false,
                            "type": "Column",
                            "description": "Column element of the datatable."
                        },
                        {
                            "name": "field",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Column field."
                        },
                        {
                            "name": "frozenRow",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether the row is frozen or not."
                        },
                        {
                            "name": "rowIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Index of the row."
                        }
                    ],
                    "callbacks": []
                },
                "DataTableShowSelectionElementOptions": {
                    "description": "Custom show selection element options.",
                    "relatedProp": "showSelectionElement",
                    "props": [
                        {
                            "name": "rowIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Index of the row."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTableProps<TValue>",
                            "description": "The props of the datatable."
                        }
                    ],
                    "callbacks": []
                },
                "DataTableShowRowReorderElementOptions": {
                    "description": "Custom show row reorder element options.",
                    "relatedProp": "showRowReorderElement",
                    "props": [
                        {
                            "name": "rowIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Index of the row element."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTableProps<TValue>",
                            "description": "The props of the datatable."
                        }
                    ],
                    "callbacks": []
                },
                "DataTableRowEditValidatorOptions": {
                    "description": "Custom row edit validator options.",
                    "relatedProp": "rowEditValidator",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTableProps<TValue>",
                            "description": "The props of the datatable."
                        }
                    ],
                    "callbacks": []
                },
                "DataTableValue": {
                    "description": "Custom value definition.",
                    "relatedProp": "",
                    "props": [],
                    "callbacks": [],
                    "extendedTypes": "Record<string, any>"
                },
                "DataTableValueArray": {
                    "description": "Custom value array definition.",
                    "relatedProp": "",
                    "props": [],
                    "callbacks": [],
                    "extendedTypes": "Array<DataTableValue>"
                },
                "DataTablePassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTableProps<TValue>"
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTableState"
                        }
                    ],
                    "callbacks": []
                },
                "DataTableState": {
                    "description": "Defines current inline state in DataTable component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Current index of first record as a number."
                        },
                        {
                            "name": "rows",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Current number of rows to display in new page as a number."
                        },
                        {
                            "name": "sortField",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | string | Function",
                            "description": "Current sort field."
                        },
                        {
                            "name": "sortOrder",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Current order to sort the data by default."
                        },
                        {
                            "name": "multiSortMeta",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTableSortMeta[]",
                            "description": "Current sortmeta objects to sort the data."
                        },
                        {
                            "name": "filters",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTableFilterMeta",
                            "description": "Current filters object."
                        },
                        {
                            "name": "columnOrder",
                            "optional": false,
                            "readonly": false,
                            "type": "string[]",
                            "description": "Current order of the columns."
                        },
                        {
                            "name": "groupRowsSortMeta",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTableSortMeta",
                            "description": "Current group sortmeta objects to sort the data."
                        },
                        {
                            "name": "editingMeta",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "description": "Current editing meta data."
                        },
                        {
                            "name": "d_rows",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Current number of rows to display in new page as a number."
                        },
                        {
                            "name": "d_filters",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "description": "Current filters object."
                        }
                    ],
                    "callbacks": []
                },
                "DataTablePassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "loadingOverlay",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the loading overlay's DOM element."
                        },
                        {
                            "name": "loadingIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the loading icon's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "paginator",
                            "optional": true,
                            "readonly": false,
                            "type": "PaginatorPassThroughOptions",
                            "description": "Uses to pass attributes to the Paginator component."
                        },
                        {
                            "name": "wrapper",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the wrapper's DOM element."
                        },
                        {
                            "name": "virtualScroller",
                            "optional": true,
                            "readonly": false,
                            "type": "VirtualScrollerPassThroughOptions",
                            "description": "Uses to pass attributes to the VirtualScroller component."
                        },
                        {
                            "name": "table",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughType<HTMLAttributes<HTMLTableElement>>",
                            "description": "Uses to pass attributes to the table's DOM element."
                        },
                        {
                            "name": "virtualScrollerSpacer",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughType<HTMLAttributes<HTMLTableSectionElement>>",
                            "description": "Uses to pass attributes to the virtual scroller spacer's DOM element."
                        },
                        {
                            "name": "footer",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the footer's DOM element."
                        },
                        {
                            "name": "thead",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughType<HTMLAttributes<HTMLTableSectionElement>>",
                            "description": "Uses to pass attributes to the thead's DOM element."
                        },
                        {
                            "name": "headerRow",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughType<HTMLAttributes<HTMLTableRowElement>>",
                            "description": "Uses to pass attributes to the header row's DOM element."
                        },
                        {
                            "name": "tbody",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughType<HTMLAttributes<HTMLTableSectionElement>>",
                            "description": "Uses to pass attributes to the tbody's DOM element."
                        },
                        {
                            "name": "rowgroupHeader",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughType<HTMLAttributes<HTMLTableRowElement>>",
                            "description": "Uses to pass attributes to the rowgroup header's DOM element."
                        },
                        {
                            "name": "rowgroupHeaderName",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the rowgroup header name's DOM element."
                        },
                        {
                            "name": "row",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughType<HTMLAttributes<HTMLTableRowElement>>",
                            "description": "Uses to pass attributes to the row's DOM element."
                        },
                        {
                            "name": "rowExpansion",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughType<HTMLAttributes<HTMLTableRowElement>>",
                            "description": "Uses to pass attributes to the row expansion's DOM element."
                        },
                        {
                            "name": "rowgroupFooter",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughType<HTMLAttributes<HTMLTableRowElement>>",
                            "description": "Uses to pass attributes to the rowgroup footer's DOM element."
                        },
                        {
                            "name": "emptyMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughType<HTMLAttributes<HTMLTableRowElement>>",
                            "description": "Uses to pass attributes to the empty message's DOM element."
                        },
                        {
                            "name": "tfoot",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughType<HTMLAttributes<HTMLTableSectionElement>>",
                            "description": "Uses to pass attributes to the tfoot's DOM element."
                        },
                        {
                            "name": "footerRow",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughType<HTMLAttributes<HTMLTableRowElement>>",
                            "description": "Uses to pass attributes to the footerr ow's DOM element."
                        },
                        {
                            "name": "footerCell",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughType<HTMLAttributes<HTMLTableCellElement>>",
                            "description": "Uses to pass attributes to the footer cell's DOM element."
                        },
                        {
                            "name": "resizeHelper",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the resize helper's DOM element."
                        },
                        {
                            "name": "reorderIndicatorUp",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the reorder indicator up's DOM element."
                        },
                        {
                            "name": "reorderIndicatorUpIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the reorder indicator up icon's DOM element."
                        },
                        {
                            "name": "reorderIndicatorDown",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the reorder indicator down's DOM element."
                        },
                        {
                            "name": "reorderIndicatorDownIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the reorder indicator down icon's DOM element."
                        },
                        {
                            "name": "tooltip",
                            "optional": true,
                            "readonly": false,
                            "type": "TooltipPassThroughOptions",
                            "description": "Uses to pass attributes tooltip's DOM element."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "DataTableHeaderTemplateType": {
                    "values": "React.ReactNode | Function"
                },
                "DataTableFooterTemplateType": {
                    "values": "React.ReactNode | Function"
                },
                "DataTableRowGroupHeaderTemplateType": {
                    "values": "React.ReactNode | Function"
                },
                "DataTableRowGroupFooterTemplateType": {
                    "values": "React.ReactNode | Function"
                },
                "DataTableRowData": {
                    "values": "TValueArray extends (infer TValue)[] ? TValue : never"
                },
                "DataTableRowDataArray": {
                    "values": "DataTableRowData<TValue>[]"
                },
                "DataTableCellSelection": {
                    "values": "{\n    \"cellIndex\": \"number, // Index of the cell.\",\n    \"column\": \"Column, // Column element of the datatable.\",\n    \"field\": \"string, // Column field.\",\n    \"props\": \"ColumnProps, // Properties of the column.\",\n    \"rowData\": \"DataTableRowData<TValue>, // Data of the row.\",\n    \"rowIndex\": \"number, // Index of the row.\",\n    \"selected\": \"boolean, // Whether the row is selected or not.\",\n    \"value\": \"TValue[number][keyof TValue[number]], // Value of the cell.\"\n}"
                },
                "DataTableSelection": {
                    "values": "DataTableRowData<TValue> | DataTableRowDataArray<TValue> | DataTableCellSelection<TValue>"
                },
                "DataTablePassThroughType": {
                    "values": "PassThroughType<T, DataTablePassThroughMethodOptions<DataTableValueArray>>"
                }
            }
        }
    },
    "dataview": {
        "description": "DataView displays data in grid or list layout with pagination and sorting features.\n\n[Live Demo](https://www.primereact.org/dataview/)",
        "components": {
            "DataView": {
                "description": "DataView displays data in grid or list layout with pagination and sorting features.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in DataView component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "values": [
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Header content of the component."
                        },
                        {
                            "name": "footer",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Footer content of the component."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "An array of objects to display."
                        },
                        {
                            "name": "layout",
                            "optional": true,
                            "readonly": false,
                            "type": "\"grid\" | \"list\" | string & Record<string, unknown>",
                            "default": "list",
                            "description": "Layout of the items, valid values are \"list\" and \"grid\"."
                        },
                        {
                            "name": "dataKey",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Name of the field that uniquely identifies a record in the data. Should be a unique business key to prevent re-rendering."
                        },
                        {
                            "name": "rows",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Number of rows to display per page."
                        },
                        {
                            "name": "first",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Index of the first record to render."
                        },
                        {
                            "name": "totalRecords",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Number of total records, defaults to length of value when not defined."
                        },
                        {
                            "name": "paginator",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified as true, enables the pagination."
                        },
                        {
                            "name": "paginatorPosition",
                            "optional": true,
                            "readonly": false,
                            "type": "\"both\" | \"top\" | \"bottom\"",
                            "default": "bottom",
                            "description": "Position of the paginator, options are \"top\",\"bottom\" or \"both\"."
                        },
                        {
                            "name": "alwaysShowPaginator",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show it even there is only one page."
                        },
                        {
                            "name": "paginatorClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the paginator element."
                        },
                        {
                            "name": "paginatorTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "PaginatorTemplate",
                            "default": "FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown",
                            "description": "Template of the paginator. For details, refer to the template section of the paginator documentation for further options."
                        },
                        {
                            "name": "paginatorLeft",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Content for the left side of the paginator."
                        },
                        {
                            "name": "paginatorRight",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Content for the right side of the paginator."
                        },
                        {
                            "name": "pageLinkSize",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "5",
                            "description": "Number of page links to display."
                        },
                        {
                            "name": "paginatorDropdownAppendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "null | HTMLElement | \"self\"",
                            "default": "document.body",
                            "description": "DOM element instance where the overlay panel should be mounted. Valid values are any DOM Element and 'self'. The self value is used to render a component where it is located."
                        },
                        {
                            "name": "rowsPerPageOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "number[]",
                            "default": "",
                            "description": "Array of integer values to display inside rows per page dropdown."
                        },
                        {
                            "name": "currentPageReportTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "({currentPage} of {totalPages})",
                            "description": "Template of the current page report element."
                        },
                        {
                            "name": "emptyMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "No records found.",
                            "description": "Text to display when there is no data."
                        },
                        {
                            "name": "sortField",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Name of the field to sort data by default."
                        },
                        {
                            "name": "sortOrder",
                            "optional": true,
                            "readonly": false,
                            "type": "null | 0 | 1 | -1",
                            "default": "",
                            "description": "Order to sort the data by default."
                        },
                        {
                            "name": "lazy",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if data is loaded and interacted with in lazy manner."
                        },
                        {
                            "name": "loading",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Display loading icon of the button."
                        },
                        {
                            "name": "loadingIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<DataViewProps>",
                            "default": "",
                            "description": "Name of the loading icon or JSX.Element for loading icon."
                        },
                        {
                            "name": "gutter",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the grid structure in the container has gutter. Default value is false."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onPage",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataViewPageEvent",
                                    "description": "Custom page event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on pagination."
                        },
                        {
                            "name": "itemTemplate",
                            "parameters": [
                                {
                                    "name": "item",
                                    "optional": false,
                                    "type": "any",
                                    "description": "Current item."
                                },
                                {
                                    "name": "layout",
                                    "optional": false,
                                    "type": "\"grid\" | \"list\" | string & Record<string, unknown>",
                                    "description": "Current layout."
                                }
                            ],
                            "returnType": "ReactNode",
                            "description": "Function that gets the option along with the layout mode and returns the content."
                        }
                    ]
                }
            }
        },
        "events": {
            "description": "Defines the custom events used by the component's callbacks.",
            "values": {
                "DataViewPageEvent": {
                    "description": "Custom page event.",
                    "relatedProp": "onPage",
                    "props": [
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Index of the first records on page."
                        },
                        {
                            "name": "rows",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Number of records to display per page."
                        },
                        {
                            "name": "page",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Value of the new page."
                        },
                        {
                            "name": "pageCount",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Total number of pages."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "DataViewPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "DataViewProps"
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "DataViewState"
                        }
                    ],
                    "callbacks": []
                },
                "DataViewLayoutOptionsPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "DataViewLayoutOptionsProps"
                        }
                    ],
                    "callbacks": []
                },
                "DataViewPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "DataViewProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "DataViewPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "DataViewPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "paginator",
                            "optional": true,
                            "readonly": false,
                            "type": "PaginatorPassThroughOptions",
                            "description": "Uses to pass attributes to the Paginator component."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "DataViewPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "emptyMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "DataViewPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the empty message's DOM element."
                        },
                        {
                            "name": "footer",
                            "optional": true,
                            "readonly": false,
                            "type": "DataViewPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the footer's DOM element."
                        },
                        {
                            "name": "loadingOverlay",
                            "optional": true,
                            "readonly": false,
                            "type": "DataViewPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the loading overlay's DOM element."
                        },
                        {
                            "name": "loadingIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "DataViewPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the loading icon's DOM element."
                        },
                        {
                            "name": "grid",
                            "optional": true,
                            "readonly": false,
                            "type": "DataViewPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the grid's DOM element."
                        }
                    ],
                    "callbacks": []
                },
                "DataViewState": {
                    "description": "Defines current inline state in DataView component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Current index of first record as a number."
                        },
                        {
                            "name": "rows",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Current number of rows to display in new page as a number."
                        }
                    ],
                    "callbacks": []
                },
                "DataViewLayoutOptionsPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "DataViewLayoutOptionsProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "DataViewLayoutOptionsPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "listButton",
                            "optional": true,
                            "readonly": false,
                            "type": "DataViewLayoutOptionsPassThroughType<HTMLAttributes<HTMLButtonElement>>",
                            "description": "Uses to pass attributes to the list button's DOM element."
                        },
                        {
                            "name": "listIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "DataViewLayoutOptionsPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the list icon's DOM element."
                        },
                        {
                            "name": "gridButton",
                            "optional": true,
                            "readonly": false,
                            "type": "DataViewLayoutOptionsPassThroughType<HTMLAttributes<HTMLButtonElement>>",
                            "description": "Uses to pass attributes to the grid button's DOM element."
                        },
                        {
                            "name": "gridIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "DataViewLayoutOptionsPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the grid icon's DOM element."
                        }
                    ],
                    "callbacks": []
                },
                "DataViewLayoutOptionsChangeEvent": {
                    "description": "Custom data view layout options event.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "MouseEvent<HTMLButtonElement, MouseEvent>",
                            "description": "Browser event."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "\"grid\" | \"list\" | string & Record<string, unknown>",
                            "description": "New value."
                        }
                    ],
                    "callbacks": []
                },
                "DataViewLayoutOptionsProps": {
                    "description": "Custom data view layout options props",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "id",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Unique identifier of the element."
                        },
                        {
                            "name": "layout",
                            "optional": true,
                            "readonly": false,
                            "type": "\"grid\" | \"list\" | string & Record<string, unknown>",
                            "description": "Orientation of the panels, valid values are \"list\" and \"grid\"."
                        },
                        {
                            "name": "listIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<DataViewProps>",
                            "description": "Defines the display mode list icon."
                        },
                        {
                            "name": "gridIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<DataViewProps>",
                            "description": "Defines the display mode grid icon."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "description": "Inline style of the element."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the element."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "description": "Used to get the child elements of the component."
                        }
                    ],
                    "callbacks": [
                        {
                            "name": "onChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataViewLayoutOptionsChangeEvent",
                                    "description": "Custom event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Layout options change callback"
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "DataViewPassThroughType": {
                    "values": "PassThroughType<T, DataViewPassThroughMethodOptions>"
                },
                "DataViewLayoutOptionsPassThroughType": {
                    "values": "PassThroughType<T, DataViewLayoutOptionsPassThroughMethodOptions>"
                }
            }
        }
    },
    "deferredcontent": {
        "description": "DeferredContent postpones the loading the content that is initially not in the viewport until it becomes visible on scroll.\n\n[Live Demo](https://www.primereact.org/deferredcontent/)",
        "components": {
            "DeferredContent": {
                "description": "DeferredContent postpones the loading the content that is initially not in the viewport until it becomes visible on scroll.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in DeferredContent component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "values": [
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "DeferredContentPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onLoad",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Event object"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when deferred content is loaded."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "DeferredContentPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "DeferredContentProps"
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "DeferredContentState"
                        }
                    ],
                    "callbacks": []
                },
                "DeferredContentPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "DeferredContentPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        }
                    ],
                    "callbacks": []
                },
                "DeferredContentState": {
                    "description": "Defines current inline state in DeferredContent component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "loaded",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current loaded state as a boolean."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "DeferredContentPassThroughType": {
                    "values": "PassThroughType<T, DeferredContentPassThroughMethodOptions>"
                }
            }
        }
    },
    "dialog": {
        "description": "Dialog is a container to display content in an overlay window.\n\n[Live Demo](https://www.primereact.org/dialog)",
        "components": {
            "Dialog": {
                "description": "Dialog is a container to display content in an overlay window.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "resetPosition",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Reset the dialog's position."
                        },
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get the container element of the dialog."
                        },
                        {
                            "name": "getMask",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get mask element."
                        },
                        {
                            "name": "getContent",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get the content element of the dialog"
                        },
                        {
                            "name": "getHeader",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get the header element of the dialog"
                        },
                        {
                            "name": "getFooter",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get the dialog's footer element."
                        },
                        {
                            "name": "getCloseButton",
                            "parameters": [],
                            "returnType": "HTMLButtonElement",
                            "description": "Used to get close button element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in Dialog component.",
                    "values": [
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "null | HTMLElement | \"self\"",
                            "default": "document.body",
                            "description": "DOM element instance where the overlay panel should be mounted. Valid values are any DOM Element and 'self'. The self value is used to render a component where it is located."
                        },
                        {
                            "name": "ariaCloseIconLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a string that labels the close icon."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "blockScroll",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether background scroll should be blocked when dialog is visible."
                        },
                        {
                            "name": "breakpoints",
                            "optional": true,
                            "readonly": false,
                            "type": "DialogBreakpoints",
                            "default": "",
                            "description": "Object literal to define widths per screen size."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "closable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Adds a close icon to the header to hide the dialog."
                        },
                        {
                            "name": "closeOnEscape",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Specifies if pressing escape key should hide the dialog."
                        },
                        {
                            "name": "contentClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the content section."
                        },
                        {
                            "name": "contentStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Style of the content section."
                        },
                        {
                            "name": "dismissableMask",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Specifies if clicking the modal background should hide the dialog."
                        },
                        {
                            "name": "draggable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Enables dragging to change the position using header."
                        },
                        {
                            "name": "focusOnShow",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "When enabled, first button receives focus on show."
                        },
                        {
                            "name": "footer",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Footer content of the dialog."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Title content of the dialog."
                        },
                        {
                            "name": "headerClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the header section."
                        },
                        {
                            "name": "closeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<DialogProps>",
                            "default": "",
                            "description": "Icon to display in the dialog close button."
                        },
                        {
                            "name": "headerStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Style of the header section."
                        },
                        {
                            "name": "icons",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Custom icons template for the header."
                        },
                        {
                            "name": "id",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Unique identifier of the element."
                        },
                        {
                            "name": "keepInViewport",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Keeps dialog in the viewport."
                        },
                        {
                            "name": "maskClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the mask."
                        },
                        {
                            "name": "maskStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the mask."
                        },
                        {
                            "name": "maximizable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the dialog can be displayed full screen."
                        },
                        {
                            "name": "maximized",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, the dialog is initially displayed full screen."
                        },
                        {
                            "name": "minX",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Minimum value for the left coordinate of dialog in dragging."
                        },
                        {
                            "name": "minY",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Minimum value for the top coordinate of dialog in dragging."
                        },
                        {
                            "name": "modal",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Defines if background should be blocked when dialog is displayed."
                        },
                        {
                            "name": "position",
                            "optional": true,
                            "readonly": false,
                            "type": "\"center\" | \"left\" | \"top\" | \"bottom\" | \"right\" | \"bottom-right\" | \"bottom-left\" | \"top-right\" | \"top-left\"",
                            "default": "center",
                            "description": "Position of the dialog, options are \"center\", \"top\", \"bottom\", \"left\", \"right\", \"top-left\", \"top-right\", \"bottom-left\" or \"bottom-right\"."
                        },
                        {
                            "name": "resizable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Enables resizing of the content."
                        },
                        {
                            "name": "rtl",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled dialog is displayed in RTL direction."
                        },
                        {
                            "name": "showHeader",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show the header or not."
                        },
                        {
                            "name": "maximizeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<DialogProps>",
                            "default": "",
                            "description": "Icon to display in the dialog maximize button when dialog is not maximized."
                        },
                        {
                            "name": "minimizeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<DialogProps>",
                            "default": "",
                            "description": "Icon to display in the dialog maximize button when dialog is maximized."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "transitionOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSTransitionProps",
                            "default": "",
                            "description": "The properties of CSSTransition can be customized, except for \"nodeRef\" and \"in\" properties."
                        },
                        {
                            "name": "visible",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Specifies the visibility of the dialog."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "DialogPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onClick",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "PointerEvent<HTMLElement>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when dialog is clicked."
                        },
                        {
                            "name": "onDrag",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DragEvent<HTMLElement>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when dragging dialog."
                        },
                        {
                            "name": "onDragEnd",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DragEvent<HTMLElement>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when dialog dragging is completed."
                        },
                        {
                            "name": "onDragStart",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DragEvent<HTMLElement>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when dialog dragging is initiated."
                        },
                        {
                            "name": "onHide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when dialog is hidden (Required)."
                        },
                        {
                            "name": "onMaskClick",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "MouseEvent<HTMLElement, MouseEvent>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the mask is clicked."
                        },
                        {
                            "name": "onMaximize",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DialogMaximizeEvent",
                                    "description": "Custom click event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when toggle maximize icon is clicked."
                        },
                        {
                            "name": "onResize",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "MouseEvent<HTMLElement, MouseEvent>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke while resizing dialog."
                        },
                        {
                            "name": "onResizeEnd",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "MouseEvent<HTMLElement, MouseEvent>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when dialog resizing is completed."
                        },
                        {
                            "name": "onResizeStart",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "MouseEvent<HTMLElement, MouseEvent>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when dialog resizing is initiated."
                        },
                        {
                            "name": "onShow",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when dialog is showed."
                        }
                    ]
                }
            }
        },
        "events": {
            "description": "Defines the custom events used by the component's callbacks.",
            "values": {
                "DialogMaximizeEvent": {
                    "description": "Custom complete method event.",
                    "relatedProp": "onMaximize",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Browser mouse event."
                        },
                        {
                            "name": "maximized",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "When enabled, the dialog is initially displayed full screen."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "DialogPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "DialogProps"
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "DialogState"
                        }
                    ],
                    "callbacks": []
                },
                "DialogPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "DialogPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "DialogPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "headerTitle",
                            "optional": true,
                            "readonly": false,
                            "type": "DialogPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the header title's DOM element."
                        },
                        {
                            "name": "headerIcons",
                            "optional": true,
                            "readonly": false,
                            "type": "DialogPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the header icons' DOM element."
                        },
                        {
                            "name": "maximizableButton",
                            "optional": true,
                            "readonly": false,
                            "type": "DialogPassThroughType<HTMLAttributes<HTMLButtonElement>>",
                            "description": "Uses to pass attributes to the maximizable button's DOM element."
                        },
                        {
                            "name": "maximizableIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "DialogPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the maximizable icon's DOM element."
                        },
                        {
                            "name": "closeButton",
                            "optional": true,
                            "readonly": false,
                            "type": "DialogPassThroughType<HTMLAttributes<HTMLButtonElement>>",
                            "description": "Uses to pass attributes to the close button's component."
                        },
                        {
                            "name": "closeButtonIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "DialogPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the close button icon's component."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "DialogPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "footer",
                            "optional": true,
                            "readonly": false,
                            "type": "DialogPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the footer's DOM element."
                        },
                        {
                            "name": "mask",
                            "optional": true,
                            "readonly": false,
                            "type": "DialogPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the mask's DOM element."
                        }
                    ],
                    "callbacks": []
                },
                "DialogState": {
                    "description": "Defines current inline state in Dialog component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "containerVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current visible state of the container as a boolean."
                        },
                        {
                            "name": "maximized",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current maximized state as a boolean."
                        }
                    ],
                    "callbacks": []
                },
                "DialogBreakpoints": {
                    "description": "Dialog break options",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "string"
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "DialogPassThroughType": {
                    "values": "PassThroughType<T, DialogPassThroughMethodOptions>"
                }
            }
        }
    },
    "divider": {
        "description": "Divider is used to separate contents.\n\n[Live Demo](https://www.primereact.org/divider/)",
        "components": {
            "Divider": {
                "description": "Divider is used to separate contents.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in Divider component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "values": [
                        {
                            "name": "align",
                            "optional": true,
                            "readonly": false,
                            "type": "\"center\" | \"left\" | \"top\" | \"bottom\" | \"right\"",
                            "default": "",
                            "description": "Alignment of the content, options are \"left\", \"center\", \"right\" for horizontal layout and \"top\", \"center\", \"bottom\" for vertical."
                        },
                        {
                            "name": "layout",
                            "optional": true,
                            "readonly": false,
                            "type": "\"horizontal\" | \"vertical\"",
                            "default": "horizontal",
                            "description": "Specifies the orientation, valid values are \"horizontal\" and \"vertical\"."
                        },
                        {
                            "name": "type",
                            "optional": true,
                            "readonly": false,
                            "type": "\"dashed\" | \"dotted\" | \"solid\"",
                            "default": "solid",
                            "description": "Border style type, default is \"solid\" and other options are \"dashed\" and \"dotted\"."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "DividerPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "DividerPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "DividerProps"
                        }
                    ],
                    "callbacks": []
                },
                "DividerPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "DividerPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "DividerPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the content's DOM element."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "DividerPassThroughType": {
                    "values": "PassThroughType<T, DividerPassThroughMethodOptions>"
                }
            }
        }
    },
    "dock": {
        "description": "Dock is a navigation component consisting of menuitems.\n\n[Live Demo](https://www.primereact.org/dock/)",
        "components": {
            "Dock": {
                "description": "Dock is a navigation component consisting of menuitems.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in Dock component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "values": [
                        {
                            "name": "model",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuItem[]",
                            "default": "",
                            "description": "MenuModel instance to define the action items."
                        },
                        {
                            "name": "position",
                            "optional": true,
                            "readonly": false,
                            "type": "\"left\" | \"top\" | \"bottom\" | \"right\"",
                            "default": "bottom",
                            "description": "Position of element. Valid values are 'bottom', 'top', 'left' and 'right'."
                        },
                        {
                            "name": "magnification",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether to allow scale animation."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Template of header element."
                        },
                        {
                            "name": "footer",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Template of footer element."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "DockPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "DockPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "DockProps"
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "DockState"
                        }
                    ],
                    "callbacks": []
                },
                "DockPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "DockPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "container",
                            "optional": true,
                            "readonly": false,
                            "type": "DockPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the container's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "DockPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "footer",
                            "optional": true,
                            "readonly": false,
                            "type": "DockPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the footer's DOM element."
                        },
                        {
                            "name": "menu",
                            "optional": true,
                            "readonly": false,
                            "type": "DockPassThroughType<HTMLAttributes<HTMLUListElement>>",
                            "description": "Uses to pass attributes to the list's DOM element."
                        },
                        {
                            "name": "menuitem",
                            "optional": true,
                            "readonly": false,
                            "type": "DockPassThroughType<HTMLAttributes<HTMLLIElement>>",
                            "description": "Uses to pass attributes to the list item's DOM element."
                        },
                        {
                            "name": "action",
                            "optional": true,
                            "readonly": false,
                            "type": "DockPassThroughType<HTMLAttributes<HTMLAnchorElement>>",
                            "description": "Uses to pass attributes to the action's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "DockPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the icon's DOM element."
                        }
                    ],
                    "callbacks": []
                },
                "DockState": {
                    "description": "Defines current inline state in Dock component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "currentIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Current index as a number."
                        }
                    ],
                    "callbacks": []
                },
                "DockHeaderTemplateOptions": {
                    "description": "Custom header template",
                    "relatedProp": "header",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "DockProps",
                            "description": "All component props"
                        }
                    ],
                    "callbacks": [],
                    "extendedBy": "DockFooterTemplateOptions"
                },
                "DockFooterTemplateOptions": {
                    "description": "Custom footer template",
                    "relatedProp": "footer",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "DockProps",
                            "description": "All component props"
                        }
                    ],
                    "callbacks": [],
                    "extendedTypes": "DockHeaderTemplateOptions"
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "DockPassThroughType": {
                    "values": "PassThroughType<T, DockPassThroughMethodOptions>"
                }
            }
        }
    },
    "dropdown": {
        "description": "Dropdown also known as Select, is used to choose an item from a collection of options.\n\n[Live Demo](https://www.primereact.org/dropdown/)",
        "components": {
            "Dropdown": {
                "description": "Dropdown also known as Select, is used to choose an item from a collection of options.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "focus",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Used to focus the component."
                        },
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        },
                        {
                            "name": "getInput",
                            "parameters": [],
                            "returnType": "HTMLInputElement",
                            "description": "Used to get input element."
                        },
                        {
                            "name": "getFocusInput",
                            "parameters": [],
                            "returnType": "HTMLInputElement",
                            "description": "Used to get focusable input element."
                        },
                        {
                            "name": "getOverlay",
                            "parameters": [],
                            "returnType": "HTMLElement",
                            "description": "Used to get overlay element."
                        },
                        {
                            "name": "getVirtualScroller",
                            "parameters": [],
                            "returnType": "VirtualScroller",
                            "description": "Used to get the options of inline virtualScroller component."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in Dropdown component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "values": [
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "null | HTMLElement | \"self\"",
                            "default": "document.body",
                            "description": "DOM element instance where the overlay panel should be mounted. Valid values are any DOM Element and \"self\". The \"self\" value is used to render a component where it is located."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Used to define a string that labels the component."
                        },
                        {
                            "name": "ariaLabelledBy",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "autoFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should automatically get focus on load."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "clearIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<DropdownProps>",
                            "default": "",
                            "description": "Icon of the dropdown."
                        },
                        {
                            "name": "dataKey",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "A property to uniquely match the value in options for better performance."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "dropdownIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<DropdownProps>",
                            "default": "",
                            "description": "Icon of the dropdown."
                        },
                        {
                            "name": "editable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, custom value instead of predefined options can be entered using the editable input field."
                        },
                        {
                            "name": "emptyFilterMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "No available options",
                            "description": "Template to display when filtering does not return any results."
                        },
                        {
                            "name": "emptyMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "No results found",
                            "description": "Text to display when there are no options available."
                        },
                        {
                            "name": "filter",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified, displays an input field to filter the items on keyup."
                        },
                        {
                            "name": "filterIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<DropdownProps>",
                            "default": "",
                            "description": "Icon of the filter to search."
                        },
                        {
                            "name": "filterBy",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "label",
                            "description": "When filtering is enabled, filterBy decides which field or fields (comma separated) to search against."
                        },
                        {
                            "name": "filterClearIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<DropdownProps>",
                            "default": "",
                            "description": "Icon of the filter to clear."
                        },
                        {
                            "name": "filterInputAutoFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "When the panel is opened, it specifies that the filter input should focus automatically."
                        },
                        {
                            "name": "filterLocale",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Locale to use in filtering. The default locale is the host environment's current locale."
                        },
                        {
                            "name": "filterMatchMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"endsWith\" | \"startsWith\" | \"contains\" | \"equals\" | \"notEquals\"",
                            "default": "contains",
                            "description": "Defines how the items are filtered."
                        },
                        {
                            "name": "filterPlaceholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Placeholder text to show when filter input is empty."
                        },
                        {
                            "name": "filterTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "The template of filter element.",
                            "deprecated": "Since v9.3.0"
                        },
                        {
                            "name": "focusInputRef",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<HTMLInputElement>",
                            "default": "",
                            "description": "Reference of the focusable input element."
                        },
                        {
                            "name": "id",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Unique identifier of the element."
                        },
                        {
                            "name": "inputId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the focusable input."
                        },
                        {
                            "name": "inputRef",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<HTMLSelectElement>",
                            "default": "",
                            "description": "Reference of the input element."
                        },
                        {
                            "name": "itemTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "The template of items."
                        },
                        {
                            "name": "maxLength",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Maximum number of characters to be typed on an editable input."
                        },
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Name of the input element."
                        },
                        {
                            "name": "optionDisabled",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the disabled flag of an option, defaults to false when not defined."
                        },
                        {
                            "name": "optionGroupChildren",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "items",
                            "description": "Property name or getter function that refers to the children options of option group."
                        },
                        {
                            "name": "optionGroupLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Property name or getter function to use as the label of an option group."
                        },
                        {
                            "name": "optionGroupTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Template of an option group item."
                        },
                        {
                            "name": "optionLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Name of the label field of an option when arbitrary objects are used as options instead of SelectItems."
                        },
                        {
                            "name": "optionValue",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Name of the value field of an option when arbitrary objects are used as options instead of SelectItems."
                        },
                        {
                            "name": "options",
                            "optional": true,
                            "readonly": false,
                            "type": "SelectItemOptionsType",
                            "default": "",
                            "description": "An array of selectitems to display as the available options."
                        },
                        {
                            "name": "panelClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the overlay panel element."
                        },
                        {
                            "name": "panelFooterTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Template of the panel footer."
                        },
                        {
                            "name": "panelStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the overlay panel element."
                        },
                        {
                            "name": "placeholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Default text to display when no option is selected."
                        },
                        {
                            "name": "required",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that an input field must be filled out before submitting the form."
                        },
                        {
                            "name": "resetFilterOnHide",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Clears the filter value when hiding the dropdown."
                        },
                        {
                            "name": "scrollHeight",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "200px",
                            "description": "Height of the viewport in pixels, a scrollbar is defined if height of list exceeds this value."
                        },
                        {
                            "name": "showClear",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, a clear icon is displayed to clear the value."
                        },
                        {
                            "name": "showFilterClear",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, a clear icon is displayed to clear the filtered value."
                        },
                        {
                            "name": "showOnFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, overlay panel will be visible with input focus."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the element."
                        },
                        {
                            "name": "tabIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "tooltip",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Content of the tooltip."
                        },
                        {
                            "name": "tooltipOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "TooltipOptions",
                            "default": "",
                            "description": "Configuration of the tooltip, refer to the tooltip documentation for more information."
                        },
                        {
                            "name": "transitionOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSTransitionProps",
                            "default": "",
                            "description": "The properties of CSSTransition can be customized, except for \"nodeRef\" and \"in\" properties."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Value of the component."
                        },
                        {
                            "name": "valueTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "The template of selected item."
                        },
                        {
                            "name": "virtualScrollerOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "VirtualScrollerProps",
                            "default": "",
                            "description": "Whether to use the virtualScroller feature. The properties of VirtualScroller component can be used like an object in it."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "DropdownPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DropdownChangeEvent",
                                    "description": "Custom change event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on value change"
                        },
                        {
                            "name": "onFocus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FocusEvent<HTMLInputElement, Element>",
                                    "description": "Browser event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the element receives focus."
                        },
                        {
                            "name": "onBlur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FocusEvent<HTMLInputElement, Element>",
                                    "description": "Browser event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the element loses focus."
                        },
                        {
                            "name": "onMouseDown",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "MouseEvent<HTMLElement, MouseEvent>",
                                    "description": "Browser event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke to when a mouse button is pressed."
                        },
                        {
                            "name": "onContextMenu",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "MouseEvent<HTMLElement, MouseEvent>",
                                    "description": "Browser event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on right-click."
                        },
                        {
                            "name": "onShow",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when the overlay is shown."
                        },
                        {
                            "name": "onHide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when the overlay is hidden."
                        },
                        {
                            "name": "onFilter",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DropdownFilterEvent",
                                    "description": "Custom filter event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the value is filtered."
                        }
                    ]
                }
            }
        },
        "events": {
            "description": "Defines the custom events used by the component's callbacks.",
            "values": {
                "DropdownChangeEvent": {
                    "description": "Custom change event.",
                    "relatedProp": "onChange",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": true,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        },
                        {
                            "name": "checked",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean"
                        },
                        {
                            "name": "target",
                            "optional": false,
                            "readonly": false,
                            "type": "FormTarget<any>"
                        }
                    ]
                },
                "DropdownFilterEvent": {
                    "description": "Custom filter event",
                    "relatedProp": "onFilter",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Browser event"
                        },
                        {
                            "name": "filter",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Filter value"
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "DropdownPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "DropdownProps"
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "DropdownState"
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "DropdownContext"
                        }
                    ],
                    "callbacks": []
                },
                "DropdownPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "DropdownPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "input",
                            "optional": true,
                            "readonly": false,
                            "type": "DropdownPassThroughType<HTMLAttributes<HTMLInputElement>>",
                            "description": "Uses to pass attributes to the input's DOM element."
                        },
                        {
                            "name": "clearIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "DropdownPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the clear icon's DOM element."
                        },
                        {
                            "name": "trigger",
                            "optional": true,
                            "readonly": false,
                            "type": "DropdownPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the trigger' DOM element."
                        },
                        {
                            "name": "panel",
                            "optional": true,
                            "readonly": false,
                            "type": "DropdownPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the panel's DOM element."
                        },
                        {
                            "name": "footer",
                            "optional": true,
                            "readonly": false,
                            "type": "DropdownPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the footer's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "DropdownPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "filterContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "DropdownPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the filter container's DOM element."
                        },
                        {
                            "name": "filterInput",
                            "optional": true,
                            "readonly": false,
                            "type": "DropdownPassThroughType<HTMLAttributes<HTMLInputElement>>",
                            "description": "Uses to pass attributes to the filter input's DOM element."
                        },
                        {
                            "name": "filterIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "DropdownPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the filter icon's DOM element."
                        },
                        {
                            "name": "wrapper",
                            "optional": true,
                            "readonly": false,
                            "type": "DropdownPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the wrapper's DOM element."
                        },
                        {
                            "name": "virtualScroller",
                            "optional": true,
                            "readonly": false,
                            "type": "VirtualScrollerPassThroughOptions",
                            "description": "Uses to pass attributes to the VirtualScroller component."
                        },
                        {
                            "name": "list",
                            "optional": true,
                            "readonly": false,
                            "type": "DropdownPassThroughType<HTMLAttributes<HTMLUListElement>>",
                            "description": "Uses to pass attributes to the list's DOM element."
                        },
                        {
                            "name": "itemGroup",
                            "optional": true,
                            "readonly": false,
                            "type": "DropdownPassThroughType<HTMLAttributes<HTMLLIElement>>",
                            "description": "Uses to pass attributes to the item group's DOM element."
                        },
                        {
                            "name": "item",
                            "optional": true,
                            "readonly": false,
                            "type": "DropdownPassThroughType<HTMLAttributes<HTMLLIElement>>",
                            "description": "Uses to pass attributes to the item's DOM element."
                        },
                        {
                            "name": "emptyMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "DropdownPassThroughType<HTMLAttributes<HTMLLIElement>>",
                            "description": "Uses to pass attributes to the empty message's DOM element."
                        },
                        {
                            "name": "select",
                            "optional": true,
                            "readonly": false,
                            "type": "DropdownPassThroughType<HTMLAttributes<HTMLSelectElement>>",
                            "description": "Uses to pass attributes to the select's DOM element."
                        },
                        {
                            "name": "option",
                            "optional": true,
                            "readonly": false,
                            "type": "DropdownPassThroughType<HTMLAttributes<HTMLOptionElement>>",
                            "description": "Uses to pass attributes to the option's DOM element."
                        },
                        {
                            "name": "tooltip",
                            "optional": true,
                            "readonly": false,
                            "type": "TooltipPassThroughOptions",
                            "description": "Uses to pass attributes tooltip's DOM element."
                        },
                        {
                            "name": "hiddenSelectedMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "DropdownPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the hidden selected message's DOM element."
                        }
                    ],
                    "callbacks": []
                },
                "DropdownState": {
                    "description": "Defines current inline state in Dropdown component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current focused state as a boolean."
                        },
                        {
                            "name": "filter",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Current filter state as a string."
                        },
                        {
                            "name": "overlayVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current overlay visible state as a boolean."
                        }
                    ],
                    "callbacks": []
                },
                "DropdownContext": {
                    "description": "Defines current options in Dropdown component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "selected",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current selection state of the item as a boolean."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current focus state of the item as a boolean."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current disabled state of the item as a boolean."
                        }
                    ],
                    "callbacks": []
                },
                "DropdownFilterOptions": {
                    "description": "Custom filter options",
                    "relatedProp": "filterTemplate",
                    "props": [
                        {
                            "name": "filter",
                            "optional": true,
                            "readonly": false,
                            "type": "Function"
                        },
                        {
                            "name": "reset",
                            "optional": true,
                            "readonly": false,
                            "type": "Function"
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "DropdownPassThroughType": {
                    "values": "PassThroughType<T, DropdownPassThroughMethodOptions>"
                }
            }
        }
    },
    "editor": {
        "description": "Editor is rich text editor component based on Quill.\n\n[Live Demo](https://www.primereact.org/editor/)",
        "components": {
            "Editor": {
                "description": "Editor is rich text editor component based on Quill.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "focus",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Used to focus the component."
                        },
                        {
                            "name": "getQuill",
                            "parameters": [],
                            "returnType": "any",
                            "description": "Used to get quill instance."
                        },
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        },
                        {
                            "name": "getContent",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get content element."
                        },
                        {
                            "name": "getToolbar",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get toolbar element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in Editor component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "values": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Value of the content."
                        },
                        {
                            "name": "placeholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Placeholder text to show when editor is empty."
                        },
                        {
                            "name": "readOnly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to instantiate the editor to read-only mode."
                        },
                        {
                            "name": "modules",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Modules configuration, see [here](https://quilljs.com/docs/modules/) for available options."
                        },
                        {
                            "name": "formats",
                            "optional": true,
                            "readonly": false,
                            "type": "string[]",
                            "default": "",
                            "description": "Whitelist of formats to display, see [here](https://quilljs.com/docs/formats/) for available options."
                        },
                        {
                            "name": "theme",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "The theme of editor"
                        },
                        {
                            "name": "showHeader",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to show the header of editor."
                        },
                        {
                            "name": "headerTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Style and modules of the toolbar."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "EditorPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onTextChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "EditorTextChangeEvent",
                                    "description": "Custom text change event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when text of editor changes."
                        },
                        {
                            "name": "onSelectionChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "EditorSelectionChangeEvent",
                                    "description": "Custom selection change event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when selected text of editor changes."
                        },
                        {
                            "name": "onLoad",
                            "parameters": [
                                {
                                    "name": "quill",
                                    "optional": false,
                                    "type": "any",
                                    "description": "Quill instance"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the quill modules are loaded."
                        }
                    ]
                }
            }
        },
        "events": {
            "description": "Defines the custom events used by the component's callbacks.",
            "values": {
                "EditorTextChangeEvent": {
                    "description": "Custom text change event",
                    "relatedProp": "onTextChange",
                    "props": [
                        {
                            "name": "htmlValue",
                            "optional": false,
                            "readonly": false,
                            "type": "null | string",
                            "description": "Current value as html."
                        },
                        {
                            "name": "textValue",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Current value as text."
                        },
                        {
                            "name": "delta",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Representation of the change."
                        },
                        {
                            "name": "source",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Source of change. Will be either \"user\" or \"api\"."
                        }
                    ]
                },
                "EditorSelectionChangeEvent": {
                    "description": "Custom selection change event",
                    "relatedProp": "onSelectionChange",
                    "props": [
                        {
                            "name": "range",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Object with index and length keys indicating where the selection exists"
                        },
                        {
                            "name": "oldRange",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Object with index and length keys indicating where the previous selection was."
                        },
                        {
                            "name": "source",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Source of change. Will be either \"user\" or \"api\"."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "EditorPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "EditorProps"
                        }
                    ],
                    "callbacks": []
                },
                "EditorPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "EditorPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "toolbar",
                            "optional": true,
                            "readonly": false,
                            "type": "EditorPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the toolbar's DOM element."
                        },
                        {
                            "name": "formats",
                            "optional": true,
                            "readonly": false,
                            "type": "EditorPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the formats's DOM element."
                        },
                        {
                            "name": "select",
                            "optional": true,
                            "readonly": false,
                            "type": "EditorPassThroughType<HTMLAttributes<HTMLSelectElement>>",
                            "description": "Uses to pass attributes to the select's DOM element."
                        },
                        {
                            "name": "option",
                            "optional": true,
                            "readonly": false,
                            "type": "EditorPassThroughType<HTMLAttributes<HTMLOptionElement>>",
                            "description": "Uses to pass attributes to the option's DOM element."
                        },
                        {
                            "name": "button",
                            "optional": true,
                            "readonly": false,
                            "type": "EditorPassThroughType<HTMLAttributes<HTMLButtonElement>>",
                            "description": "Uses to pass attributes to the button's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "EditorPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the content's DOM element."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "EditorPassThroughType": {
                    "values": "PassThroughType<T, EditorPassThroughMethodOptions>"
                }
            }
        }
    },
    "fieldset": {
        "description": "Fieldset is an input component that provides real-time suggestions when being typed.\n\n[Live Demo](https://www.primereact.org/fieldset/)",
        "components": {
            "Fieldset": {
                "description": "Fieldset is an input component that provides real-time suggestions when being typed.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLFieldSetElement",
                            "description": "Used to get container element."
                        },
                        {
                            "name": "getContent",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get the content element of the fieldset."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in Fieldset component. In addition to these, all properties of HTMLFieldSetElement can be used in this component.",
                    "values": [
                        {
                            "name": "legend",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Header text of the fieldset."
                        },
                        {
                            "name": "toggleable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified, content can toggled by clicking the legend."
                        },
                        {
                            "name": "collapsed",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines the default visibility state of the content."
                        },
                        {
                            "name": "collapseIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<FieldsetProps>",
                            "default": "",
                            "description": "Icon of an expanded tab."
                        },
                        {
                            "name": "transitionOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSTransitionProps",
                            "default": "",
                            "description": "The properties of CSSTransition can be customized, except for \"nodeRef\" and \"in\" properties."
                        },
                        {
                            "name": "expandIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<FieldsetProps>",
                            "default": "",
                            "description": "Icon of an collapsed tab."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "FieldsetPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onExpand",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "MouseEvent<HTMLElement, MouseEvent>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a tab gets expanded."
                        },
                        {
                            "name": "onCollapse",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "MouseEvent<HTMLElement, MouseEvent>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when an active tab is collapsed by clicking on the header."
                        },
                        {
                            "name": "onToggle",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FieldsetToggleEvent",
                                    "description": "Custom toggle event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a tab gets expanded."
                        },
                        {
                            "name": "onClick",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "MouseEvent<HTMLElement, MouseEvent>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when fieldset is clicked."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "FieldsetPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "FieldsetProps"
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "FieldsetState"
                        }
                    ],
                    "callbacks": []
                },
                "FieldsetToggleEvent": {
                    "description": "Custom toggle event.",
                    "relatedProp": "FieldsetEmits.toggle",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "MouseEvent<HTMLElement, MouseEvent>",
                            "description": "Browser event."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Collapsed state as a boolean"
                        }
                    ],
                    "callbacks": []
                },
                "FieldsetPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "FieldsetPassThroughType<HTMLAttributes<HTMLFieldSetElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "legend",
                            "optional": true,
                            "readonly": false,
                            "type": "FieldsetPassThroughType<HTMLAttributes<HTMLLegendElement>>",
                            "description": "Uses to pass attributes to the legend's DOM element."
                        },
                        {
                            "name": "toggler",
                            "optional": true,
                            "readonly": false,
                            "type": "FieldsetPassThroughType<HTMLAttributes<HTMLAnchorElement>>",
                            "description": "Uses to pass attributes to the toggler's DOM element."
                        },
                        {
                            "name": "togglerIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "FieldsetPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the toggler icon's DOM element."
                        },
                        {
                            "name": "legendTitle",
                            "optional": true,
                            "readonly": false,
                            "type": "FieldsetPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the legend title's DOM element."
                        },
                        {
                            "name": "toggleableContent",
                            "optional": true,
                            "readonly": false,
                            "type": "FieldsetPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the toggleable content's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "FieldsetPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the content's DOM element."
                        }
                    ],
                    "callbacks": []
                },
                "FieldsetState": {
                    "description": "Defines current inline state in Fieldset component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "collapse",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current collapsed state as a boolean."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "FieldsetPassThroughType": {
                    "values": "PassThroughType<T, FieldsetPassThroughMethodOptions>"
                }
            }
        }
    },
    "fileupload": {
        "description": "FileUpload is an advanced uploader with dragdrop support, multi file uploads, auto uploading, progress tracking and validations.\n\n[Live Demo](https://www.primereact.org/fileupload)",
        "components": {
            "FileUpload": {
                "description": "FileUpload is an advanced uploader with dragdrop support, multi file uploads, auto uploading, progress tracking and validations.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "upload",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Uploads the selected files."
                        },
                        {
                            "name": "clear",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Clears the files list."
                        },
                        {
                            "name": "formatSize",
                            "parameters": [
                                {
                                    "name": "bytes",
                                    "type": "number",
                                    "description": "Custom size event."
                                }
                            ],
                            "returnType": "number",
                            "description": "Formats the number of bytes."
                        },
                        {
                            "name": "onFileSelect",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "FileUploadSelectEvent",
                                    "description": "Custom select event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Handles file selection event and updates."
                        },
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLElement",
                            "description": "Used to get container element."
                        },
                        {
                            "name": "getInput",
                            "parameters": [],
                            "returnType": "HTMLInputElement",
                            "description": "Used to get input element."
                        },
                        {
                            "name": "getFiles",
                            "parameters": [],
                            "returnType": "File[]",
                            "description": "Gets the current files list."
                        },
                        {
                            "name": "setFiles",
                            "parameters": [
                                {
                                    "name": "files",
                                    "type": "File[]",
                                    "description": "Current files."
                                }
                            ],
                            "returnType": "void",
                            "description": "Sets the current files list."
                        },
                        {
                            "name": "getUploadedFiles",
                            "parameters": [],
                            "returnType": "File[]",
                            "description": "Gets the current uploaded files list."
                        },
                        {
                            "name": "setUploadedFiles",
                            "parameters": [
                                {
                                    "name": "files",
                                    "type": "File[]",
                                    "description": "Current uploaded files."
                                }
                            ],
                            "returnType": "void",
                            "description": "Sets the current uploaded files list."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in FileUpload component.",
                    "values": [
                        {
                            "name": "id",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Unique identifier of the element."
                        },
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Name of the request parameter to identify the files at backend."
                        },
                        {
                            "name": "url",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Remote url to upload the files."
                        },
                        {
                            "name": "mode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"basic\" | \"advanced\"",
                            "default": "advanced",
                            "description": "Defines the UI of the component, possible values are \"advanced\" and \"basic\"."
                        },
                        {
                            "name": "multiple",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Used to select multiple files at once from file dialog."
                        },
                        {
                            "name": "accept",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "false",
                            "description": "Pattern to restrict the allowed file types such as \"image/*\"."
                        },
                        {
                            "name": "removeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<FileUploadProps>",
                            "default": "",
                            "description": "Icon of the remove element."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Disables the upload functionality."
                        },
                        {
                            "name": "auto",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, upload begins automatically after selection is completed."
                        },
                        {
                            "name": "maxFileSize",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Maximum file size allowed in bytes."
                        },
                        {
                            "name": "invalidFileSizeMessageSummary",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "Invalid file size",
                            "description": "Summary message of the invalid fize size."
                        },
                        {
                            "name": "invalidFileSizeMessageDetail",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "\"Maximum upload size is.\"",
                            "description": "Detail message of the invalid fize size."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "withCredentials",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Cross-site Access-Control requests should be made using credentials such as cookies, authorization headers or TLS client certificates."
                        },
                        {
                            "name": "previewWidth",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "50",
                            "description": "Width of the image thumbnail in pixels."
                        },
                        {
                            "name": "chooseLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Label of the choose button. Defaults to global value in Locale configuration."
                        },
                        {
                            "name": "uploadLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Label of the upload button. Defaults to global value in Locale configuration."
                        },
                        {
                            "name": "cancelLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Label of the cancel button. Defaults to global value in Locale configuration."
                        },
                        {
                            "name": "chooseOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "FileUploadOptions",
                            "default": "",
                            "description": "Options used to customize the choose button. These options have \"label\", \"icon\", \"className\" and \"style\" properties."
                        },
                        {
                            "name": "uploadOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "FileUploadOptions",
                            "default": "",
                            "description": "Options used to customize the upload button. These options have \"label\", \"icon\", \"className\" and \"style\" properties."
                        },
                        {
                            "name": "cancelOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "FileUploadOptions",
                            "default": "",
                            "description": "Options used to customize the cancel button. These options have \"label\", \"icon\", \"className\" and \"style\" properties."
                        },
                        {
                            "name": "customUpload",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to use the default upload or a manual implementation defined in uploadHandler callback."
                        },
                        {
                            "name": "headerClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Custom template of the header."
                        },
                        {
                            "name": "headerStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the header."
                        },
                        {
                            "name": "contentClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the content."
                        },
                        {
                            "name": "contentStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the content."
                        },
                        {
                            "name": "headerTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Custom template of the header."
                        },
                        {
                            "name": "itemTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Custom template of each item content in the container."
                        },
                        {
                            "name": "emptyTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Custom template of empty content in the container."
                        },
                        {
                            "name": "progressBarTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Custom template of progressBar content in the container."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "FileUploadPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onBeforeUpload",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FileUploadBeforeUploadEvent",
                                    "description": "Custom beforeUpload."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke before file upload begins to customize the request such as post parameters before the files."
                        },
                        {
                            "name": "onBeforeSend",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FileUploadBeforeSendEvent",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke before file send begins to customize the request such as adding headers."
                        },
                        {
                            "name": "onBeforeDrop",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DragEvent",
                                    "description": "DragEvent instance."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke before files dropped. Return false from callback to prevent drop."
                        },
                        {
                            "name": "onBeforeSelect",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FileUploadSelectEvent",
                                    "description": "Custom select event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke before files are selected. Return false from callback to prevent selection."
                        },
                        {
                            "name": "onUpload",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FileUploadUploadEvent",
                                    "description": "Custom upload event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when file upload is complete."
                        },
                        {
                            "name": "onError",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FileUploadErrorEvent",
                                    "description": "Custom error event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke if file upload fails."
                        },
                        {
                            "name": "onClear",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when files in queue are removed without uploading."
                        },
                        {
                            "name": "onSelect",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FileUploadSelectEvent",
                                    "description": "Custom select event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when files are selected."
                        },
                        {
                            "name": "onProgress",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FileUploadProgressEvent",
                                    "description": "Custom progress event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when files are being uploaded."
                        },
                        {
                            "name": "onValidationFail",
                            "parameters": [
                                {
                                    "name": "file",
                                    "optional": false,
                                    "type": "File",
                                    "description": "Invalid file."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a validation file fails."
                        },
                        {
                            "name": "uploadHandler",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FileUploadHandlerEvent",
                                    "description": "Custom uploadHandler event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke in custom upload mode to upload the files manually."
                        },
                        {
                            "name": "onRemove",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FileUploadRemoveEvent",
                                    "description": "Custom remove event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a file is removed without uploading using clear button of a file."
                        }
                    ]
                }
            }
        },
        "events": {
            "description": "Defines the custom events used by the component's callbacks.",
            "values": {
                "FileUploadBeforeUploadEvent": {
                    "description": "Custom before upload event.",
                    "relatedProp": "onBeforeUpload",
                    "props": [
                        {
                            "name": "xhr",
                            "optional": false,
                            "readonly": false,
                            "type": "XMLHttpRequest",
                            "description": "XmlHttpRequest instance."
                        },
                        {
                            "name": "formData",
                            "optional": false,
                            "readonly": false,
                            "type": "FormData",
                            "description": "FormData object."
                        }
                    ],
                    "extendedBy": "FileUploadBeforeSendEvent"
                },
                "FileUploadBeforeSendEvent": {
                    "description": "Custom before send event.",
                    "relatedProp": "onBeforeSend",
                    "props": [
                        {
                            "name": "xhr",
                            "optional": false,
                            "readonly": false,
                            "type": "XMLHttpRequest",
                            "description": "XmlHttpRequest instance."
                        },
                        {
                            "name": "formData",
                            "optional": false,
                            "readonly": false,
                            "type": "FormData",
                            "description": "FormData object."
                        }
                    ]
                },
                "FileUploadUploadEvent": {
                    "description": "Custom upload event.",
                    "relatedProp": "onUpload",
                    "props": [
                        {
                            "name": "files",
                            "optional": false,
                            "readonly": false,
                            "type": "File[]",
                            "description": "Uploaded files."
                        },
                        {
                            "name": "xhr",
                            "optional": false,
                            "readonly": false,
                            "type": "XMLHttpRequest",
                            "description": "XmlHttpRequest instance."
                        }
                    ],
                    "extendedBy": "FileUploadErrorEvent"
                },
                "FileUploadErrorEvent": {
                    "description": "Custom error event.",
                    "relatedProp": "onError",
                    "props": [
                        {
                            "name": "files",
                            "optional": false,
                            "readonly": false,
                            "type": "File[]",
                            "description": "Uploaded files."
                        },
                        {
                            "name": "xhr",
                            "optional": false,
                            "readonly": false,
                            "type": "XMLHttpRequest",
                            "description": "XmlHttpRequest instance."
                        }
                    ]
                },
                "FileUploadSelectEvent": {
                    "description": "Custom select event.",
                    "relatedProp": "onSelect",
                    "props": [
                        {
                            "name": "files",
                            "optional": false,
                            "readonly": false,
                            "type": "File[]",
                            "description": "Uploaded files."
                        },
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "DragEvent | ChangeEvent<HTMLInputElement>",
                            "description": "Browser event."
                        }
                    ]
                },
                "FileUploadProgressEvent": {
                    "description": "Custom progress event.",
                    "relatedProp": "onProgress",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Browser event."
                        },
                        {
                            "name": "progress",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Calculated progress value."
                        }
                    ]
                },
                "FileUploadHandlerEvent": {
                    "description": "Custom uploadHandler event.",
                    "relatedProp": "uploadHandler",
                    "props": [
                        {
                            "name": "files",
                            "optional": false,
                            "readonly": false,
                            "type": "File[]",
                            "description": "Uploaded files."
                        },
                        {
                            "name": "options",
                            "optional": false,
                            "readonly": false,
                            "type": "FileUploadHandlerOptions",
                            "description": "Handler options."
                        }
                    ]
                },
                "FileUploadRemoveEvent": {
                    "description": "Custom remove event.",
                    "relatedProp": "onRemove",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Browser event."
                        },
                        {
                            "name": "file",
                            "optional": false,
                            "readonly": false,
                            "type": "File",
                            "description": "Selected file."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "FileUploadPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "FileUploadProps"
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "FileUploadState"
                        }
                    ],
                    "callbacks": []
                },
                "FileUploadPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "FileUploadPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "input",
                            "optional": true,
                            "readonly": false,
                            "type": "FileUploadPassThroughType<HTMLAttributes<HTMLInputElement>>",
                            "description": "Uses to pass attributes to the input's DOM element."
                        },
                        {
                            "name": "buttonbar",
                            "optional": true,
                            "readonly": false,
                            "type": "FileUploadPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the buttonbar's DOM element."
                        },
                        {
                            "name": "chooseButton",
                            "optional": true,
                            "readonly": false,
                            "type": "FileUploadPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the choose button's DOM element."
                        },
                        {
                            "name": "chooseIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "FileUploadPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the choose icon's DOM element."
                        },
                        {
                            "name": "chooseButtonLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "FileUploadPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the choose button label's DOM element."
                        },
                        {
                            "name": "uploadButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions",
                            "description": "Uses to pass attributes to the upload button's DOM element."
                        },
                        {
                            "name": "cancelButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions",
                            "description": "Uses to pass attributes to the cancel button's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "FileUploadPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "progressbar",
                            "optional": true,
                            "readonly": false,
                            "type": "ProgressBarPassThroughOptions",
                            "description": "Uses to pass attributes to the progressbar's DOM element."
                        },
                        {
                            "name": "message",
                            "optional": true,
                            "readonly": false,
                            "type": "MessagePassThroughOptions",
                            "description": "Uses to pass attributes to the messages' DOM element."
                        },
                        {
                            "name": "file",
                            "optional": true,
                            "readonly": false,
                            "type": "FileUploadPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the file's DOM element."
                        },
                        {
                            "name": "thumbnail",
                            "optional": true,
                            "readonly": false,
                            "type": "FileUploadPassThroughType<ImgHTMLAttributes<HTMLImageElement>>",
                            "description": "Uses to pass attributes to the thumbnail's DOM element."
                        },
                        {
                            "name": "details",
                            "optional": true,
                            "readonly": false,
                            "type": "FileUploadPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the details's DOM element."
                        },
                        {
                            "name": "fileName",
                            "optional": true,
                            "readonly": false,
                            "type": "FileUploadPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the fileName's DOM element."
                        },
                        {
                            "name": "fileSize",
                            "optional": true,
                            "readonly": false,
                            "type": "FileUploadPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the fileSize's DOM element."
                        },
                        {
                            "name": "badge",
                            "optional": true,
                            "readonly": false,
                            "type": "BadgePassThroughOptions",
                            "description": "Uses to pass attributes to the badge's DOM element."
                        },
                        {
                            "name": "actions",
                            "optional": true,
                            "readonly": false,
                            "type": "FileUploadPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the actions's DOM element."
                        },
                        {
                            "name": "removeButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions",
                            "description": "Uses to pass attributes to the remove button's DOM element."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "FileUploadPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the label's DOM element."
                        },
                        {
                            "name": "basicButton",
                            "optional": true,
                            "readonly": false,
                            "type": "FileUploadPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the basic button's DOM element."
                        },
                        {
                            "name": "uploadIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "FileUploadPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the upload icon's DOM element."
                        }
                    ],
                    "callbacks": []
                },
                "FileUploadState": {
                    "description": "Defines current inline state in FileUpload component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "files",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "description": "Current files."
                        },
                        {
                            "name": "uploading",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current uplaoding state as a boolean."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current focused state as a boolean."
                        },
                        {
                            "name": "progress",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Current progress state as a number."
                        },
                        {
                            "name": "uploadedFiles",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "description": "Current uploaded files."
                        }
                    ],
                    "callbacks": []
                },
                "FileUploadOptions": {
                    "description": "Custom file upload options",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines the text to display."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<FileUploadProps>",
                            "description": "Defines the image to display."
                        },
                        {
                            "name": "iconOnly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Defines whether to display only the icon."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "description": "Inline style of the component."
                        }
                    ],
                    "callbacks": []
                },
                "FileUploadHeaderTemplateOptions": {
                    "description": "Custom file upload header options",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "className",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "The class name for the header element."
                        },
                        {
                            "name": "chooseButton",
                            "optional": false,
                            "readonly": false,
                            "type": "Element",
                            "description": "The choose button element."
                        },
                        {
                            "name": "uploadButton",
                            "optional": false,
                            "readonly": false,
                            "type": "Element",
                            "description": "The upload button element."
                        },
                        {
                            "name": "cancelButton",
                            "optional": false,
                            "readonly": false,
                            "type": "Element",
                            "description": "The cancel button element."
                        },
                        {
                            "name": "element",
                            "optional": false,
                            "readonly": false,
                            "type": "Element",
                            "description": "The default element created by the component."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "FileUploadProps",
                            "description": "The props passed to the component."
                        }
                    ],
                    "callbacks": []
                },
                "ItemTemplateOptions": {
                    "description": "Custom item template options",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "previewElement",
                            "optional": false,
                            "readonly": false,
                            "type": "Element",
                            "description": "Element to display preview of the file."
                        },
                        {
                            "name": "fileNameElement",
                            "optional": false,
                            "readonly": false,
                            "type": "Element",
                            "description": "Element to display the name of the file."
                        },
                        {
                            "name": "sizeElement",
                            "optional": false,
                            "readonly": false,
                            "type": "Element",
                            "description": "Element to display the size of the file."
                        },
                        {
                            "name": "removeElement",
                            "optional": false,
                            "readonly": false,
                            "type": "Element",
                            "description": "Element to display the remove button."
                        },
                        {
                            "name": "formatSize",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Formatted string of the file size."
                        },
                        {
                            "name": "files",
                            "optional": false,
                            "readonly": false,
                            "type": "File[]",
                            "description": "Array of files."
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Index of the file."
                        },
                        {
                            "name": "element",
                            "optional": false,
                            "readonly": false,
                            "type": "Element",
                            "description": "Default element created by the component."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "FileUploadProps",
                            "description": "All component props"
                        }
                    ],
                    "callbacks": [
                        {
                            "name": "onRemove",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Browser event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a item template is removed."
                        }
                    ]
                },
                "FileUploadFilesEvent": {
                    "description": "Custom file upload event.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "files",
                            "optional": false,
                            "readonly": false,
                            "type": "File[]",
                            "description": "Uploaded files."
                        }
                    ],
                    "callbacks": [],
                    "extendedBy": "FileUploadUploadEvent,FileUploadSelectEvent,FileUploadHandlerEvent"
                },
                "FileUploadHandlerOptions": {
                    "description": "Custom file upload handler options",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "FileUploadProps",
                            "description": "All component props"
                        }
                    ],
                    "callbacks": [
                        {
                            "name": "clear",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Clears the current files selected for upload."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "FileUploadPassThroughType": {
                    "values": "PassThroughType<T, FileUploadPassThroughMethodOptions>"
                }
            }
        }
    },
    "galleria": {
        "description": "Galleria is a content gallery component.\n\n[Live Demo](https://www.primereact.org/galleria)",
        "components": {
            "Galleria": {
                "description": "Galleria is a content gallery component.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Used to show the overlay."
                        },
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Used to hide the overlay."
                        },
                        {
                            "name": "isAutoPlayActive",
                            "parameters": [],
                            "returnType": "boolean",
                            "description": "Whether auto-play feature is currently active."
                        },
                        {
                            "name": "startSlideShow",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Used to start the slideshow."
                        },
                        {
                            "name": "stopSlideShow",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Used to stop the slideshow."
                        },
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in Galleria component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "values": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "An array of objects to display."
                        },
                        {
                            "name": "activeIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Index of the first item."
                        },
                        {
                            "name": "fullScreen",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display the component on fullscreen."
                        },
                        {
                            "name": "closeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<GalleriaProps>",
                            "default": "",
                            "description": "Icon to display in the galleria close button."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Custom header template."
                        },
                        {
                            "name": "footer",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Custom footer template."
                        },
                        {
                            "name": "numVisible",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "3",
                            "description": "Number of items per page."
                        },
                        {
                            "name": "responsiveOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaResponsiveOptions[]",
                            "default": "",
                            "description": "An array of options for responsive design."
                        },
                        {
                            "name": "showItemNavigators",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display navigation buttons in item container."
                        },
                        {
                            "name": "showThumbnailNavigators",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to display navigation buttons in thumbnail container."
                        },
                        {
                            "name": "showItemNavigatorsOnHover",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display navigation buttons on item container's hover."
                        },
                        {
                            "name": "changeItemOnIndicatorHover",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, item is changed on indicator item's hover."
                        },
                        {
                            "name": "circular",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if scrolling would be infinite."
                        },
                        {
                            "name": "autoPlay",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Items are displayed with a slideshow in autoPlay mode."
                        },
                        {
                            "name": "transitionInterval",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "4000",
                            "description": "Time in milliseconds to scroll items."
                        },
                        {
                            "name": "showThumbnails",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to display thumbnail container."
                        },
                        {
                            "name": "itemNextIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<GalleriaProps>",
                            "default": "",
                            "description": "Icon to show in the next item button."
                        },
                        {
                            "name": "itemPrevIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<GalleriaProps>",
                            "default": "",
                            "description": "Icon to show in the previous item button."
                        },
                        {
                            "name": "nextThumbnailIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<GalleriaProps>",
                            "default": "",
                            "description": "Icon to show in the next thumbnail button."
                        },
                        {
                            "name": "prevThumbnailIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<GalleriaProps>",
                            "default": "",
                            "description": "Icon to show in the previous thumbnail button."
                        },
                        {
                            "name": "thumbnailsPosition",
                            "optional": true,
                            "readonly": false,
                            "type": "\"left\" | \"top\" | \"bottom\" | \"right\"",
                            "default": "bottom",
                            "description": "Position of thumbnails. Valid values are \"bottom\", \"top\", \"left\" and \"right\"."
                        },
                        {
                            "name": "showIndicators",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display indicator container."
                        },
                        {
                            "name": "showIndicatorsOnItem",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, indicator container is displayed on item container."
                        },
                        {
                            "name": "indicatorsPosition",
                            "optional": true,
                            "readonly": false,
                            "type": "\"left\" | \"top\" | \"bottom\" | \"right\"",
                            "default": "bottom",
                            "description": "Position of indicators. Valid values are \"bottom\", \"top\", \"left\" and \"right\"."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "transitionOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSTransitionProps",
                            "default": "",
                            "description": "The properties of CSSTransition can be customized, except for \"nodeRef\" and \"in\" properties."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "item",
                            "parameters": [
                                {
                                    "name": "item",
                                    "optional": false,
                                    "type": "any",
                                    "description": "Current item."
                                }
                            ],
                            "returnType": "ReactNode",
                            "description": "Function that gets an item in the value and returns the content for preview item."
                        },
                        {
                            "name": "thumbnail",
                            "parameters": [
                                {
                                    "name": "item",
                                    "optional": false,
                                    "type": "any",
                                    "description": "Current thumbnail item."
                                }
                            ],
                            "returnType": "ReactNode",
                            "description": "Function that gets an item in the value and returns the content for thumbnail item."
                        },
                        {
                            "name": "indicator",
                            "parameters": [
                                {
                                    "name": "index",
                                    "optional": false,
                                    "type": "number",
                                    "description": "Index of the indicator."
                                }
                            ],
                            "returnType": "ReactNode",
                            "description": "Function that gets an item in the value and returns the content for indicator item."
                        },
                        {
                            "name": "caption",
                            "parameters": [
                                {
                                    "name": "item",
                                    "optional": false,
                                    "type": "any",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "ReactNode",
                            "description": "Function that gets an item in the value and returns the content for caption item."
                        },
                        {
                            "name": "onItemChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "GalleriaItemChangeEvent",
                                    "description": "Custom change item."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke after changing item."
                        },
                        {
                            "name": "onShow",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when modal becomes visible."
                        },
                        {
                            "name": "onHide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when modal becomes hidden."
                        }
                    ]
                }
            }
        },
        "events": {
            "description": "Defines the custom events used by the component's callbacks.",
            "values": {
                "GalleriaItemChangeEvent": {
                    "description": "Custom complete method event.",
                    "relatedProp": "onItemChange",
                    "props": [
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "index of the new item."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "GalleriaThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "GalleriaProps"
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "GalleriaState"
                        }
                    ],
                    "callbacks": []
                },
                "GalleriaPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "closeButton",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughType<HTMLAttributes<HTMLButtonElement>>",
                            "description": "Uses to pass attributes to the close button's DOM element."
                        },
                        {
                            "name": "closeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the close icon's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "footer",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the footer's DOM element."
                        },
                        {
                            "name": "itemWrapper",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the item wrapper's DOM element."
                        },
                        {
                            "name": "itemContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the item container's DOM element."
                        },
                        {
                            "name": "previousItemButton",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughType<HTMLAttributes<HTMLButtonElement>>",
                            "description": "Uses to pass attributes to the previous item button's DOM element."
                        },
                        {
                            "name": "previousItemIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the previous item icon's DOM element."
                        },
                        {
                            "name": "item",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the item's DOM element."
                        },
                        {
                            "name": "nextItemButton",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughType<HTMLAttributes<HTMLButtonElement>>",
                            "description": "Uses to pass attributes to the next item button's DOM element."
                        },
                        {
                            "name": "nextItemIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the next item icon's DOM element."
                        },
                        {
                            "name": "caption",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the caption's DOM element."
                        },
                        {
                            "name": "indicators",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughType<HTMLAttributes<HTMLUListElement>>",
                            "description": "Uses to pass attributes to the indicators's DOM element."
                        },
                        {
                            "name": "indicator",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughType<HTMLAttributes<HTMLLIElement>>",
                            "description": "Uses to pass attributes to the indicator's DOM element."
                        },
                        {
                            "name": "thumbnailWrapper",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the thumbnail wrapper's DOM element."
                        },
                        {
                            "name": "thumbnailContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the thumbnail container's DOM element."
                        },
                        {
                            "name": "previousThumbnailButton",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughType<HTMLAttributes<HTMLButtonElement>>",
                            "description": "Uses to pass attributes to the previous thumbnail button's DOM element."
                        },
                        {
                            "name": "previousThumbnailIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the previous thumbnail icon's DOM element."
                        },
                        {
                            "name": "thumbnailItemsContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the thumbnail items container's DOM element."
                        },
                        {
                            "name": "thumbnailItems",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the thumbnail items' DOM element."
                        },
                        {
                            "name": "thumbnailItem",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the thumbnail item's DOM element."
                        },
                        {
                            "name": "thumbnailItemContent",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the thumbnail item content's DOM element."
                        },
                        {
                            "name": "nextThumbnailButton",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughType<HTMLAttributes<HTMLButtonElement>>",
                            "description": "Uses to pass attributes to the next thumbnail button's DOM element."
                        },
                        {
                            "name": "nextThumbnailIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the next thumbnail icon's DOM element."
                        },
                        {
                            "name": "mask",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the mask's DOM element."
                        }
                    ],
                    "callbacks": []
                },
                "GalleriaState": {
                    "description": "Defines current inline state in Galleria component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "visible",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Current visible state as a boolean."
                        },
                        {
                            "name": "numVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Number of items per page as a number."
                        },
                        {
                            "name": "slideShowActive",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Current slide show active state."
                        },
                        {
                            "name": "activeIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Current active item index as a number."
                        }
                    ],
                    "callbacks": []
                },
                "GalleriaResponsiveOptions": {
                    "description": "Custom galleria responsive options",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "breakpoint",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Breakpoint for this responsive option."
                        },
                        {
                            "name": "numVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Number of visible items."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "GalleriaPassThroughType": {
                    "values": "PassThroughType<T, GalleriaThroughMethodOptions>"
                }
            }
        }
    },
    "hooks": {
        "description": "The module includes custom hook methods to create shorthands for users.",
        "functions": {
            "description": "Defines the custom functions used by the module.",
            "values": {
                "usePrevious": {
                    "name": "usePrevious",
                    "parameters": [
                        {
                            "name": "value",
                            "type": "any",
                            "description": "The value to compare."
                        }
                    ],
                    "returnType": "any",
                    "description": "Custom hook to get the previous value of a property."
                },
                "useMountEffect": {
                    "name": "useMountEffect",
                    "parameters": [
                        {
                            "name": "effect",
                            "type": "EffectCallback",
                            "description": "The effect to run."
                        }
                    ],
                    "returnType": "void",
                    "description": "Custom hook to run a mount effect only once."
                },
                "useUpdateEffect": {
                    "name": "useUpdateEffect",
                    "parameters": [
                        {
                            "name": "effect",
                            "type": "EffectCallback",
                            "description": "The effect to run."
                        },
                        {
                            "name": "deps",
                            "type": "DependencyList",
                            "description": "The dependencies."
                        }
                    ],
                    "returnType": "void",
                    "description": "Custom hook to run an update effect."
                },
                "useUnmountEffect": {
                    "name": "useUnmountEffect",
                    "parameters": [
                        {
                            "name": "effect",
                            "type": "EffectCallback",
                            "description": "The effect to run."
                        }
                    ],
                    "returnType": "void",
                    "description": "Custom hook to run an unmount effect."
                },
                "useEventListener": {
                    "name": "useEventListener",
                    "parameters": [
                        {
                            "name": "options",
                            "type": "EventOptions",
                            "description": "The event options."
                        }
                    ],
                    "returnType": "any[]",
                    "description": "Custom hook to listen to an event."
                },
                "useOverlayListener": {
                    "name": "useOverlayListener",
                    "parameters": [
                        {
                            "name": "options",
                            "type": "OverlayEventOptions",
                            "description": "The event options."
                        }
                    ],
                    "returnType": "any[]",
                    "description": "Custom hook to listen to overlay event. It can be used when an overlay is desired to behave like the overlays in PrimeReact."
                },
                "useOverlayScrollListener": {
                    "name": "useOverlayScrollListener",
                    "parameters": [
                        {
                            "name": "options",
                            "type": "EventOptions",
                            "description": "The event options."
                        }
                    ],
                    "returnType": "any[]",
                    "description": "Custom hook to listen to overlay scroll. It can be used when an overlay is desired to behave like the overlays in PrimeReact."
                },
                "useResizeListener": {
                    "name": "useResizeListener",
                    "parameters": [
                        {
                            "name": "options",
                            "type": "ResizeEventOptions",
                            "description": "The event options."
                        }
                    ],
                    "returnType": "any[]",
                    "description": "Custom hook to listen to a resize event."
                },
                "useInterval": {
                    "name": "useInterval",
                    "parameters": [
                        {
                            "name": "fn",
                            "type": "any",
                            "description": "The function that will be executed after the delay."
                        },
                        {
                            "name": "delay",
                            "type": "number",
                            "description": "Delay in milliseconds."
                        },
                        {
                            "name": "when",
                            "type": "boolean",
                            "description": "Whether to listen to the event or not."
                        }
                    ],
                    "returnType": "any[]",
                    "description": "Custom hook to use an interval."
                },
                "useTimeout": {
                    "name": "useTimeout",
                    "parameters": [
                        {
                            "name": "fn",
                            "type": "any",
                            "description": "The function that will be executed after the delay."
                        },
                        {
                            "name": "delay",
                            "type": "number",
                            "description": "Delay in milliseconds."
                        },
                        {
                            "name": "when",
                            "type": "boolean",
                            "description": "Whether to listen to the event or not."
                        }
                    ],
                    "returnType": "any[]",
                    "description": "Custom hook to use a timeout."
                },
                "useStorage": {
                    "name": "useStorage",
                    "parameters": [
                        {
                            "name": "initialValue",
                            "type": "S",
                            "description": "The initial value."
                        },
                        {
                            "name": "key",
                            "type": "K",
                            "description": "The key to store the value."
                        },
                        {
                            "name": "storage",
                            "type": "\"local\" | \"session\"",
                            "description": "The storage type. Valid values are 'local' and 'session'."
                        }
                    ],
                    "returnType": "[S, React.Dispatch<React.SetStateAction<S>>]",
                    "description": "Custom hook to use storage such as local and session storage."
                },
                "useLocalStorage": {
                    "name": "useLocalStorage",
                    "parameters": [
                        {
                            "name": "initialValue",
                            "type": "S",
                            "description": "The initial value."
                        },
                        {
                            "name": "key",
                            "type": "K",
                            "description": "The key to store the value in local storage."
                        }
                    ],
                    "returnType": "[S, React.Dispatch<React.SetStateAction<S>>]",
                    "description": "Custom hook to use local storage."
                },
                "useSessionStorage": {
                    "name": "useSessionStorage",
                    "parameters": [
                        {
                            "name": "initialValue",
                            "type": "S",
                            "description": "The initial value."
                        },
                        {
                            "name": "key",
                            "type": "K",
                            "description": "The key to store the value in session storage."
                        }
                    ],
                    "returnType": "[S, React.Dispatch<React.SetStateAction<S>>]",
                    "description": "Custom hook to use session storage."
                },
                "useCounter": {
                    "name": "useCounter",
                    "parameters": [
                        {
                            "name": "initialValue",
                            "type": "number",
                            "description": "The value to counter."
                        },
                        {
                            "name": "options",
                            "type": "Object"
                        }
                    ],
                    "returnType": "any",
                    "description": ""
                },
                "useDebounce": {
                    "name": "useDebounce",
                    "parameters": [
                        {
                            "name": "initialValue",
                            "type": "any",
                            "description": "The initial value for debounce."
                        },
                        {
                            "name": "delay",
                            "type": "number",
                            "description": "The delay in milliseconds."
                        }
                    ],
                    "returnType": "any[]",
                    "description": "Custom hook to use a debounced value."
                },
                "useMouse": {
                    "name": "useMouse",
                    "parameters": [],
                    "returnType": "MouseDataOptions",
                    "description": "Custom hook to use to get the current mouse position."
                },
                "useMove": {
                    "name": "useMove",
                    "parameters": [
                        {
                            "name": "mode",
                            "type": "\"both\" | \"horizontal\" | \"vertical\"",
                            "description": "The mode of the move. Valid values are 'horizontal', 'vertical' and 'both'."
                        },
                        {
                            "name": "initialValue",
                            "type": "MousePositionOptions",
                            "description": "The initial value."
                        }
                    ],
                    "returnType": "MouseMoveOptions",
                    "description": "Custom hook to handles move behavior over any element."
                },
                "useStyle": {
                    "name": "useStyle",
                    "parameters": [
                        {
                            "name": "css",
                            "type": "string",
                            "description": "The style text content."
                        },
                        {
                            "name": "options",
                            "type": "UseStyleOptions",
                            "description": "The options of the style."
                        }
                    ],
                    "returnType": "StyleOptions",
                    "description": "Custom hook to use to get style options."
                },
                "useFavicon": {
                    "name": "useFavicon",
                    "parameters": [
                        {
                            "name": "newIcon",
                            "type": "string",
                            "description": "The new favicon url to set."
                        },
                        {
                            "name": "rel",
                            "type": "string",
                            "description": "The rel attribute of the link element."
                        }
                    ],
                    "returnType": "void",
                    "description": "Custom hook to use change the current favicon."
                },
                "useIntersectionObserver": {
                    "name": "useIntersectionObserver",
                    "parameters": [
                        {
                            "name": "ref",
                            "type": "RefObject<Element>",
                            "description": "The ref of the element to observe."
                        },
                        {
                            "name": "options",
                            "type": "IntersectionObserver",
                            "description": "The options of the intersection observer."
                        }
                    ],
                    "returnType": "boolean",
                    "description": "Custom hook to use change the current favicon."
                },
                "useClickOutside": {
                    "name": "useClickOutside",
                    "parameters": [
                        {
                            "name": "ref",
                            "type": "RefObject<Element>",
                            "description": "The ref of the element to detect click outside."
                        },
                        {
                            "name": "callback",
                            "type": "any",
                            "description": "The callback to run when click outside."
                        }
                    ],
                    "returnType": "void",
                    "description": "Custom hook to use detect click outside."
                },
                "useMatchMedia": {
                    "name": "useMatchMedia",
                    "parameters": [
                        {
                            "name": "query",
                            "type": "string",
                            "description": "the media query"
                        },
                        {
                            "name": "when",
                            "type": "boolean",
                            "description": "Whether to listen to the event or not."
                        }
                    ],
                    "returnType": "boolean",
                    "description": "Custom hook to detect if window size matches or not."
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "MousePositionOptions": {
                    "description": "Custom MousePositionOptions",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "x",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Position of the mouse for the x-axis."
                        },
                        {
                            "name": "y",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Position of the mouse for the y-axis."
                        }
                    ],
                    "callbacks": [],
                    "extendedBy": "MouseDataOptions"
                },
                "UseStyleOptions": {
                    "description": "Custom UseStyleOptions",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "document",
                            "optional": true,
                            "readonly": false,
                            "type": "Document"
                        },
                        {
                            "name": "immediate",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean"
                        },
                        {
                            "name": "manual",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean"
                        },
                        {
                            "name": "name",
                            "optional": false,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "media",
                            "optional": false,
                            "readonly": false,
                            "type": "string"
                        }
                    ],
                    "callbacks": []
                },
                "StyleOptions": {
                    "description": "Custom StyleOptions",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines data-pc-name attribute of the style tag."
                        },
                        {
                            "name": "css",
                            "optional": false,
                            "readonly": false,
                            "type": "RefObject<string>",
                            "description": "The css object."
                        },
                        {
                            "name": "load",
                            "optional": false,
                            "readonly": false,
                            "type": "Function"
                        },
                        {
                            "name": "unload",
                            "optional": false,
                            "readonly": false,
                            "type": "Function"
                        },
                        {
                            "name": "isLoaded",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether the style is loaded or not."
                        }
                    ],
                    "callbacks": []
                },
                "MouseDataOptions": {
                    "description": "Custom MouseDataOptions",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "x",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Position of the mouse for the x-axis."
                        },
                        {
                            "name": "y",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Position of the mouse for the y-axis."
                        },
                        {
                            "name": "reset",
                            "optional": false,
                            "readonly": false,
                            "type": "Function"
                        },
                        {
                            "name": "ref",
                            "optional": false,
                            "readonly": false,
                            "type": "RefObject<HTMLElement>",
                            "description": "The ref of the element to position."
                        }
                    ],
                    "callbacks": [],
                    "extendedBy": "MouseMoveOptions",
                    "extendedTypes": "MousePositionOptions"
                },
                "MouseMoveOptions": {
                    "description": "Custom MouseMoveOptions",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "x",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Position of the mouse for the x-axis."
                        },
                        {
                            "name": "y",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Position of the mouse for the y-axis."
                        },
                        {
                            "name": "reset",
                            "optional": false,
                            "readonly": false,
                            "type": "Function"
                        },
                        {
                            "name": "ref",
                            "optional": false,
                            "readonly": false,
                            "type": "RefObject<HTMLElement>",
                            "description": "The ref of the element to position."
                        },
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether the mouse is touching the element or not."
                        }
                    ],
                    "callbacks": [],
                    "extendedTypes": "MouseDataOptions"
                },
                "EventOptions": {
                    "description": "Custom event options.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "target",
                            "optional": true,
                            "readonly": false,
                            "type": "\"window\" | \"document\" | Ref<HTMLElement>",
                            "description": "The target element to listen to."
                        },
                        {
                            "name": "type",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "The event type to listen to."
                        },
                        {
                            "name": "options",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "description": "The event options."
                        },
                        {
                            "name": "when",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether to listen to the event or not."
                        }
                    ],
                    "callbacks": [
                        {
                            "name": "listener",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event"
                                }
                            ],
                            "returnType": "void",
                            "description": "The event listener."
                        }
                    ]
                },
                "OverlayListenerOptions": {
                    "description": "The options of event listener in OverlayEventOptions",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "type",
                            "optional": false,
                            "readonly": false,
                            "type": "\"resize\" | \"scroll\" | \"outside\" | \"orientationChange\"",
                            "description": "Type of listener."
                        },
                        {
                            "name": "valid",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether it is valid."
                        }
                    ],
                    "callbacks": []
                },
                "OverlayEventOptions": {
                    "description": "Custom overlay event options.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "target",
                            "optional": true,
                            "readonly": false,
                            "type": "\"window\" | \"document\" | Ref<HTMLElement>",
                            "description": "The target element to listen to."
                        },
                        {
                            "name": "overlay",
                            "optional": true,
                            "readonly": false,
                            "type": "\"window\" | \"document\" | Ref<HTMLElement>",
                            "description": "The overlay element to listen to."
                        },
                        {
                            "name": "when",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether to listen to the event or not."
                        }
                    ],
                    "callbacks": [
                        {
                            "name": "listener",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event"
                                },
                                {
                                    "name": "options",
                                    "optional": true,
                                    "type": "OverlayListenerOptions"
                                }
                            ],
                            "returnType": "void",
                            "description": "The event listener."
                        }
                    ]
                },
                "ResizeEventOptions": {
                    "description": "Custom resize event options.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "when",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether to listen to the event or not."
                        }
                    ],
                    "callbacks": [
                        {
                            "name": "listener",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "The browser event object."
                                }
                            ],
                            "returnType": "void",
                            "description": "The event listener."
                        }
                    ]
                }
            }
        }
    },
    "iconbase/iconbase": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "IconBaseProps": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "spin",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean"
                        }
                    ],
                    "callbacks": [],
                    "extendedBy": "AngleDoubleDownIconProps,AngleDoubleLeftIconProps,AngleDoubleRightIconProps,AngleDoubleUpIconProps,AngleDownIconProps,AngleLeftIconProps,AngleRightIconProps,AngleUpIconProps,ArrowDownIconProps,ArrowUpIconProps,BanIconProps,BarsIconProps,CalendarIconProps,CheckIconProps,ChevronDownIconProps,ChevronLeftIconProps,ChevronRightIconProps,ChevronUpIconProps,DownloadIconProps,ExclamationTriangleIconProps,EyeIconProps,EyeSlashIconProps,FilterIconProps,FilterSlashIconProps,InfoCircleIconProps,MinusIconProps,PencilIconProps,PlusIconProps,RefreshIconProps,SearchIconProps,SearchMinusIconProps,SearchPlusIconProps,SortAltIconProps,SortAmountDownIconProps,SortAmountUpAltIconProps,SpinnerIconProps,StarIconProps,StarFillIconProps,ThLargeIconProps,TimesIconProps,TimesCircleIconProps,TrashIconProps,UndoIconProps,UploadIconProps,WindowMaximizeIconProps,WindowMinimizeIconProps",
                    "extendedTypes": "Omit<React.SVGProps<SVGSVGElement>, \"ref\">"
                }
            }
        }
    },
    "icons/angledoubledown": {
        "components": {
            "AngleDoubleDownIcon": {
                "description": "**PrimeReact - AngleDoubleDownIcon**\n\n[Live Demo](https://www.primereact.org/icons/)\n--- ---\n![PrimeReact](https://primefaces.org/cdn/primereact/images/logo-100.png)",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                },
                "props": {
                    "description": "Defines valid properties in AngleDoubleDownIcon component. In addition to these, all properties of SVGSVGElement can be used in this component.",
                    "values": [
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "spin",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        }
    },
    "icons/angledoubleleft": {
        "components": {
            "AngleDoubleLeftIcon": {
                "description": "**PrimeReact - AngleDoubleLeftIcon**\n\n[Live Demo](https://www.primereact.org/icons/)\n--- ---\n![PrimeReact](https://primefaces.org/cdn/primereact/images/logo-100.png)",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                },
                "props": {
                    "description": "Defines valid properties in AngleDoubleLeftIcon component. In addition to these, all properties of SVGSVGElement can be used in this component.",
                    "values": [
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "spin",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        }
    },
    "icons/angledoubleright": {
        "components": {
            "AngleDoubleRightIcon": {
                "description": "**PrimeReact - AngleDoubleRightIcon**\n\n[Live Demo](https://www.primereact.org/icons/)\n--- ---\n![PrimeReact](https://primefaces.org/cdn/primereact/images/logo-100.png)",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                },
                "props": {
                    "description": "Defines valid properties in AngleDoubleRightIcon component. In addition to these, all properties of SVGSVGElement can be used in this component.",
                    "values": [
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "spin",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        }
    },
    "icons/angledoubleup": {
        "components": {
            "AngleDoubleUpIcon": {
                "description": "**PrimeReact - AngleDoubleUpIcon**\n\n[Live Demo](https://www.primereact.org/icons/)\n--- ---\n![PrimeReact](https://primefaces.org/cdn/primereact/images/logo-100.png)",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                },
                "props": {
                    "description": "Defines valid properties in AngleDoubleUpIcon component. In addition to these, all properties of SVGSVGElement can be used in this component.",
                    "values": [
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "spin",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        }
    },
    "icons/angledown": {
        "components": {
            "AngleDownIcon": {
                "description": "**PrimeReact - AngleDownIcon**\n\n[Live Demo](https://www.primereact.org/icons/)\n--- ---\n![PrimeReact](https://primefaces.org/cdn/primereact/images/logo-100.png)",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                },
                "props": {
                    "description": "Defines valid properties in AngleDownIcon component. In addition to these, all properties of SVGSVGElement can be used in this component.",
                    "values": [
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "spin",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        }
    },
    "icons/angleleft": {
        "components": {
            "AngleLeftIcon": {
                "description": "**PrimeReact - AngleLeftIcon**\n\n[Live Demo](https://www.primereact.org/icons/)\n--- ---\n![PrimeReact](https://primefaces.org/cdn/primereact/images/logo-100.png)",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                },
                "props": {
                    "description": "Defines valid properties in AngleLeftIcon component. In addition to these, all properties of SVGSVGElement can be used in this component.",
                    "values": [
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "spin",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        }
    },
    "icons/angleright": {
        "components": {
            "AngleRightIcon": {
                "description": "**PrimeReact - AngleRightIcon**\n\n[Live Demo](https://www.primereact.org/icons/)\n--- ---\n![PrimeReact](https://primefaces.org/cdn/primereact/images/logo-100.png)",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                },
                "props": {
                    "description": "Defines valid properties in AngleRightIcon component. In addition to these, all properties of SVGSVGElement can be used in this component.",
                    "values": [
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "spin",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        }
    },
    "icons/angleup": {
        "components": {
            "AngleUpIcon": {
                "description": "**PrimeReact - AngleUpIcon**\n\n[Live Demo](https://www.primereact.org/icons/)\n--- ---\n![PrimeReact](https://primefaces.org/cdn/primereact/images/logo-100.png)",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                },
                "props": {
                    "description": "Defines valid properties in AngleUpIcon component. In addition to these, all properties of SVGSVGElement can be used in this component.",
                    "values": [
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "spin",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        }
    },
    "icons/arrowdown": {
        "components": {
            "ArrowDownIcon": {
                "description": "**PrimeReact - ArrowDownIcon**\n\n[Live Demo](https://www.primereact.org/icons/)\n--- ---\n![PrimeReact](https://primefaces.org/cdn/primereact/images/logo-100.png)",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                },
                "props": {
                    "description": "Defines valid properties in ArrowDownIcon component. In addition to these, all properties of SVGSVGElement can be used in this component.",
                    "values": [
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "spin",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        }
    },
    "icons/arrowup": {
        "components": {
            "ArrowUpIcon": {
                "description": "**PrimeReact - ArrowUpIcon**\n\n[Live Demo](https://www.primereact.org/icons/)\n--- ---\n![PrimeReact](https://primefaces.org/cdn/primereact/images/logo-100.png)",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                },
                "props": {
                    "description": "Defines valid properties in ArrowUpIcon component. In addition to these, all properties of SVGSVGElement can be used in this component.",
                    "values": [
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "spin",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        }
    },
    "icons/ban": {
        "components": {
            "BanIcon": {
                "description": "**PrimeReact - BanIcon**\n\n[Live Demo](https://www.primereact.org/icons/)\n--- ---\n![PrimeReact](https://primefaces.org/cdn/primereact/images/logo-100.png)",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                },
                "props": {
                    "description": "Defines valid properties in BanIcon component. In addition to these, all properties of SVGSVGElement can be used in this component.",
                    "values": [
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "spin",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        }
    },
    "icons/bars": {
        "components": {
            "BarsIcon": {
                "description": "**PrimeReact - BarsIcon**\n\n[Live Demo](https://www.primereact.org/icons/)\n--- ---\n![PrimeReact](https://primefaces.org/cdn/primereact/images/logo-100.png)",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                },
                "props": {
                    "description": "Defines valid properties in BarsIcon component. In addition to these, all properties of SVGSVGElement can be used in this component.",
                    "values": [
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "spin",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        }
    },
    "icons/calendar": {
        "components": {
            "CalendarIcon": {
                "description": "**PrimeReact - CalendarIcon**\n\n[Live Demo](https://www.primereact.org/icons/)\n--- ---\n![PrimeReact](https://primefaces.org/cdn/primereact/images/logo-100.png)",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                },
                "props": {
                    "description": "Defines valid properties in CalendarIcon component. In addition to these, all properties of SVGSVGElement can be used in this component.",
                    "values": [
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "spin",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        }
    },
    "icons/check": {
        "components": {
            "CheckIcon": {
                "description": "**PrimeReact - CheckIcon**\n\n[Live Demo](https://www.primereact.org/icons/)\n--- ---\n![PrimeReact](https://primefaces.org/cdn/primereact/images/logo-100.png)",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                },
                "props": {
                    "description": "Defines valid properties in CheckIcon component. In addition to these, all properties of SVGSVGElement can be used in this component.",
                    "values": [
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "spin",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        }
    },
    "icons/chevrondown": {
        "components": {
            "ChevronDownIcon": {
                "description": "**PrimeReact - ChevronDownIcon**\n\n[Live Demo](https://www.primereact.org/icons/)\n--- ---\n![PrimeReact](https://primefaces.org/cdn/primereact/images/logo-100.png)",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                },
                "props": {
                    "description": "Defines valid properties in ChevronDownIcon component. In addition to these, all properties of SVGSVGElement can be used in this component.",
                    "values": [
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "spin",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        }
    },
    "icons/chevronleft": {
        "components": {
            "ChevronLeftIcon": {
                "description": "**PrimeReact - ChevronLeftIcon**\n\n[Live Demo](https://www.primereact.org/icons/)\n--- ---\n![PrimeReact](https://primefaces.org/cdn/primereact/images/logo-100.png)",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                },
                "props": {
                    "description": "Defines valid properties in ChevronLeftIcon component. In addition to these, all properties of SVGSVGElement can be used in this component.",
                    "values": [
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "spin",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        }
    },
    "icons/chevronright": {
        "components": {
            "ChevronRightIcon": {
                "description": "**PrimeReact - ChevronRightIcon**\n\n[Live Demo](https://www.primereact.org/icons/)\n--- ---\n![PrimeReact](https://primefaces.org/cdn/primereact/images/logo-100.png)",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                },
                "props": {
                    "description": "Defines valid properties in ChevronRightIcon component. In addition to these, all properties of SVGSVGElement can be used in this component.",
                    "values": [
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "spin",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        }
    },
    "icons/chevronup": {
        "components": {
            "ChevronUpIcon": {
                "description": "**PrimeReact - ChevronUpIcon**\n\n[Live Demo](https://www.primereact.org/icons/)\n--- ---\n![PrimeReact](https://primefaces.org/cdn/primereact/images/logo-100.png)",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                },
                "props": {
                    "description": "Defines valid properties in ChevronUpIcon component. In addition to these, all properties of SVGSVGElement can be used in this component.",
                    "values": [
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "spin",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        }
    },
    "icons/download": {
        "components": {
            "DownloadIcon": {
                "description": "**PrimeReact - DownloadIcon**\n\n[Live Demo](https://www.primereact.org/icons/)\n--- ---\n![PrimeReact](https://primefaces.org/cdn/primereact/images/logo-100.png)",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                },
                "props": {
                    "description": "Defines valid properties in DownloadIcon component. In addition to these, all properties of SVGSVGElement can be used in this component.",
                    "values": [
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "spin",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        }
    },
    "icons/exclamationtriangle": {
        "components": {
            "ExclamationTriangleIcon": {
                "description": "**PrimeReact - ExclamationTriangleIcon**\n\n[Live Demo](https://www.primereact.org/icons/)\n--- ---\n![PrimeReact](https://primefaces.org/cdn/primereact/images/logo-100.png)",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                },
                "props": {
                    "description": "Defines valid properties in ExclamationTriangleIcon component. In addition to these, all properties of SVGSVGElement can be used in this component.",
                    "values": [
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "spin",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        }
    },
    "icons/eye": {
        "components": {
            "EyeIcon": {
                "description": "**PrimeReact - EyeIcon**\n\n[Live Demo](https://www.primereact.org/icons/)\n--- ---\n![PrimeReact](https://primefaces.org/cdn/primereact/images/logo-100.png)",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                },
                "props": {
                    "description": "Defines valid properties in EyeIcon component. In addition to these, all properties of SVGSVGElement can be used in this component.",
                    "values": [
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "spin",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        }
    },
    "icons/eyeslash": {
        "components": {
            "EyeSlashIcon": {
                "description": "**PrimeReact - EyeSlashIcon**\n\n[Live Demo](https://www.primereact.org/icons/)\n--- ---\n![PrimeReact](https://primefaces.org/cdn/primereact/images/logo-100.png)",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                },
                "props": {
                    "description": "Defines valid properties in EyeSlashIcon component. In addition to these, all properties of SVGSVGElement can be used in this component.",
                    "values": [
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "spin",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        }
    },
    "icons/filter": {
        "components": {
            "FilterIcon": {
                "description": "**PrimeReact - FilterIcon**\n\n[Live Demo](https://www.primereact.org/icons/)\n--- ---\n![PrimeReact](https://primefaces.org/cdn/primereact/images/logo-100.png)",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                },
                "props": {
                    "description": "Defines valid properties in FilterIcon component. In addition to these, all properties of SVGSVGElement can be used in this component.",
                    "values": [
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "spin",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        }
    },
    "icons/filterslash": {
        "components": {
            "FilterSlashIcon": {
                "description": "**PrimeReact - FilterSlashIcon**\n\n[Live Demo](https://www.primereact.org/icons/)\n--- ---\n![PrimeReact](https://primefaces.org/cdn/primereact/images/logo-100.png)",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                },
                "props": {
                    "description": "Defines valid properties in FilterSlashIcon component. In addition to these, all properties of SVGSVGElement can be used in this component.",
                    "values": [
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "spin",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        }
    },
    "icons/infocircle": {
        "components": {
            "InfoCircleIcon": {
                "description": "**PrimeReact - InfoCircleIcon**\n\n[Live Demo](https://www.primereact.org/icons/)\n--- ---\n![PrimeReact](https://primefaces.org/cdn/primereact/images/logo-100.png)",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                },
                "props": {
                    "description": "Defines valid properties in InfoCircleIcon component. In addition to these, all properties of SVGSVGElement can be used in this component.",
                    "values": [
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "spin",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        }
    },
    "icons/minus": {
        "components": {
            "MinusIcon": {
                "description": "**PrimeReact - MinusIcon**\n\n[Live Demo](https://www.primereact.org/icons/)\n--- ---\n![PrimeReact](https://primefaces.org/cdn/primereact/images/logo-100.png)",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                },
                "props": {
                    "description": "Defines valid properties in MinusIcon component. In addition to these, all properties of SVGSVGElement can be used in this component.",
                    "values": [
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "spin",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        }
    },
    "icons/pencil": {
        "components": {
            "PencilIcon": {
                "description": "**PrimeReact - PencilIcon**\n\n[Live Demo](https://www.primereact.org/icons/)\n--- ---\n![PrimeReact](https://primefaces.org/cdn/primereact/images/logo-100.png)",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                },
                "props": {
                    "description": "Defines valid properties in PencilIcon component. In addition to these, all properties of SVGSVGElement can be used in this component.",
                    "values": [
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "spin",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        }
    },
    "icons/plus": {
        "components": {
            "PlusIcon": {
                "description": "**PrimeReact - PlusIcon**\n\n[Live Demo](https://www.primereact.org/icons/)\n--- ---\n![PrimeReact](https://primefaces.org/cdn/primereact/images/logo-100.png)",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                },
                "props": {
                    "description": "Defines valid properties in PlusIcon component. In addition to these, all properties of SVGSVGElement can be used in this component.",
                    "values": [
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "spin",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        }
    },
    "icons/refresh": {
        "components": {
            "RefreshIcon": {
                "description": "**PrimeReact - RefreshIcon**\n\n[Live Demo](https://www.primereact.org/icons/)\n--- ---\n![PrimeReact](https://primefaces.org/cdn/primereact/images/logo-100.png)",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                },
                "props": {
                    "description": "Defines valid properties in RefreshIcon component. In addition to these, all properties of SVGSVGElement can be used in this component.",
                    "values": [
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "spin",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        }
    },
    "icons/search": {
        "components": {
            "SearchIcon": {
                "description": "**PrimeReact - SearchIcon**\n\n[Live Demo](https://www.primereact.org/icons/)\n--- ---\n![PrimeReact](https://primefaces.org/cdn/primereact/images/logo-100.png)",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                },
                "props": {
                    "description": "Defines valid properties in SearchIcon component. In addition to these, all properties of SVGSVGElement can be used in this component.",
                    "values": [
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "spin",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        }
    },
    "icons/searchminus": {
        "components": {
            "SearchMinusIcon": {
                "description": "**PrimeReact - SearchMinusIcon**\n\n[Live Demo](https://www.primereact.org/icons/)\n--- ---\n![PrimeReact](https://primefaces.org/cdn/primereact/images/logo-100.png)",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                },
                "props": {
                    "description": "Defines valid properties in SearchMinusIcon component. In addition to these, all properties of SVGSVGElement can be used in this component.",
                    "values": [
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "spin",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        }
    },
    "icons/searchplus": {
        "components": {
            "SearchPlusIcon": {
                "description": "**PrimeReact - SearchPlusIcon**\n\n[Live Demo](https://www.primereact.org/icons/)\n--- ---\n![PrimeReact](https://primefaces.org/cdn/primereact/images/logo-100.png)",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                },
                "props": {
                    "description": "Defines valid properties in SearchPlusIcon component. In addition to these, all properties of SVGSVGElement can be used in this component.",
                    "values": [
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "spin",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        }
    },
    "icons/sortalt": {
        "components": {
            "SortAltIcon": {
                "description": "**PrimeReact - SortAltIcon**\n\n[Live Demo](https://www.primereact.org/icons/)\n--- ---\n![PrimeReact](https://primefaces.org/cdn/primereact/images/logo-100.png)",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                },
                "props": {
                    "description": "Defines valid properties in SortAltIcon component. In addition to these, all properties of SVGSVGElement can be used in this component.",
                    "values": [
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "spin",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        }
    },
    "icons/sortamountdown": {
        "components": {
            "SortAmountDownIcon": {
                "description": "**PrimeReact - SortAmountDownIcon**\n\n[Live Demo](https://www.primereact.org/icons/)\n--- ---\n![PrimeReact](https://primefaces.org/cdn/primereact/images/logo-100.png)",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                },
                "props": {
                    "description": "Defines valid properties in SortAmountDownIcon component. In addition to these, all properties of SVGSVGElement can be used in this component.",
                    "values": [
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "spin",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        }
    },
    "icons/sortamountupalt": {
        "components": {
            "SortAmountUpAltIcon": {
                "description": "**PrimeReact - SortAmountUpAltIcon**\n\n[Live Demo](https://www.primereact.org/icons/)\n--- ---\n![PrimeReact](https://primefaces.org/cdn/primereact/images/logo-100.png)",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                },
                "props": {
                    "description": "Defines valid properties in SortAmountUpAltIcon component. In addition to these, all properties of SVGSVGElement can be used in this component.",
                    "values": [
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "spin",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        }
    },
    "icons/spinner": {
        "components": {
            "SpinnerIcon": {
                "description": "**PrimeReact - SpinnerIcon**\n\n[Live Demo](https://www.primereact.org/icons/)\n--- ---\n![PrimeReact](https://primefaces.org/cdn/primereact/images/logo-100.png)",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                },
                "props": {
                    "description": "Defines valid properties in SpinnerIcon component. In addition to these, all properties of SVGSVGElement can be used in this component.",
                    "values": [
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "spin",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        }
    },
    "icons/star": {
        "components": {
            "StarIcon": {
                "description": "**PrimeReact - StarIcon**\n\n[Live Demo](https://www.primereact.org/icons/)\n--- ---\n![PrimeReact](https://primefaces.org/cdn/primereact/images/logo-100.png)",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                },
                "props": {
                    "description": "Defines valid properties in StarIcon component. In addition to these, all properties of SVGSVGElement can be used in this component.",
                    "values": [
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "spin",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        }
    },
    "icons/starfill": {
        "components": {
            "StarFillIcon": {
                "description": "**PrimeReact - StarFillIcon**\n\n[Live Demo](https://www.primereact.org/icons/)\n--- ---\n![PrimeReact](https://primefaces.org/cdn/primereact/images/logo-100.png)",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                },
                "props": {
                    "description": "Defines valid properties in StarFillIcon component. In addition to these, all properties of SVGSVGElement can be used in this component.",
                    "values": [
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "spin",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        }
    },
    "icons/thlarge": {
        "components": {
            "ThLargeIcon": {
                "description": "**PrimeReact - ThLargeIcon**\n\n[Live Demo](https://www.primereact.org/icons/)\n--- ---\n![PrimeReact](https://primefaces.org/cdn/primereact/images/logo-100.png)",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                },
                "props": {
                    "description": "Defines valid properties in ThLargeIcon component. In addition to these, all properties of SVGSVGElement can be used in this component.",
                    "values": [
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "spin",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        }
    },
    "icons/times": {
        "components": {
            "TimesIcon": {
                "description": "**PrimeReact - TimesIcon**\n\n[Live Demo](https://www.primereact.org/icons/)\n--- ---\n![PrimeReact](https://primefaces.org/cdn/primereact/images/logo-100.png)",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                },
                "props": {
                    "description": "Defines valid properties in TimesIcon component. In addition to these, all properties of SVGSVGElement can be used in this component.",
                    "values": [
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "spin",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        }
    },
    "icons/timescircle": {
        "components": {
            "TimesCircleIcon": {
                "description": "**PrimeReact - TimesCircleIcon**\n\n[Live Demo](https://www.primereact.org/icons/)\n--- ---\n![PrimeReact](https://primefaces.org/cdn/primereact/images/logo-100.png)",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                },
                "props": {
                    "description": "Defines valid properties in TimesCircleIcon component. In addition to these, all properties of SVGSVGElement can be used in this component.",
                    "values": [
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "spin",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        }
    },
    "icons/trash": {
        "components": {
            "TrashIcon": {
                "description": "**PrimeReact - TrashIcon**\n\n[Live Demo](https://www.primereact.org/icons/)\n--- ---\n![PrimeReact](https://primefaces.org/cdn/primereact/images/logo-100.png)",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                },
                "props": {
                    "description": "Defines valid properties in TrashIcon component. In addition to these, all properties of SVGSVGElement can be used in this component.",
                    "values": [
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "spin",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        }
    },
    "icons/undo": {
        "components": {
            "UndoIcon": {
                "description": "**PrimeReact - UndoIcon**\n\n[Live Demo](https://www.primereact.org/icons/)\n--- ---\n![PrimeReact](https://primefaces.org/cdn/primereact/images/logo-100.png)",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                },
                "props": {
                    "description": "Defines valid properties in UndoIcon component. In addition to these, all properties of SVGSVGElement can be used in this component.",
                    "values": [
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "spin",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        }
    },
    "icons/upload": {
        "components": {
            "UploadIcon": {
                "description": "**PrimeReact - UploadIcon**\n\n[Live Demo](https://www.primereact.org/icons/)\n--- ---\n![PrimeReact](https://primefaces.org/cdn/primereact/images/logo-100.png)",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                },
                "props": {
                    "description": "Defines valid properties in UploadIcon component. In addition to these, all properties of SVGSVGElement can be used in this component.",
                    "values": [
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "spin",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        }
    },
    "icons/windowmaximize": {
        "components": {
            "WindowMaximizeIcon": {
                "description": "**PrimeReact - WindowMaximizeIcon**\n\n[Live Demo](https://www.primereact.org/icons/)\n--- ---\n![PrimeReact](https://primefaces.org/cdn/primereact/images/logo-100.png)",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                },
                "props": {
                    "description": "Defines valid properties in WindowMaximizeIcon component. In addition to these, all properties of SVGSVGElement can be used in this component.",
                    "values": [
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "spin",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        }
    },
    "icons/windowminimize": {
        "components": {
            "WindowMinimizeIcon": {
                "description": "**PrimeReact - WindowMinimizeIcon**\n\n[Live Demo](https://www.primereact.org/icons/)\n--- ---\n![PrimeReact](https://primefaces.org/cdn/primereact/images/logo-100.png)",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                },
                "props": {
                    "description": "Defines valid properties in WindowMinimizeIcon component. In addition to these, all properties of SVGSVGElement can be used in this component.",
                    "values": [
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "spin",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        }
    },
    "image": {
        "description": "Displays a single image with preview and tranformation options.\n\n[Live Demo](https://www.primereact.org/image/)",
        "components": {
            "Image": {
                "description": "Displays a single image with preview and tranformation options.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Used to show the overlay."
                        },
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Used to hide the overlay."
                        },
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLSpanElement",
                            "description": "Used to get container element."
                        },
                        {
                            "name": "getImage",
                            "parameters": [],
                            "returnType": "HTMLImageElement",
                            "description": "Used to get image element"
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in Image component. In addition to these, all properties of HTMLSpanElement can be used in this component.",
                    "values": [
                        {
                            "name": "alt",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Specifies an alternate text for an area, if the image cannot be displayed."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "crossOrigin",
                            "optional": true,
                            "readonly": false,
                            "type": "\"\" | \"anonymous\" | \"use-credentials\"",
                            "default": "",
                            "description": "The crossorigin content attribute on media elements is a CORS settings attribute."
                        },
                        {
                            "name": "downloadable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Adds a download button to the preview control menu."
                        },
                        {
                            "name": "downloadIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<ImageProps>",
                            "default": "",
                            "description": "Icon of the download button."
                        },
                        {
                            "name": "loading",
                            "optional": true,
                            "readonly": false,
                            "type": "\"eager\" | \"lazy\"",
                            "default": "",
                            "description": "Specifies whether a browser should load an image immediately or to defer loading of off-screen images until for example the user scrolls near them."
                        },
                        {
                            "name": "rotateRightIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<ImageProps>",
                            "default": "",
                            "description": "Icon of the rotate right button."
                        },
                        {
                            "name": "rotateLeftIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<ImageProps>",
                            "default": "",
                            "description": "Icon of the rotate left button."
                        },
                        {
                            "name": "referrerPolicy",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLAttributeReferrerPolicy",
                            "default": "",
                            "description": "HTTP header controls how much referrer information (sent with the Referer header) should be included with requests."
                        },
                        {
                            "name": "useMap",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Specifies an image as a client-side image map (an image map is an image with clickable areas)"
                        },
                        {
                            "name": "zoomOutIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<ImageProps>",
                            "default": "",
                            "description": "Icon of the zoom out button."
                        },
                        {
                            "name": "zoomInIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<ImageProps>",
                            "default": "",
                            "description": "Icon of the zoom in button."
                        },
                        {
                            "name": "closeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<ImageProps>",
                            "default": "",
                            "description": "Icon of the close button."
                        },
                        {
                            "name": "height",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Height of the image element."
                        },
                        {
                            "name": "imageClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the image element."
                        },
                        {
                            "name": "imageStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the image element."
                        },
                        {
                            "name": "preview",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Controls the preview functionality."
                        },
                        {
                            "name": "indicatorIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<ImageProps>",
                            "default": "",
                            "description": "Changing the default icon when the image is hovered in preview mode."
                        },
                        {
                            "name": "src",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Specifies the path to the image."
                        },
                        {
                            "name": "template",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Changing the default icon when the image is hovered in preview mode. Since v9, use  `indicatorIcon`  instead.",
                            "deprecated": "Since v9, use "
                        },
                        {
                            "name": "width",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Width of the image element."
                        },
                        {
                            "name": "zoomSrc",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Zoomed image that may be different than \"src\" image."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "ImagePassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onHide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Triggered when the preview overlay is hidden."
                        },
                        {
                            "name": "onShow",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Triggered when the preview overlay is shown."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "ImageThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ImageProps"
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "ImageState"
                        }
                    ],
                    "callbacks": []
                },
                "ImagePassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ImagePassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "image",
                            "optional": true,
                            "readonly": false,
                            "type": "ImagePassThroughType<ImgHTMLAttributes<HTMLImageElement>>",
                            "description": "Uses to pass attributes to the image's DOM element."
                        },
                        {
                            "name": "button",
                            "optional": true,
                            "readonly": false,
                            "type": "ImagePassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the button's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "ImagePassThroughType<SVGProps<SVGSVGElement> | HTMLAttributes<SVGSVGElement | HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the icon's DOM element."
                        },
                        {
                            "name": "mask",
                            "optional": true,
                            "readonly": false,
                            "type": "ImagePassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the mask's DOM element."
                        },
                        {
                            "name": "toolbar",
                            "optional": true,
                            "readonly": false,
                            "type": "ImagePassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the toolbar's DOM element."
                        },
                        {
                            "name": "downloadButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ImagePassThroughType<HTMLAttributes<HTMLButtonElement>>",
                            "description": "Uses to pass attributes to the download button's DOM element."
                        },
                        {
                            "name": "downloadIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ImagePassThroughType<SVGProps<SVGSVGElement> | HTMLAttributes<SVGSVGElement | HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the download icon's DOM element."
                        },
                        {
                            "name": "rotateRightButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ImagePassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the rotate right button's DOM element."
                        },
                        {
                            "name": "rotateRightIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ImagePassThroughType<SVGProps<SVGSVGElement> | HTMLAttributes<SVGSVGElement | HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the rotate right icon's DOM element."
                        },
                        {
                            "name": "rotateLeftButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ImagePassThroughType<HTMLAttributes<HTMLButtonElement>>",
                            "description": "Uses to pass attributes to the rotate left button's DOM element."
                        },
                        {
                            "name": "rotateLeftIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ImagePassThroughType<SVGProps<SVGSVGElement> | HTMLAttributes<SVGSVGElement | HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the rotate left icon's DOM element."
                        },
                        {
                            "name": "zoomOutButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ImagePassThroughType<HTMLAttributes<HTMLButtonElement>>",
                            "description": "Uses to pass attributes to the zoom out button's DOM element."
                        },
                        {
                            "name": "zoomOutIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ImagePassThroughType<SVGProps<SVGSVGElement> | HTMLAttributes<SVGSVGElement | HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the zoom out icon's DOM element."
                        },
                        {
                            "name": "zoomInButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ImagePassThroughType<HTMLAttributes<HTMLButtonElement>>",
                            "description": "Uses to pass attributes to the zoom in button's DOM element."
                        },
                        {
                            "name": "zoomInIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ImagePassThroughType<SVGProps<SVGSVGElement> | HTMLAttributes<SVGSVGElement | HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the zoom in icon's DOM element."
                        },
                        {
                            "name": "closeButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ImagePassThroughType<HTMLAttributes<HTMLButtonElement>>",
                            "description": "Uses to pass attributes to the close button's DOM element."
                        },
                        {
                            "name": "closeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ImagePassThroughType<SVGProps<SVGSVGElement> | HTMLAttributes<SVGSVGElement | HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the close icon's DOM element."
                        },
                        {
                            "name": "previewContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "ImagePassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the preview container's DOM element."
                        },
                        {
                            "name": "preview",
                            "optional": true,
                            "readonly": false,
                            "type": "ImagePassThroughType<ImgHTMLAttributes<HTMLImageElement>>",
                            "description": "Uses to pass attributes to the preview's DOM element."
                        }
                    ],
                    "callbacks": []
                },
                "ImageState": {
                    "description": "Defines current inline state in Image component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "maskVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Mask visible state as a boolean."
                        },
                        {
                            "name": "previewVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Preview visible state as a boolean."
                        },
                        {
                            "name": "rotate",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Rotate state as a number."
                        },
                        {
                            "name": "scale",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Scale state as a boolean."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ImagePassThroughType": {
                    "values": "PassThroughType<T, ImageThroughMethodOptions>"
                }
            }
        }
    },
    "inplace": {
        "description": "Inplace provides an easy to do editing and display at the same time where clicking the output displays the actual content.\n\n[Live Demo](https://www.primereact.org/inplace)\n\nHelper Components:\n\n-  InplaceDisplay \n\n-  InplaceContent",
        "components": {
            "Inplace": {
                "description": "Inplace provides an easy to do editing and display at the same time where clicking the output displays the actual content.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in Inplace component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "values": [
                        {
                            "name": "active",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the content is displayed or not."
                        },
                        {
                            "name": "closable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Displays a button to switch back to display mode."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the element should be disabled."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Used to define a string that labels the component."
                        },
                        {
                            "name": "closeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<InplaceProps>",
                            "default": "",
                            "description": "Icon of the close button."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "InplacePassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onOpen",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "MouseEvent<HTMLElement, MouseEvent>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when inplace is opened."
                        },
                        {
                            "name": "onClose",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "MouseEvent<HTMLElement, MouseEvent>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when inplace is closed."
                        },
                        {
                            "name": "onToggle",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "InplaceToggleEvent",
                                    "description": "Custom toggle event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when inplace is opened or closed."
                        }
                    ]
                }
            },
            "InplaceDisplay": {
                "description": "InplaceDisplay is a helper component for Inplace.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                },
                "props": {
                    "description": "",
                    "values": [
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            },
            "InplaceContent": {
                "description": "InplaceContent is a helper component for Inplace.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                },
                "props": {
                    "description": "",
                    "values": [
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        },
        "events": {
            "description": "Defines the custom events used by the component's callbacks.",
            "values": {
                "InplaceToggleEvent": {
                    "description": "Custom toggle event.",
                    "relatedProp": "onToggle",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Browser event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current value"
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "InplacePassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "InplaceProps"
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "InplaceState"
                        }
                    ],
                    "callbacks": []
                },
                "InplacePassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "InplacePassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "display",
                            "optional": true,
                            "readonly": false,
                            "type": "InplacePassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the display's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "InplacePassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "closeButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions",
                            "description": "Uses to pass attributes to the Button component."
                        }
                    ],
                    "callbacks": []
                },
                "InplaceState": {
                    "description": "Defines current inline state in Inplace component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current active state as a boolean."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "InplacePassThroughType": {
                    "values": "PassThroughType<T, InplacePassThroughMethodOptions>"
                }
            }
        }
    },
    "inputmask": {
        "description": "InputMask component is used to enter input in a certain format such as numeric, date, currency, email and phone.\n\n[Live Demo](https://www.primereact.org/inputmask/)",
        "components": {
            "InputMask": {
                "description": "InputMask component is used to enter input in a certain format such as numeric, date, currency, email and phone.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "focus",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Used to focus the component."
                        },
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "ForwardRefExoticComponent<InputTextProps & RefAttributes<HTMLInputElement>>",
                            "description": "Used to get container element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in InputMask component. In addition to these, all properties of  inputtext  can be used in this component.",
                    "values": [
                        {
                            "name": "mask",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Mask pattern."
                        },
                        {
                            "name": "slotChar",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "_",
                            "description": "Placeholder character in mask."
                        },
                        {
                            "name": "autoClear",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Clears the incomplete value on blur."
                        },
                        {
                            "name": "unmask",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if model sets the raw unmasked value to bound value or the formatted mask value."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the element value cannot be altered."
                        },
                        {
                            "name": "readOnly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that an input field is read-only."
                        },
                        {
                            "name": "required",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the element must be filled out before submitting the form."
                        },
                        {
                            "name": "tooltip",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Content of the tooltip."
                        },
                        {
                            "name": "tooltipOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "TooltipOptions",
                            "default": "",
                            "description": "Configuration of the tooltip, refer to the tooltip documentation for more information."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "InputTextPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "keyfilter",
                            "optional": true,
                            "readonly": false,
                            "type": "KeyFilterType",
                            "default": "",
                            "description": "Format definition of the keys to block."
                        },
                        {
                            "name": "validateOnly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, instead of blocking keys, input is validated internally to test against the regular expression."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "The value of component"
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onComplete",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "InputMaskCompleteEvent",
                                    "description": "Custom complete event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on when user completes the mask pattern."
                        },
                        {
                            "name": "onChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "InputMaskChangeEvent",
                                    "description": "Custom change event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on value change."
                        },
                        {
                            "name": "onFocus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FocusEvent<HTMLInputElement, Element>",
                                    "description": "Browser event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when input receives focus."
                        },
                        {
                            "name": "onBlur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FocusEvent<HTMLInputElement, Element>",
                                    "description": "Browser event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when input loses focus."
                        },
                        {
                            "name": "onInput",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FormEvent<HTMLInputElement>",
                                    "description": "Browser event"
                                },
                                {
                                    "name": "validatePattern",
                                    "optional": false,
                                    "type": "boolean",
                                    "description": "Whether to validate the value"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke while typing value on input"
                        }
                    ]
                }
            }
        },
        "events": {
            "description": "Defines the custom events used by the component's callbacks.",
            "values": {
                "InputMaskCompleteEvent": {
                    "description": "Custom complete event",
                    "relatedProp": "onComplete",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Browser event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | null | string",
                            "description": "New value of the component"
                        }
                    ]
                },
                "InputMaskChangeEvent": {
                    "description": "Custom change event.",
                    "relatedProp": "onChange",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": true,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "Nullable<string>"
                        },
                        {
                            "name": "checked",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean"
                        },
                        {
                            "name": "target",
                            "optional": false,
                            "readonly": false,
                            "type": "FormTarget<string>"
                        }
                    ]
                }
            }
        }
    },
    "inputnumber": {
        "description": "InputNumber is an input component to provide numerical input.\n\n[Live Demo](https://www.primereact.org/inputnumber/)",
        "components": {
            "InputNumber": {
                "description": "InputNumber is an input component to provide numerical input.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "focus",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Used to focus the component."
                        },
                        {
                            "name": "getFormatter",
                            "parameters": [],
                            "returnType": "any",
                            "description": "Used to get formatter."
                        },
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLSpanElement",
                            "description": "Used to get container element."
                        },
                        {
                            "name": "getInput",
                            "parameters": [],
                            "returnType": "ForwardRefExoticComponent<InputTextProps & RefAttributes<HTMLInputElement>>",
                            "description": "Used to get input element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in InputNumber component. In addition to these, all properties of HTMLSpanElement can be used in this component.",
                    "values": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "null | number",
                            "default": "",
                            "description": "Value of the component."
                        },
                        {
                            "name": "inputRef",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<HTMLInputElement>",
                            "default": "",
                            "description": "Reference of the input element."
                        },
                        {
                            "name": "format",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to format the value."
                        },
                        {
                            "name": "showButtons",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Displays spinner buttons."
                        },
                        {
                            "name": "buttonLayout",
                            "optional": true,
                            "readonly": false,
                            "type": "\"horizontal\" | \"vertical\" | \"stacked\"",
                            "default": "stacked",
                            "description": "Layout of the buttons."
                        },
                        {
                            "name": "incrementButtonClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the increment button."
                        },
                        {
                            "name": "decrementButtonClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the decrement button."
                        },
                        {
                            "name": "incrementButtonIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the increment button."
                        },
                        {
                            "name": "decrementButtonIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the decrement button."
                        },
                        {
                            "name": "locale",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Locale to be used in formatting."
                        },
                        {
                            "name": "localeMatcher",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "best fit",
                            "description": "The locale matching algorithm to use. See [Locale Negotation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation) for details."
                        },
                        {
                            "name": "mode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"decimal\" | \"currency\"",
                            "default": "decimal",
                            "description": "Defines the behavior of the component."
                        },
                        {
                            "name": "suffix",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Text to display after the value."
                        },
                        {
                            "name": "prefix",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Text to display before the value."
                        },
                        {
                            "name": "currency",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "The currency to use in currency formatting. Possible values are the [ISO 4217 currency codes](https://www.six-group.com/en/products-services/financial-information/data-standards.html#scrollTo=maintenance-agency), such as \"USD\" for the US dollar, \"EUR\" for the euro, or \"CNY\" for the Chinese RMB.\nThere is no default value; if the style is \"currency\", the currency property must be provided."
                        },
                        {
                            "name": "currencyDisplay",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "symbol",
                            "description": "How to display the currency in currency formatting. Possible values are \"symbol\" to use a localized currency symbol such as €, ü\"code\" to use the ISO currency code, \"name\" to use a localized currency name such as \"dollar\"; the default is \"symbol\"."
                        },
                        {
                            "name": "useGrouping",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to use grouping separators, such as thousands separators or thousand/lakh/crore separators."
                        },
                        {
                            "name": "minFractionDigits",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "The minimum number of fraction digits to use. Possible values are from 0 to 20; the default for plain number and percent formatting is 0;\nthe default for currency formatting is the number of minor unit digits provided by the [ISO 4217 currency code list](https://www.six-group.com/en/products-services/financial-information/data-standards.html#scrollTo=maintenance-agency) (2 if the list doesn't provide that information)."
                        },
                        {
                            "name": "maxFractionDigits",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "The maximum number of fraction digits to use. Possible values are from 0 to 20; the default for plain number formatting is the larger of minimumFractionDigits and 3;\nthe default for currency formatting is the larger of minimumFractionDigits and the number of minor unit digits provided by the [ISO 4217 currency code list](https://www.six-group.com/en/products-services/financial-information/data-standards.html#scrollTo=maintenance-agency) (2 if the list doesn't provide that information)."
                        },
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Name of the input element."
                        },
                        {
                            "name": "type",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "text",
                            "description": "Type of the input element."
                        },
                        {
                            "name": "allowEmpty",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Determines whether the input field is empty."
                        },
                        {
                            "name": "step",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Step factor to increment/decrement the value."
                        },
                        {
                            "name": "min",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Mininum boundary value."
                        },
                        {
                            "name": "max",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Maximum boundary value."
                        },
                        {
                            "name": "maxLength",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Maximum value length."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "When present, it specifies that the element should be disabled."
                        },
                        {
                            "name": "required",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the element must be filled out before submitting the form."
                        },
                        {
                            "name": "tabIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "pattern",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "The pattern attribute specifies a regular expression that the element's value is checked against on form submission."
                        },
                        {
                            "name": "placeholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Hint text for the input field."
                        },
                        {
                            "name": "readOnly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "When present, it specifies that the element should be read-only."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Size of the input field."
                        },
                        {
                            "name": "inputId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the input element."
                        },
                        {
                            "name": "autoFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should automatically get focus on load."
                        },
                        {
                            "name": "inputStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the input field."
                        },
                        {
                            "name": "inputClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Inline style of the input field."
                        },
                        {
                            "name": "tooltip",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Content of the tooltip."
                        },
                        {
                            "name": "tooltipOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "TooltipOptions",
                            "default": "",
                            "description": "Configuration of the tooltip, refer to the tooltip documentation for more information."
                        },
                        {
                            "name": "ariaLabelledBy",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "InputNumberPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onValueChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "InputNumberValueChangeEvent",
                                    "description": "Custom value change event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke after validation check and value change."
                        },
                        {
                            "name": "onChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "InputNumberChangeEvent",
                                    "description": "Custom change event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on value change."
                        },
                        {
                            "name": "onFocus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FocusEvent<HTMLInputElement, Element>",
                                    "description": "Browser event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when input receives focus."
                        },
                        {
                            "name": "onBlur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FocusEvent<HTMLInputElement, Element>",
                                    "description": "Browser event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when input loses focus."
                        },
                        {
                            "name": "onKeyDown",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "KeyboardEvent<HTMLInputElement>",
                                    "description": "Browser event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the key pressed."
                        }
                    ]
                }
            }
        },
        "events": {
            "description": "Defines the custom events used by the component's callbacks.",
            "values": {
                "InputNumberValueChangeEvent": {
                    "description": "Custom value change event.",
                    "relatedProp": "onValueChange",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": true,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "Nullable<null | number>"
                        },
                        {
                            "name": "checked",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean"
                        },
                        {
                            "name": "target",
                            "optional": false,
                            "readonly": false,
                            "type": "FormTarget<null | number>"
                        }
                    ]
                },
                "InputNumberChangeEvent": {
                    "description": "Custom change event",
                    "relatedProp": "onChange",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Browser event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "null | number",
                            "description": "New value"
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "InputNumberPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "InputNumberProps"
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "InputNumberState"
                        }
                    ],
                    "callbacks": []
                },
                "InputNumberPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "InputNumberPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "input",
                            "optional": true,
                            "readonly": false,
                            "type": "InputTextPassThroughOptions",
                            "description": "Uses to pass attributes to the Input component."
                        },
                        {
                            "name": "buttonGroup",
                            "optional": true,
                            "readonly": false,
                            "type": "InputNumberPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the button group's DOM element."
                        },
                        {
                            "name": "incrementButton",
                            "optional": true,
                            "readonly": false,
                            "type": "InputNumberPassThroughType<HTMLAttributes<HTMLButtonElement>>",
                            "description": "Uses to pass attributes to the increment button's DOM element."
                        },
                        {
                            "name": "decrementButton",
                            "optional": true,
                            "readonly": false,
                            "type": "InputNumberPassThroughType<HTMLAttributes<HTMLButtonElement>>",
                            "description": "Uses to pass attributes to the decrement button's DOM element."
                        },
                        {
                            "name": "tooltip",
                            "optional": true,
                            "readonly": false,
                            "type": "TooltipPassThroughOptions",
                            "description": "Uses to pass attributes tooltip's DOM element."
                        }
                    ],
                    "callbacks": []
                },
                "InputNumberState": {
                    "description": "Defines current inline state in InputNumber component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current focused state as a boolean."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "InputNumberPassThroughType": {
                    "values": "PassThroughType<T, InputNumberPassThroughMethodOptions>"
                }
            }
        }
    },
    "inputswitch": {
        "description": "InputSwitch is used to select a boolean value.\n\n[Live Demo](https://www.primereact.org/inputswitch/)",
        "components": {
            "InputSwitch": {
                "description": "InputSwitch is used to select a boolean value.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "focus",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Used to focus the component."
                        },
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        },
                        {
                            "name": "getInput",
                            "parameters": [],
                            "returnType": "HTMLInputElement",
                            "description": "Used to get input element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in InputMask component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "values": [
                        {
                            "name": "id",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Unique identifier of the element."
                        },
                        {
                            "name": "autoFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should automatically get focus on load."
                        },
                        {
                            "name": "inputRef",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<HTMLInputElement>",
                            "default": "",
                            "description": "Reference of the input element."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the element."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the element."
                        },
                        {
                            "name": "inputId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the input element."
                        },
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Name of the input element."
                        },
                        {
                            "name": "tabIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "checked",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Specifies whether a inputswitch should be checked or not."
                        },
                        {
                            "name": "trueValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "true",
                            "description": "Value in checked state."
                        },
                        {
                            "name": "falseValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "false",
                            "description": "Value in unchecked state."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "tooltip",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Content of the tooltip."
                        },
                        {
                            "name": "tooltipOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "TooltipOptions",
                            "default": "",
                            "description": "Configuration of the tooltip, refer to the tooltip documentation for more information."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "InputSwitchPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "InputSwitchChangeEvent",
                                    "description": "Custom change event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on value change."
                        },
                        {
                            "name": "onFocus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FocusEvent<HTMLInputElement, Element>",
                                    "description": "Browser event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the element receives focus."
                        },
                        {
                            "name": "onBlur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FocusEvent<HTMLInputElement, Element>",
                                    "description": "Browser event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the element loses focus."
                        }
                    ]
                }
            }
        },
        "events": {
            "description": "Defines the custom events used by the component's callbacks.",
            "values": {
                "InputSwitchChangeEvent": {
                    "description": "Custom change event.",
                    "relatedProp": "onChange",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": true,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "Nullable<boolean>"
                        },
                        {
                            "name": "checked",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean"
                        },
                        {
                            "name": "target",
                            "optional": false,
                            "readonly": false,
                            "type": "FormTarget<boolean>"
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "InputSwitchPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "InputSwitchProps"
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "InputSwitchState"
                        }
                    ],
                    "callbacks": []
                },
                "InputSwitchPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "InputSwitchPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "slider",
                            "optional": true,
                            "readonly": false,
                            "type": "InputSwitchPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the slider's DOM element."
                        },
                        {
                            "name": "hiddenInputWrapper",
                            "optional": true,
                            "readonly": false,
                            "type": "InputSwitchPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the hidden input wrapper's DOM element."
                        },
                        {
                            "name": "hiddenInput",
                            "optional": true,
                            "readonly": false,
                            "type": "InputSwitchPassThroughType<HTMLAttributes<HTMLInputElement>>",
                            "description": "Uses to pass attributes to the hidden input's DOM element."
                        },
                        {
                            "name": "tooltip",
                            "optional": true,
                            "readonly": false,
                            "type": "TooltipPassThroughOptions",
                            "description": "Uses to pass attributes tooltip's DOM element."
                        }
                    ],
                    "callbacks": []
                },
                "InputSwitchState": {
                    "description": "Defines current inline state in InputSwitch component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current focus state as a boolean."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "InputSwitchPassThroughType": {
                    "values": "PassThroughType<T, InputSwitchPassThroughMethodOptions>"
                }
            }
        }
    },
    "inputtext": {
        "description": "InputText is an extension to standard input element with theming and keyfiltering.\n\n[Live Demo](https://www.primereact.org/inputtext/)",
        "components": {
            "InputText": {
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                },
                "props": {
                    "description": "Defines valid properties in InputText component. In addition to these, all properties of HTMLInputElement can be used in this component.",
                    "values": [
                        {
                            "name": "keyfilter",
                            "optional": true,
                            "readonly": false,
                            "type": "KeyFilterType",
                            "default": "",
                            "description": "Format definition of the keys to block."
                        },
                        {
                            "name": "tooltip",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Content of the tooltip."
                        },
                        {
                            "name": "tooltipOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "TooltipOptions",
                            "default": "",
                            "description": "Configuration of the tooltip, refer to the tooltip documentation for more information."
                        },
                        {
                            "name": "validateOnly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, instead of blocking keys, input is validated internally to test against the regular expression."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "The value of component"
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "InputTextPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onInput",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FormEvent<HTMLInputElement>",
                                    "description": "Browser event"
                                },
                                {
                                    "name": "validatePattern",
                                    "optional": false,
                                    "type": "boolean",
                                    "description": "Whether to validate the value"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke while typing value on input"
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "InputTextPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "InputTextProps"
                        }
                    ],
                    "callbacks": []
                },
                "InputTextPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "InputTextPassThroughType<HTMLAttributes<HTMLInputElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "tooltip",
                            "optional": true,
                            "readonly": false,
                            "type": "TooltipPassThroughOptions",
                            "description": "Uses to pass attributes to the Tooltip component."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "InputTextPassThroughType": {
                    "values": "PassThroughType<T, InputTextPassThroughMethodOptions>"
                }
            }
        }
    },
    "inputtextarea": {
        "description": "Inputtextarea add styling and autoResize functionality to standard textarea element.\n\n[Live Demo](https://www.primereact.org/inputtextarea/)",
        "components": {
            "InputTextarea": {
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                },
                "props": {
                    "description": "Defines valid properties in InputTextarea component. In addition to these, all properties of HTMLTextAreaElement can be used in this component.",
                    "values": [
                        {
                            "name": "autoResize",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, height of textarea changes as being typed."
                        },
                        {
                            "name": "keyfilter",
                            "optional": true,
                            "readonly": false,
                            "type": "KeyFilterType",
                            "default": "",
                            "description": "Format definition of the keys to block."
                        },
                        {
                            "name": "tooltip",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Content of the tooltip."
                        },
                        {
                            "name": "tooltipOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "TooltipOptions",
                            "default": "",
                            "description": "Configuration of the tooltip, refer to the tooltip documentation for more information."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "The value of component"
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "InputTextareaPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "InputTextareaPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "InputTextareaProps"
                        }
                    ],
                    "callbacks": []
                },
                "InputTextareaPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "InputTextareaPassThroughType<HTMLAttributes<HTMLTextAreaElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "tooltip",
                            "optional": true,
                            "readonly": false,
                            "type": "TooltipPassThroughOptions",
                            "description": "Uses to pass attributes tooltip's DOM element."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "InputTextareaPassThroughType": {
                    "values": "PassThroughType<T, InputTextareaPassThroughMethodOptions>"
                }
            }
        }
    },
    "keyfilter": {
        "description": "This module contains common options and types of components that use KeyFilter.",
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "KeyFilterType": {
                    "values": "\"pint\" | \"int\" | \"pnum\" | \"money\" | \"num\" | \"hex\" | \"email\" | \"alpha\" | \"alphanum\" | RegExp",
                    "description": "Defines the type of keyfilter property in components."
                }
            }
        }
    },
    "knob": {
        "description": "Knob is a form component to define number inputs with a dial.\n\n[Live Demo](https://www.primereact.org/knob/)",
        "components": {
            "Knob": {
                "description": "Knob is a form component to define number inputs with a dial.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in Knob component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "values": [
                        {
                            "name": "id",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Unique identifier of the element."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the element."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the element."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Value of the component."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "100",
                            "description": "Size of the component in pixels."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "readOnly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component value cannot be edited."
                        },
                        {
                            "name": "showValue",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the show the value inside the knob."
                        },
                        {
                            "name": "step",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Step factor to increment/decrement the value."
                        },
                        {
                            "name": "min",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Mininum boundary value."
                        },
                        {
                            "name": "max",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "100",
                            "description": "Maximum boundary value."
                        },
                        {
                            "name": "strokeWidth",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "14",
                            "description": "Width of the knob stroke."
                        },
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Name of the input element."
                        },
                        {
                            "name": "valueColor",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "var(--primary-color, Black)",
                            "description": "Background of the value."
                        },
                        {
                            "name": "rangeColor",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "var(--surface-border, LightGray)",
                            "description": "Background color of the range."
                        },
                        {
                            "name": "textColor",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "var(--text-color-secondary, Black)",
                            "description": "Color of the value text."
                        },
                        {
                            "name": "valueTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "{value}",
                            "description": "Template string of the value."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "KnobPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "KnobChangeEvent",
                                    "description": "Custom change event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on value change."
                        }
                    ]
                }
            }
        },
        "events": {
            "description": "Defines the custom events used by the component's callbacks.",
            "values": {
                "KnobChangeEvent": {
                    "description": "Custom change event.",
                    "relatedProp": "onChange",
                    "props": [
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "New value"
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "KnobPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "KnobProps"
                        }
                    ],
                    "callbacks": []
                },
                "KnobPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "KnobPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "svg",
                            "optional": true,
                            "readonly": false,
                            "type": "KnobPassThroughType<SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the svg's DOM element."
                        },
                        {
                            "name": "range",
                            "optional": true,
                            "readonly": false,
                            "type": "KnobPassThroughType<SVGProps<SVGPathElement>>",
                            "description": "Uses to pass attributes to the range's DOM element."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "KnobPassThroughType<SVGProps<SVGPathElement>>",
                            "description": "Uses to pass attributes to the value' DOM element."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "KnobPassThroughType<SVGProps<SVGTextElement>>",
                            "description": "Uses to pass attributes to the label's DOM element."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "KnobPassThroughType": {
                    "values": "PassThroughType<T, KnobPassThroughMethodOptions>"
                }
            }
        }
    },
    "listbox": {
        "description": "ListBox is used to select one or more values from a list of items.\n\n[Live Demo](https://www.primereact.org/listbox/)",
        "components": {
            "ListBox": {
                "description": "ListBox is used to select one or more values from a list of items.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "focus",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Used to focus the component."
                        },
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        },
                        {
                            "name": "getVirtualScroller",
                            "parameters": [],
                            "returnType": "VirtualScroller",
                            "description": "Used to get the virtual scroller instance."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in ListBox component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "values": [
                        {
                            "name": "ariaLabelledBy",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "dataKey",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "false",
                            "description": "A property to uniquely match the value in options for better performance."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified, disables the component."
                        },
                        {
                            "name": "emptyMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Text to display when there is no data."
                        },
                        {
                            "name": "emptyFilterMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Template to display when filtering does not return any results."
                        },
                        {
                            "name": "filter",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified, displays a filter input at header."
                        },
                        {
                            "name": "filterBy",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "label",
                            "description": "When filtering is enabled, filterBy decides which field or fields (comma separated) to search against."
                        },
                        {
                            "name": "filterInputProps",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "undefined",
                            "description": "Props for the filter input, any prop is passed implicity to the filter input element."
                        },
                        {
                            "name": "filterLocale",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "undefined",
                            "description": "Locale to use in filtering. The default locale is the host environment's current locale."
                        },
                        {
                            "name": "filterMatchMode",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "contains",
                            "description": "Defines how the items are filtered, valid values are \"contains\" (default), \"startsWith\", \"endsWith\", \"equals\" and \"notEquals\"."
                        },
                        {
                            "name": "filterPlaceholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Placeholder text to show when filter input is empty."
                        },
                        {
                            "name": "filterTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Custom template for the filter element."
                        },
                        {
                            "name": "filterValue",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "When specified, filter displays with this value."
                        },
                        {
                            "name": "itemTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Custom template for the items."
                        },
                        {
                            "name": "listClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Inline style class of inner list element."
                        },
                        {
                            "name": "listStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of inner list element."
                        },
                        {
                            "name": "metaKeySelection",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Defines how multiple items can be selected, when true metaKey needs to be pressed to select or unselect an item and when set to false selection of each item can be toggled individually. On touch enabled devices, metaKeySelection is turned off automatically."
                        },
                        {
                            "name": "multiple",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified, allows selecting multiple values."
                        },
                        {
                            "name": "optionDisabled",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the disabled flag of an option, defaults to false when not defined."
                        },
                        {
                            "name": "optionGroupChildren",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Property name or getter function that refers to the children options of option group."
                        },
                        {
                            "name": "optionGroupLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Property name or getter function to use as the label of an option group."
                        },
                        {
                            "name": "optionGroupTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Template of an option group item."
                        },
                        {
                            "name": "optionLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Name of the label field of an option when an arbitrary objects instead of SelectItems are used as options."
                        },
                        {
                            "name": "optionValue",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Name of the value field of an option when arbitrary objects are used as options instead of SelectItems."
                        },
                        {
                            "name": "options",
                            "optional": true,
                            "readonly": false,
                            "type": "SelectItemOptionsType",
                            "default": "",
                            "description": "An array of objects to display as the available options."
                        },
                        {
                            "name": "tooltip",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Content of the tooltip."
                        },
                        {
                            "name": "tooltipOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "TooltipOptions",
                            "default": "",
                            "description": "Configuration of the tooltip, refer to the tooltip documentation for more information."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Selected value to display."
                        },
                        {
                            "name": "virtualScrollerOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "VirtualScrollerProps",
                            "default": "",
                            "description": "Whether to use the virtualScroller feature. The properties of VirtualScroller component can be used like an object in it."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "ListboxPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "ListBoxChangeEvent",
                                    "description": "Custom change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when value of listbox changes."
                        },
                        {
                            "name": "onFilterValueChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "ListBoxFilterValueChangeEvent",
                                    "description": "Custom filter value change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when filter value changes."
                        }
                    ]
                }
            }
        },
        "events": {
            "description": "Defines the custom events used by the component's callbacks.",
            "values": {
                "ListBoxChangeEvent": {
                    "description": "Custom change event.",
                    "relatedProp": "onChange",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Browser event."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Single value or an array of values depending on the selection mode"
                        },
                        {
                            "name": "target",
                            "optional": false,
                            "readonly": false,
                            "type": "ListBoxChangeTargetOptions",
                            "description": "Target element."
                        }
                    ]
                },
                "ListBoxFilterValueChangeEvent": {
                    "description": "Custom filter value change event.",
                    "relatedProp": "onFilterValueChange",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Browser event."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "The filtered value"
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "ListBoxPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ListBoxProps"
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "ListBoxState"
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "ListBoxContext"
                        }
                    ],
                    "callbacks": []
                },
                "ListboxPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "ListboxProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ListBoxPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "ListBoxPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "filterContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "ListBoxPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the filter container's DOM element."
                        },
                        {
                            "name": "filterInput",
                            "optional": true,
                            "readonly": false,
                            "type": "ListBoxPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the filter input's DOM element."
                        },
                        {
                            "name": "filterIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ListBoxPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the filter icon's DOM element."
                        },
                        {
                            "name": "wrapper",
                            "optional": true,
                            "readonly": false,
                            "type": "ListBoxPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the wrapper's DOM element."
                        },
                        {
                            "name": "virtualScroller",
                            "optional": true,
                            "readonly": false,
                            "type": "VirtualScrollerPassThroughOptions",
                            "description": "Uses to pass attributes to the VirtualScroller component."
                        },
                        {
                            "name": "list",
                            "optional": true,
                            "readonly": false,
                            "type": "ListBoxPassThroughType<HTMLAttributes<HTMLUListElement>>",
                            "description": "Uses to pass attributes to the list's DOM element."
                        },
                        {
                            "name": "itemGroup",
                            "optional": true,
                            "readonly": false,
                            "type": "ListBoxPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the item group's DOM element."
                        },
                        {
                            "name": "item",
                            "optional": true,
                            "readonly": false,
                            "type": "ListBoxPassThroughType<HTMLAttributes<HTMLLIElement>>",
                            "description": "Uses to pass attributes to the item's DOM element."
                        },
                        {
                            "name": "emptyMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "ListBoxPassThroughType<HTMLAttributes<HTMLLIElement>>",
                            "description": "Uses to pass attributes to the emptyMessage's DOM element."
                        },
                        {
                            "name": "tooltip",
                            "optional": true,
                            "readonly": false,
                            "type": "TooltipPassThroughOptions",
                            "description": "Uses to pass attributes tooltip's DOM element."
                        }
                    ],
                    "callbacks": []
                },
                "ListBoxState": {
                    "description": "Defines current inline state in ListBox component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "filterValue",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Current filter value state as a string."
                        }
                    ],
                    "callbacks": []
                },
                "ListBoxContext": {
                    "description": "Defines current options in ListBox component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "selected",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current selection state of the item as a boolean."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current disabled state of the item as a boolean."
                        }
                    ],
                    "callbacks": []
                },
                "ListBoxChangeTargetOptions": {
                    "description": "Custom change target options.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "The name of the target."
                        },
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Unique identifier of the element."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "New value of the element."
                        }
                    ],
                    "callbacks": []
                },
                "ListBoxFilterTemplateOptions": {
                    "description": "Custom filter template options.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "className",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the filter."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether the option is disabled or not"
                        },
                        {
                            "name": "element",
                            "optional": false,
                            "readonly": false,
                            "type": "HTMLDivElement",
                            "description": "The filter element."
                        },
                        {
                            "name": "filter",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "The filter."
                        },
                        {
                            "name": "filterIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<ListBox>",
                            "description": "Icon of the filter."
                        },
                        {
                            "name": "filterIconClassName",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the filter icon."
                        },
                        {
                            "name": "filterInputChange",
                            "optional": true,
                            "readonly": false,
                            "type": "ChangeEvent<HTMLInputElement>",
                            "description": "Browser change event for the filter input element."
                        },
                        {
                            "name": "filterInputProps",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "description": "The props of the filter input element."
                        },
                        {
                            "name": "filterOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "ListBoxFilterOptions",
                            "description": "The filter input options."
                        },
                        {
                            "name": "filterPlaceholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "The placeholder of the filter element."
                        },
                        {
                            "name": "filterTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "description": "Custom filter template."
                        }
                    ],
                    "callbacks": []
                },
                "ListBoxFilterOptions": {
                    "description": "Custom filter options.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "filter",
                            "optional": true,
                            "readonly": false,
                            "type": "Function"
                        },
                        {
                            "name": "reset",
                            "optional": true,
                            "readonly": false,
                            "type": "Function"
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ListBoxPassThroughType": {
                    "values": "PassThroughType<T, ListBoxPassThroughMethodOptions>"
                }
            }
        }
    },
    "megamenu": {
        "description": "MegaMenu is navigation component that displays submenus together.\n\n[Live Demo](https://www.primereact.org/megamenu/)",
        "components": {
            "MegaMenu": {
                "description": "MegaMenu is navigation component that displays submenus together.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in MegaMenu component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "values": [
                        {
                            "name": "model",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuItem[]",
                            "default": "",
                            "description": "An array of menuitems."
                        },
                        {
                            "name": "orientation",
                            "optional": true,
                            "readonly": false,
                            "type": "\"horizontal\" | \"vertical\"",
                            "default": "horizontal",
                            "description": "Defines the orientation, valid values are horizontal and vertical."
                        },
                        {
                            "name": "start",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "The template of starting element."
                        },
                        {
                            "name": "breakpoint",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "The breakpoint to define the maximum width boundary when responsiveness is enabled."
                        },
                        {
                            "name": "scrollHeight",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "400px",
                            "description": "Maximum height of the options panel on responsive mode."
                        },
                        {
                            "name": "submenuIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<MegaMenuProps>",
                            "default": "",
                            "description": "Icon of the submenu."
                        },
                        {
                            "name": "menuIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<MegaMenuProps>",
                            "default": "",
                            "description": "Icon to display in the horizontal menu."
                        },
                        {
                            "name": "end",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "The template of trailing element"
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "MegaMenuPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "MegaMenuPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "MegaMenuProps"
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "MegaMenuState"
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "MegaMenuContext"
                        }
                    ],
                    "callbacks": []
                },
                "MegaMenuPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "MegaMenuPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "menu",
                            "optional": true,
                            "readonly": false,
                            "type": "MegaMenuPassThroughType<HTMLAttributes<HTMLUListElement>>",
                            "description": "Uses to pass attributes to the list's DOM element."
                        },
                        {
                            "name": "menuitem",
                            "optional": true,
                            "readonly": false,
                            "type": "MegaMenuPassThroughType<HTMLAttributes<HTMLLIElement>>",
                            "description": "Uses to pass attributes to the list item's DOM element."
                        },
                        {
                            "name": "headerAction",
                            "optional": true,
                            "readonly": false,
                            "type": "MegaMenuPassThroughType<HTMLAttributes<HTMLAnchorElement>>",
                            "description": "Uses to pass attributes to the header action's DOM element."
                        },
                        {
                            "name": "action",
                            "optional": true,
                            "readonly": false,
                            "type": "MegaMenuPassThroughType<HTMLAttributes<HTMLAnchorElement>>",
                            "description": "Uses to pass attributes to the action's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "MegaMenuPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the icon's DOM element."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "MegaMenuPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the label's DOM element."
                        },
                        {
                            "name": "submenuIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "MegaMenuPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the submenu icon's DOM element."
                        },
                        {
                            "name": "panel",
                            "optional": true,
                            "readonly": false,
                            "type": "MegaMenuPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the panel's DOM element."
                        },
                        {
                            "name": "grid",
                            "optional": true,
                            "readonly": false,
                            "type": "MegaMenuPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the grid's DOM element."
                        },
                        {
                            "name": "column",
                            "optional": true,
                            "readonly": false,
                            "type": "MegaMenuPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the column's DOM element."
                        },
                        {
                            "name": "submenu",
                            "optional": true,
                            "readonly": false,
                            "type": "MegaMenuPassThroughType<HTMLAttributes<HTMLUListElement>>",
                            "description": "Uses to pass attributes to the submenu's DOM element."
                        },
                        {
                            "name": "submenuItem",
                            "optional": true,
                            "readonly": false,
                            "type": "MegaMenuPassThroughType<HTMLAttributes<HTMLLIElement>>",
                            "description": "Uses to pass attributes to the submenu items's DOM element."
                        },
                        {
                            "name": "submenuHeader",
                            "optional": true,
                            "readonly": false,
                            "type": "MegaMenuPassThroughType<HTMLAttributes<HTMLLIElement>>",
                            "description": "Uses to pass attributes to the submenu header's DOM element."
                        },
                        {
                            "name": "separator",
                            "optional": true,
                            "readonly": false,
                            "type": "MegaMenuPassThroughType<HTMLAttributes<HTMLLIElement>>",
                            "description": "Uses to pass attributes to the separator's DOM element."
                        },
                        {
                            "name": "start",
                            "optional": true,
                            "readonly": false,
                            "type": "MegaMenuPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the start of the component."
                        },
                        {
                            "name": "end",
                            "optional": true,
                            "readonly": false,
                            "type": "MegaMenuPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the end of the component."
                        }
                    ],
                    "callbacks": []
                },
                "MegaMenuFocusedItemInfo": {
                    "description": "Defines focused item info",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Active item index"
                        },
                        {
                            "name": "level",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Active item level"
                        },
                        {
                            "name": "parentKey",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Parent key info"
                        }
                    ],
                    "callbacks": []
                },
                "MegaMenuState": {
                    "description": "Defines current inline state in MegaMenu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "mobileActive",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current mobileActive state as a boolean."
                        },
                        {
                            "name": "attributeSelector",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current attributeSelector visible state as a string."
                        },
                        {
                            "name": "activeItem",
                            "optional": false,
                            "readonly": false,
                            "type": "MenuItem",
                            "description": "Active item path."
                        }
                    ],
                    "callbacks": []
                },
                "MegaMenuContext": {
                    "description": "Defines current options in MegaMenu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current active state of menuitem as a boolean."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "MegaMenuPassThroughType": {
                    "values": "PassThroughType<T, MegaMenuPassThroughMethodOptions>"
                }
            }
        }
    },
    "mention": {
        "description": "Mention component is used to refer someone or something.\n\n[Live Demo](https://www.primereact.org/mention/)",
        "components": {
            "Mention": {
                "description": "Mention component is used to refer someone or something.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "focus",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Used to focus the component."
                        },
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        },
                        {
                            "name": "getInput",
                            "parameters": [],
                            "returnType": "ForwardRefExoticComponent<InputTextareaProps & RefAttributes<HTMLTextAreaElement>>",
                            "description": "Used to get input element."
                        },
                        {
                            "name": "getOverlay",
                            "parameters": [],
                            "returnType": "HTMLElement",
                            "description": "Used to get overlay element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in Mention component. In addition to these, all properties of HTMLTextAreaElement can be used in this component.",
                    "values": [
                        {
                            "name": "autoHighlight",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "When enabled, highlights the first item in the list by default."
                        },
                        {
                            "name": "autoResize",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "When present, height of textarea changes as being typed."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "delay",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Delay between keystrokes to wait before sending a query."
                        },
                        {
                            "name": "field",
                            "optional": true,
                            "readonly": false,
                            "type": "string | string[]",
                            "default": "",
                            "description": "Field of a suggested object to resolve and display."
                        },
                        {
                            "name": "footerTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Custom template of footer."
                        },
                        {
                            "name": "headerTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Custom template of header."
                        },
                        {
                            "name": "inputClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the input field."
                        },
                        {
                            "name": "inputId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the input element."
                        },
                        {
                            "name": "inputRef",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<HTMLInputElement>",
                            "default": "",
                            "description": "Reference of the input element."
                        },
                        {
                            "name": "inputStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the input field."
                        },
                        {
                            "name": "itemTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Custom template for the items."
                        },
                        {
                            "name": "panelClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the overlay panel element."
                        },
                        {
                            "name": "panelStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the overlay panel element."
                        },
                        {
                            "name": "scrollHeight",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "200px",
                            "description": "Maximum height of the suggestions panel."
                        },
                        {
                            "name": "suggestions",
                            "optional": true,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "An array of suggestions to display."
                        },
                        {
                            "name": "transitionOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSTransitionProps",
                            "default": "",
                            "description": "The properties of CSSTransition can be customized, except for \"nodeRef\" and \"in\" properties."
                        },
                        {
                            "name": "trigger",
                            "optional": true,
                            "readonly": false,
                            "type": "string | string[]",
                            "default": "\"@\"",
                            "description": "Set trigger keyword."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "MentionPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onBlur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FocusEvent<HTMLInputElement, Element>",
                                    "description": "Browser event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the element loses focus."
                        },
                        {
                            "name": "onChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FormEvent<HTMLInputElement>",
                                    "description": "Browser event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when value changes."
                        },
                        {
                            "name": "onFocus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FocusEvent<HTMLInputElement, Element>",
                                    "description": "Browser event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the element receives focus."
                        },
                        {
                            "name": "onHide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when overlay panel becomes hidden."
                        },
                        {
                            "name": "onInput",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FormEvent<HTMLInputElement>",
                                    "description": "Browser event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on input event of input field."
                        },
                        {
                            "name": "onSearch",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "MentionSearchEvent",
                                    "description": "Custom search event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when search."
                        },
                        {
                            "name": "onSelect",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "MentionSelectEvent",
                                    "description": "Custom select event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when selection changes."
                        },
                        {
                            "name": "onShow",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when overlay panel becomes visible."
                        }
                    ]
                }
            }
        },
        "events": {
            "description": "Defines the custom events used by the component's callbacks.",
            "values": {
                "MentionSearchEvent": {
                    "description": "Custom search event",
                    "relatedProp": "onSearch",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Browser event."
                        },
                        {
                            "name": "trigger",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Current trigger keyword."
                        },
                        {
                            "name": "query",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Current query string entered by the user."
                        }
                    ]
                },
                "MentionSelectEvent": {
                    "description": "Custom select event",
                    "relatedProp": "onSelect",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Browser event"
                        },
                        {
                            "name": "suggestion",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Selected item"
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "MentionPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "MentionProps"
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "MentionState"
                        }
                    ],
                    "callbacks": []
                },
                "MentionPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "MentionPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "input",
                            "optional": true,
                            "readonly": false,
                            "type": "MentionPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the InputTextarea component."
                        },
                        {
                            "name": "panel",
                            "optional": true,
                            "readonly": false,
                            "type": "MentionPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the panel's DOM element."
                        },
                        {
                            "name": "item",
                            "optional": true,
                            "readonly": false,
                            "type": "MentionPassThroughType<HTMLAttributes<HTMLLIElement>>",
                            "description": "Uses to pass attributes to the item's DOM element."
                        },
                        {
                            "name": "items",
                            "optional": true,
                            "readonly": false,
                            "type": "MentionPassThroughType<HTMLAttributes<HTMLUListElement>>",
                            "description": "Uses to pass attributes to the items' DOM element."
                        }
                    ],
                    "callbacks": []
                },
                "MentionState": {
                    "description": "Defines current inline state in Mention component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "overlayVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current overlay visible state as a boolean."
                        },
                        {
                            "name": "searching",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current search state as a boolean."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current focused state as a boolean."
                        },
                        {
                            "name": "trigger",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Current trigger state."
                        }
                    ],
                    "callbacks": []
                },
                "MentionContext": {
                    "description": "Defines current options in Mention component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "trigger",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Current trigger state."
                        }
                    ],
                    "callbacks": []
                },
                "MentionItemTemplateOptions": {
                    "description": "",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Index of the menu item."
                        },
                        {
                            "name": "trigger",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Triggered the mention item."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "MentionPassThroughType": {
                    "values": "PassThroughType<T, MentionPassThroughMethodOptions>"
                }
            }
        }
    },
    "menu": {
        "description": "Menu is a navigation/command component that supports dynamic and static positioning.\n\n[Live Demo](https://www.primereact.org/menu/)",
        "components": {
            "Menu": {
                "description": "Menu is a navigation/command component that supports dynamic and static positioning.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "toggle",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Toggles the visibility of the popup menu."
                        },
                        {
                            "name": "show",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Displays the popup menu."
                        },
                        {
                            "name": "hide",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Hides the popup menu."
                        },
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        },
                        {
                            "name": "getTarget",
                            "parameters": [],
                            "returnType": "null | EventTarget",
                            "description": "Used to get target element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in Menu component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "values": [
                        {
                            "name": "model",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuItem[]",
                            "default": "",
                            "description": "An array of menuitems."
                        },
                        {
                            "name": "popup",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if menu would displayed as a popup."
                        },
                        {
                            "name": "popupAlignment",
                            "optional": true,
                            "readonly": false,
                            "type": "\"left\" | \"right\"",
                            "default": "left",
                            "description": "In popup mode determines how the overlay is aligned with its target. Values either 'left' or 'right'."
                        },
                        {
                            "name": "autoZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to automatically manage layering."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "null | HTMLElement | \"self\"",
                            "default": "document.body",
                            "description": "DOM element instance where the overlay panel should be mounted. Valid values are any DOM Element and 'self'. The self value is used to render a component where it is located."
                        },
                        {
                            "name": "transitionOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSTransitionProps",
                            "default": "",
                            "description": "The properties of CSSTransition can be customized, except for \"nodeRef\" and \"in\" properties."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onShow",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a popup menu is shown."
                        },
                        {
                            "name": "onHide",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a popup menu is hidden."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "MenuPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "MenuProps"
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "MenuState"
                        }
                    ],
                    "callbacks": []
                },
                "MenuPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "menu",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuPassThroughType<HTMLAttributes<HTMLUListElement>>",
                            "description": "Uses to pass attributes to the list's DOM element."
                        },
                        {
                            "name": "submenuHeader",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuPassThroughType<HTMLAttributes<HTMLLIElement>>",
                            "description": "Uses to pass attributes to the submenu header's DOM element."
                        },
                        {
                            "name": "menuitem",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuPassThroughType<HTMLAttributes<HTMLLIElement>>",
                            "description": "Uses to pass attributes to the list item's DOM element."
                        },
                        {
                            "name": "action",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuPassThroughType<HTMLAttributes<HTMLAnchorElement>>",
                            "description": "Uses to pass attributes to the action's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the icon's DOM element."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the label's DOM element."
                        },
                        {
                            "name": "separator",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuPassThroughType<HTMLAttributes<HTMLLIElement>>",
                            "description": "Uses to pass attributes to the separator's DOM element."
                        }
                    ],
                    "callbacks": []
                },
                "MenuState": {
                    "description": "Defines current inline state in Menu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "visible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current visible state as a boolean."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "MenuPassThroughType": {
                    "values": "PassThroughType<T, MenuPassThroughMethodOptions>"
                }
            }
        }
    },
    "menubar": {
        "description": "Manubar is an input component that provides real-time suggestions when being typed.\n\n[Live Demo](https://www.primereact.org/menubar/)",
        "components": {
            "Menubar": {
                "description": "Manubar is an input component that provides real-time suggestions when being typed.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        },
                        {
                            "name": "getRootMenu",
                            "parameters": [],
                            "returnType": "HTMLElement",
                            "description": "Used to get root menu element."
                        },
                        {
                            "name": "getMenuButton",
                            "parameters": [],
                            "returnType": "HTMLElement",
                            "description": "Used to get menu button element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in Menubar component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "values": [
                        {
                            "name": "model",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuItem[]",
                            "default": "",
                            "description": "An array of menuitems."
                        },
                        {
                            "name": "start",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "The template of starting element."
                        },
                        {
                            "name": "submenuIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<MenubarProps>",
                            "default": "",
                            "description": "Icon of the submenu."
                        },
                        {
                            "name": "menuIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<MenubarProps>",
                            "default": "",
                            "description": "Icon of the menu."
                        },
                        {
                            "name": "end",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "The template of trailing element."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "MenubarPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "MenubarPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "MenubarProps"
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "MenubarState"
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "MenubarContext"
                        }
                    ],
                    "callbacks": []
                },
                "MenubarPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "MenubarPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "menu",
                            "optional": true,
                            "readonly": false,
                            "type": "MenubarPassThroughType<HTMLAttributes<HTMLUListElement>>",
                            "description": "Uses to pass attributes to the list's DOM element."
                        },
                        {
                            "name": "menuitem",
                            "optional": true,
                            "readonly": false,
                            "type": "MenubarPassThroughType<HTMLAttributes<HTMLLIElement>>",
                            "description": "Uses to pass attributes to the list item's DOM element."
                        },
                        {
                            "name": "action",
                            "optional": true,
                            "readonly": false,
                            "type": "MenubarPassThroughType<HTMLAttributes<HTMLAnchorElement>>",
                            "description": "Uses to pass attributes to the action's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "MenubarPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the icon's DOM element."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "MenubarPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the label's DOM element."
                        },
                        {
                            "name": "submenuIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "MenubarPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the submenu icon's DOM element."
                        },
                        {
                            "name": "separator",
                            "optional": true,
                            "readonly": false,
                            "type": "MenubarPassThroughType<HTMLAttributes<HTMLElement>>",
                            "description": "Uses to pass attributes to the separator's DOM element."
                        },
                        {
                            "name": "button",
                            "optional": true,
                            "readonly": false,
                            "type": "MenubarPassThroughType<HTMLAttributes<HTMLElement>>",
                            "description": "Uses to pass attributes to the mobile popup menu button's DOM element."
                        },
                        {
                            "name": "popupIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "MenubarPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the mobile popup menu button icon's DOM element."
                        },
                        {
                            "name": "start",
                            "optional": true,
                            "readonly": false,
                            "type": "MenubarPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the start of the component."
                        },
                        {
                            "name": "end",
                            "optional": true,
                            "readonly": false,
                            "type": "MenubarPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the end of the component."
                        }
                    ],
                    "callbacks": []
                },
                "MenubarState": {
                    "description": "Defines current inline state in Menubar component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "mobileActive",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current mobile menu active state as a boolean."
                        }
                    ],
                    "callbacks": []
                },
                "MenubarContext": {
                    "description": "Defines current options in Menubar component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current active state of menuitem as a boolean."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "MenubarPassThroughType": {
                    "values": "PassThroughType<T, MenubarPassThroughMethodOptions>"
                }
            }
        }
    },
    "menuitem": {
        "description": "PrimeReact menus components share a common api to specify the menuitems and submenus.\n\n[Live Demo](https://www.primereact.org/menumodel/)",
        "model": {
            "MenuItem": {
                "description": "Defines model of MenuItem API.",
                "props": {
                    "description": "",
                    "values": [
                        {
                            "name": "id",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Unique identifier of the menuitem."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Text of the menuitem."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Icon of the item. It can be a string, JSX.Element or method."
                        },
                        {
                            "name": "url",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "External link to navigate when item is clicked."
                        },
                        {
                            "name": "items",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuItem[] | MenuItem[][]",
                            "default": "",
                            "description": "An array of children the menuitems."
                        },
                        {
                            "name": "expanded",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Visibility of submenu."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When set as true, disables the menuitem."
                        },
                        {
                            "name": "visible",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "When set as false, hides the menuitem."
                        },
                        {
                            "name": "target",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Specifies where to open the linked document."
                        },
                        {
                            "name": "separator",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines the item as a separator."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the menuitem."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the menuitem."
                        },
                        {
                            "name": "template",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Template of the menuitem."
                        },
                        {
                            "name": "data",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "The data of the menuitem."
                        }
                    ]
                }
            }
        },
        "events": {
            "description": "Defines the custom events used by the component's callbacks.",
            "values": {
                "MenuItemCommandEvent": {
                    "description": "Custom command event.",
                    "relatedProp": "command",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Browser event"
                        },
                        {
                            "name": "item",
                            "optional": false,
                            "readonly": false,
                            "type": "MenuItem",
                            "description": "Selected item instance."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "MenuItemOptions": {
                    "description": "Menu item options",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "className",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "labelClassName",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the label element."
                        },
                        {
                            "name": "iconClassName",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Class name of the options icon."
                        },
                        {
                            "name": "element",
                            "optional": false,
                            "readonly": false,
                            "type": "ReactNode",
                            "description": "Default element created by the component."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "All component props"
                        }
                    ],
                    "callbacks": [
                        {
                            "name": "onClick",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on click."
                        }
                    ]
                }
            }
        }
    },
    "message": {
        "description": "Message is used to display inline message with various severities.\n\n[Live Demo](https://www.primereact.org/message)",
        "components": {
            "Message": {
                "description": "Message is used to display inline message with various severities.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in Message component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "values": [
                        {
                            "name": "text",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Text of the message."
                        },
                        {
                            "name": "severity",
                            "optional": true,
                            "readonly": false,
                            "type": "\"error\" | \"success\" | \"info\" | \"warn\"",
                            "default": "",
                            "description": "Severity level of the message."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Custom template of the message."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<MessageProps>",
                            "default": "based on severity",
                            "description": "Icon for the message. If not set it will default to severity icon."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "MessagePassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "MessagePassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "MessageProps"
                        }
                    ],
                    "callbacks": []
                },
                "MessagePassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "MessagePassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "MessagePassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the icon's DOM element."
                        },
                        {
                            "name": "text",
                            "optional": true,
                            "readonly": false,
                            "type": "MessagePassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the text's DOM element."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "MessagePassThroughType": {
                    "values": "PassThroughType<T, MessagePassThroughMethodOptions>"
                }
            }
        }
    },
    "messages": {
        "description": "Messages is used to display inline messages with various severities.\n\n[Live Demo](https://www.primereact.org/messages)",
        "components": {
            "Messages": {
                "description": "Messages is used to display inline messages with various severities.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "show",
                            "parameters": [
                                {
                                    "name": "message",
                                    "type": "MessagesMessage | MessagesMessage[]",
                                    "description": "Showed message."
                                }
                            ],
                            "returnType": "void",
                            "description": "Used to show the message."
                        },
                        {
                            "name": "clear",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Used to clear the shown messages."
                        },
                        {
                            "name": "replace",
                            "parameters": [
                                {
                                    "name": "message",
                                    "type": "MessagesMessage | MessagesMessage[]",
                                    "description": "New message."
                                }
                            ],
                            "returnType": "void",
                            "description": "Used to add new messages after removing all old messages."
                        },
                        {
                            "name": "remove",
                            "parameters": [
                                {
                                    "name": "message",
                                    "type": "MessagesMessage | MessagesMessage[]",
                                    "description": "Message to remove"
                                }
                            ],
                            "returnType": "void",
                            "description": "Used to remove messages."
                        },
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in Messages component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "values": [
                        {
                            "name": "transitionOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSTransitionProps",
                            "default": "",
                            "description": "The properties of CSSTransition can be customized, except for \"nodeRef\" and \"in\" properties."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onRemove",
                            "parameters": [
                                {
                                    "name": "message",
                                    "optional": false,
                                    "type": "MessagesMessage",
                                    "description": "Removed message."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a message is removed."
                        },
                        {
                            "name": "onClick",
                            "parameters": [
                                {
                                    "name": "message",
                                    "optional": false,
                                    "type": "MessagesMessage",
                                    "description": "Clicked message."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a message gets clicked."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "MessagesPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "MessagesProps"
                        }
                    ],
                    "callbacks": []
                },
                "MessagesPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "MessagesProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "MessagesPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "wrapper",
                            "optional": true,
                            "readonly": false,
                            "type": "MessagesPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the wrapper's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "MessagesPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the icon's DOM element."
                        },
                        {
                            "name": "summary",
                            "optional": true,
                            "readonly": false,
                            "type": "MessagesPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the summary's DOM element."
                        },
                        {
                            "name": "detail",
                            "optional": true,
                            "readonly": false,
                            "type": "MessagesPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the detail's DOM element."
                        },
                        {
                            "name": "button",
                            "optional": true,
                            "readonly": false,
                            "type": "MessagesPassThroughType<HTMLAttributes<HTMLButtonElement>>",
                            "description": "Uses to pass attributes to the button's DOM element."
                        },
                        {
                            "name": "buttonIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "MessagesPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the button icon's DOM element."
                        }
                    ],
                    "callbacks": []
                },
                "MessagesMessage": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "id",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Unique id of the message."
                        },
                        {
                            "name": "severity",
                            "optional": true,
                            "readonly": false,
                            "type": "\"error\" | \"success\" | \"info\" | \"warn\"",
                            "description": "Severity of the message."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "description": "Custom template of the message."
                        },
                        {
                            "name": "summary",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "description": "Summary content of the message."
                        },
                        {
                            "name": "detail",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "description": "Detail content of the message."
                        },
                        {
                            "name": "closable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether the message can be closed manually using the close icon."
                        },
                        {
                            "name": "closeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<MessagesProps>",
                            "description": "Icon of the close button."
                        },
                        {
                            "name": "sticky",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "When enabled, message is not removed automatically."
                        },
                        {
                            "name": "life",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "description": "Delay in milliseconds to close the message automatically."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<MessagesProps>",
                            "description": "Defines the icon to display."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "MessagesPassThroughOptions",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "MessagesPassThroughType": {
                    "values": "PassThroughType<T, MessagesPassThroughMethodOptions>"
                }
            }
        }
    },
    "multiselect": {
        "description": "MultiSelect is used to select multiple items from a collection.\n\n[Live Demo](https://www.primereact.org/multiselect/)",
        "components": {
            "MultiSelect": {
                "description": "MultiSelect is used to select multiple items from a collection.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Used to show the overlay."
                        },
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Used to hide the overlay."
                        },
                        {
                            "name": "focus",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Used to focus the component."
                        },
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        },
                        {
                            "name": "getInput",
                            "parameters": [],
                            "returnType": "HTMLInputElement",
                            "description": "Used to get input element."
                        },
                        {
                            "name": "getOverlay",
                            "parameters": [],
                            "returnType": "HTMLElement",
                            "description": "Used to get overlay element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in MultiSelect component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "values": [
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "null | HTMLElement | \"self\"",
                            "default": "document.body",
                            "description": "DOM element instance where the overlay panel should be mounted. Valid values are any DOM Element and 'self'. The self value is used to render a component where it is located."
                        },
                        {
                            "name": "ariaLabelledBy",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "checkboxIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<MultiSelectProps>",
                            "default": "",
                            "description": "Icon of the checkbox when checked."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the element."
                        },
                        {
                            "name": "closeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<MultiSelectProps>",
                            "default": "",
                            "description": "Close icon of the multiselect panel header."
                        },
                        {
                            "name": "dataKey",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "A property to uniquely match the value in options for better performance."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "display",
                            "optional": true,
                            "readonly": false,
                            "type": "\"comma\" | \"chip\"",
                            "default": "comma",
                            "description": "Used mode to display the selected item. Valid values are 'comma' and 'chip'."
                        },
                        {
                            "name": "dropdownIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<MultiSelectProps>",
                            "default": "",
                            "description": "Icon class of the dropdown icon."
                        },
                        {
                            "name": "emptyFilterMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "No records found",
                            "description": "Template to display when filtering does not return any results."
                        },
                        {
                            "name": "emptyMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Text to display when there are no options available. Defaults to global value in Locale configuration."
                        },
                        {
                            "name": "filter",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "When specified, displays an input field to filter the items on keyup."
                        },
                        {
                            "name": "filterBy",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "label",
                            "description": "When filtering is enabled, filterBy decides which field or fields (comma separated) to search against."
                        },
                        {
                            "name": "filterInputAutoFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "When the panel is opened, it specifies that the filter input should focus automatically."
                        },
                        {
                            "name": "filterIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<MultiSelect>",
                            "default": "",
                            "description": "Icon of the filter icon."
                        },
                        {
                            "name": "filterLocale",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "undefined",
                            "description": "Locale to use in filtering. The default locale is the host environment's current locale."
                        },
                        {
                            "name": "filterMatchMode",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "contains",
                            "description": "Defines how the items are filtered, valid values are \"contains\", (default) \"startsWith\", \"endsWith\", \"equals\" and \"notEquals\"."
                        },
                        {
                            "name": "filterPlaceholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Placeholder text to show when filter input is empty."
                        },
                        {
                            "name": "filterTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "The template of filter element."
                        },
                        {
                            "name": "fixedPlaceholder",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display selected items in the label section or always display the placeholder as the default label."
                        },
                        {
                            "name": "flex",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Use flex layout for the items panel."
                        },
                        {
                            "name": "id",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Unique identifier of the element."
                        },
                        {
                            "name": "inline",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Render the items panel inline."
                        },
                        {
                            "name": "inputId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the focusable input."
                        },
                        {
                            "name": "inputRef",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<HTMLSelectElement>",
                            "default": "",
                            "description": "Reference of the input element."
                        },
                        {
                            "name": "itemClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the items."
                        },
                        {
                            "name": "itemCheckboxIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<MultiSelect>",
                            "default": "",
                            "description": "The icon displayed in the header when all checkboxes are checked."
                        },
                        {
                            "name": "itemTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Function that gets the option and returns the content for it."
                        },
                        {
                            "name": "maxSelectedLabels",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Decides how many selected item labels to show at most."
                        },
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Name of the input element."
                        },
                        {
                            "name": "optionDisabled",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the disabled flag of an option, defaults to false when not defined."
                        },
                        {
                            "name": "optionGroupChildren",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Property name or getter function that refers to the children options of option group."
                        },
                        {
                            "name": "optionGroupLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Property name or getter function to use as the label of an option group."
                        },
                        {
                            "name": "optionGroupTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Template of an option group item."
                        },
                        {
                            "name": "optionLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Name of the label field of an option when an arbitrary objects instead of SelectItems are used as options."
                        },
                        {
                            "name": "optionValue",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Property name or getter function to use as the value of an option, defaults to the option itself when not defined."
                        },
                        {
                            "name": "options",
                            "optional": true,
                            "readonly": false,
                            "type": "SelectItemOptionsType",
                            "default": "",
                            "description": "An array of selectitems to display as the available options."
                        },
                        {
                            "name": "overlayVisible",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Specifies the visibility of the overlay panel."
                        },
                        {
                            "name": "panelClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the overlay panel element."
                        },
                        {
                            "name": "panelFooterTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Template of the panel footer."
                        },
                        {
                            "name": "panelHeaderTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Template of the panel header."
                        },
                        {
                            "name": "panelStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the overlay panel element."
                        },
                        {
                            "name": "placeholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Label to display when there are no selections."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "removeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<MultiSelectProps>",
                            "default": "",
                            "description": "Icon of the remove chip element."
                        },
                        {
                            "name": "resetFilterOnHide",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Clears the filter value when hiding the dropdown."
                        },
                        {
                            "name": "scrollHeight",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "200px",
                            "description": "Height of the viewport in pixels, a scrollbar is defined if height of list exceeds this value."
                        },
                        {
                            "name": "selectAll",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether all data is selected."
                        },
                        {
                            "name": "selectedItemTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Function that gets an item in the value and returns the content for it."
                        },
                        {
                            "name": "selectedItemsLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "items selected",
                            "description": "Label to display after exceeding max selected labels."
                        },
                        {
                            "name": "selectionLimit",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Number of maximum options that can be selected."
                        },
                        {
                            "name": "showClear",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, a clear icon is displayed to clear the value."
                        },
                        {
                            "name": "showSelectAll",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show the select all checkbox inside the panel's header."
                        },
                        {
                            "name": "selectAllLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Label to display if showSelectAll is true"
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the element."
                        },
                        {
                            "name": "tabIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "tooltip",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Content of the tooltip."
                        },
                        {
                            "name": "tooltipOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "TooltipOptions",
                            "default": "",
                            "description": "Configuration of the tooltip, refer to the tooltip documentation for more information."
                        },
                        {
                            "name": "transitionOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSTransitionProps",
                            "default": "",
                            "description": "The properties of CSSTransition can be customized, except for \"nodeRef\" and \"in\" properties."
                        },
                        {
                            "name": "useOptionAsValue",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the option should be used as the value for the select element."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Value of the component."
                        },
                        {
                            "name": "virtualScrollerOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "VirtualScrollerProps",
                            "default": "",
                            "description": "Whether to use the virtualScroller feature. The properties of VirtualScroller component can be used like an object in it."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onBlur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FocusEvent<HTMLInputElement, Element>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the element loses focus."
                        },
                        {
                            "name": "onChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "MultiSelectChangeEvent",
                                    "description": "Custom change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when value changes."
                        },
                        {
                            "name": "onFilter",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "MultiSelectFilterEvent",
                                    "description": "Custom filter event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on filtering."
                        },
                        {
                            "name": "onFocus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FocusEvent<HTMLInputElement, Element>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the element receives focus."
                        },
                        {
                            "name": "onHide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when overlay panel becomes hidden."
                        },
                        {
                            "name": "onSelectAll",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "MultiSelectAllEvent",
                                    "description": "Custom select event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when all data is selected."
                        },
                        {
                            "name": "onShow",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when overlay panel becomes visible."
                        }
                    ]
                }
            }
        },
        "events": {
            "description": "Defines the custom events used by the component's callbacks.",
            "values": {
                "MultiSelectHeaderCheckboxChangeEvent": {
                    "description": "Custom checkbox change event",
                    "relatedProp": "onChange",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "FormEvent<HTMLInputElement>"
                        },
                        {
                            "name": "checked",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean"
                        }
                    ]
                },
                "MultiSelectChangeEvent": {
                    "description": "Custom change event.",
                    "relatedProp": "onChange",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Browser event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Current selected values"
                        },
                        {
                            "name": "selectedOption",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "description": "Selected option"
                        },
                        {
                            "name": "target",
                            "optional": false,
                            "readonly": false,
                            "type": "MultiSelectChangeTargetOptions",
                            "description": "Additional information about the event."
                        }
                    ]
                },
                "MultiSelectFilterEvent": {
                    "description": "Custom filter event.",
                    "relatedProp": "onFilter",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Browser event."
                        },
                        {
                            "name": "filter",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Filter value."
                        }
                    ]
                },
                "MultiSelectAllEvent": {
                    "description": "Custom select event.",
                    "relatedProp": "onSelectAll",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Browser event."
                        },
                        {
                            "name": "checked",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether all data is selected."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "MultiSelectPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "MultiSelectProps"
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "MultiSelectState"
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "MultiSelectContext"
                        }
                    ],
                    "callbacks": []
                },
                "MultiSelectPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "input",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughType<HTMLAttributes<HTMLInputElement>>",
                            "description": "Uses to pass attributes to the input's DOM element."
                        },
                        {
                            "name": "labelContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the label container's DOM element."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the label's DOM element."
                        },
                        {
                            "name": "token",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the token's DOM element."
                        },
                        {
                            "name": "tokenLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the token label's DOM element."
                        },
                        {
                            "name": "removeTokenIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the remove token icon's DOM element."
                        },
                        {
                            "name": "trigger",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the trigger's DOM element."
                        },
                        {
                            "name": "triggerIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the trigger icon's DOM element."
                        },
                        {
                            "name": "clearIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the clear icon's DOM element."
                        },
                        {
                            "name": "dropdownIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the dropdown icon's DOM element."
                        },
                        {
                            "name": "panel",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the panel's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "headerCheckbox",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the header checkbox's DOM element."
                        },
                        {
                            "name": "headerSelectAllLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughType<HTMLAttributes<HTMLLabelElement>>",
                            "description": "Uses to pass attributes to the header checkbox's DOM element."
                        },
                        {
                            "name": "filterContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the filter container's DOM element."
                        },
                        {
                            "name": "filterInput",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughType<HTMLAttributes<HTMLInputElement>>",
                            "description": "Uses to pass attributes to the filter input's DOM element."
                        },
                        {
                            "name": "filterIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the filter icon's DOM element."
                        },
                        {
                            "name": "closeButton",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughType<HTMLAttributes<HTMLButtonElement>>",
                            "description": "Uses to pass attributes to the close button's DOM element."
                        },
                        {
                            "name": "closeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the close icon's DOM element."
                        },
                        {
                            "name": "wrapper",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the wrapper's DOM element."
                        },
                        {
                            "name": "virtualScroller",
                            "optional": true,
                            "readonly": false,
                            "type": "VirtualScrollerPassThroughOptions",
                            "description": "Uses to pass attributes to the VirtualScroller component."
                        },
                        {
                            "name": "list",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughType<HTMLAttributes<HTMLUListElement>>",
                            "description": "Uses to pass attributes to the list's DOM element."
                        },
                        {
                            "name": "itemGroup",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughType<HTMLAttributes<HTMLLIElement>>",
                            "description": "Uses to pass attributes to the item group's DOM element."
                        },
                        {
                            "name": "item",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughType<HTMLAttributes<HTMLLIElement>>",
                            "description": "Uses to pass attributes to the item's DOM element."
                        },
                        {
                            "name": "checkboxContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the checkbox container's DOM element."
                        },
                        {
                            "name": "checkbox",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the checkbox's DOM element."
                        },
                        {
                            "name": "checkboxIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the checkbox icon's DOM element."
                        },
                        {
                            "name": "emptyMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughType<HTMLAttributes<HTMLLIElement>>",
                            "description": "Uses to pass attributes to the emptyMessage's DOM element."
                        },
                        {
                            "name": "hiddenInputWrapper",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the hidden input wrapper's DOM element."
                        },
                        {
                            "name": "tooltip",
                            "optional": true,
                            "readonly": false,
                            "type": "TooltipPassThroughOptions",
                            "description": "Uses to pass attributes tooltip's DOM element."
                        }
                    ],
                    "callbacks": []
                },
                "MultiSelectState": {
                    "description": "Defines current inline state in MultiSelect component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current focused state as a boolean."
                        },
                        {
                            "name": "filterState",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Current filter state as a string."
                        },
                        {
                            "name": "overlayVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current overlay visible state as a boolean."
                        }
                    ],
                    "callbacks": []
                },
                "MultiSelectContext": {
                    "description": "Defines current options in MultiSelect component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "selected",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current selection state of the item as a boolean."
                        }
                    ],
                    "callbacks": []
                },
                "MultiSelectPanelHeaderTemplateEvent": {
                    "description": "Custom multiselect panel header template event.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "className",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "The class name for the header element."
                        },
                        {
                            "name": "checkboxElement",
                            "optional": false,
                            "readonly": false,
                            "type": "HTMLElement",
                            "description": "The checkbox element for selecting items."
                        },
                        {
                            "name": "checked",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether the checkbox is checked."
                        },
                        {
                            "name": "filterElement",
                            "optional": false,
                            "readonly": false,
                            "type": "Element",
                            "description": "The element for filtering the items."
                        },
                        {
                            "name": "closeElement",
                            "optional": false,
                            "readonly": false,
                            "type": "Element",
                            "description": "The close element."
                        },
                        {
                            "name": "closeElementClassName",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "The classname for the close element."
                        },
                        {
                            "name": "closeIconClassName",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "The classname for the close icon element."
                        },
                        {
                            "name": "element",
                            "optional": false,
                            "readonly": false,
                            "type": "Element",
                            "description": "The default element created by the component."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "MultiSelectProps",
                            "description": "The props of Multiselect component"
                        }
                    ],
                    "callbacks": [
                        {
                            "name": "onChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "MultiSelectHeaderCheckboxChangeEvent",
                                    "description": "Custom checkbox change event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback function when the checkbox state is changed."
                        },
                        {
                            "name": "onCloseClick",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "MouseEvent<HTMLElement, MouseEvent>",
                                    "description": "Current param"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback function when the close button is clicked."
                        }
                    ]
                },
                "MultiSelectChangeTargetOptions": {
                    "description": "Custom multiselect change target options",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "The name of the element."
                        },
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Unique identifier of the element."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "The value of the element."
                        }
                    ],
                    "callbacks": []
                },
                "MultiSelectFilterOptions": {
                    "description": "Multiselect filter options",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "filter",
                            "optional": true,
                            "readonly": false,
                            "type": "Function"
                        },
                        {
                            "name": "reset",
                            "optional": true,
                            "readonly": false,
                            "type": "Function"
                        }
                    ],
                    "callbacks": []
                },
                "MultiSelectTemplateOptions": {
                    "description": "Custom filter template options.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "className",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the filter."
                        },
                        {
                            "name": "element",
                            "optional": false,
                            "readonly": false,
                            "type": "HTMLDivElement",
                            "description": "The filter element."
                        },
                        {
                            "name": "filterIconClassName",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the filter icon."
                        },
                        {
                            "name": "filterOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectFilterOptions",
                            "description": "The filter input options."
                        },
                        {
                            "name": "props",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "description": "The props of multiselect header."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "MultiSelectPassThroughType": {
                    "values": "PassThroughType<T, MultiSelectPassThroughMethodOptions>"
                }
            }
        }
    },
    "multistatecheckbox": {
        "description": "MultiStateCheckbox is used to select a state from given multiple states.\n\n[Live Demo](https://www.primereact.org/multistatecheckbox/)",
        "components": {
            "MultiStateCheckbox": {
                "description": "MultiStateCheckbox is used to select a state from given multiple states.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "focus",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Used to focus the component."
                        },
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in MultiStateCheckbox component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "values": [
                        {
                            "name": "autoFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should automatically get focus on load."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Value of the MultiStateCheckbox."
                        },
                        {
                            "name": "options",
                            "optional": true,
                            "readonly": false,
                            "type": "any[] | MultiStateCheckboxOption[]",
                            "default": "",
                            "description": "An array to display as the available options."
                        },
                        {
                            "name": "optionValue",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Property name to use as the value of an option, defaults to the option itself when not defined."
                        },
                        {
                            "name": "optionLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Property name to refer to the option label, used by screen readers only. Defaults to optionValue."
                        },
                        {
                            "name": "optionIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Property name to use as the icon of an option, defaults to the icon property."
                        },
                        {
                            "name": "iconTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Template of icon for the selected option."
                        },
                        {
                            "name": "dataKey",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "A property to uniquely identify an option."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the element value cannot be altered."
                        },
                        {
                            "name": "readOnly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the value cannot be changed."
                        },
                        {
                            "name": "empty",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "If false, the empty state is skipped in the chekbox."
                        },
                        {
                            "name": "tooltip",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Content of the tooltip."
                        },
                        {
                            "name": "tooltipOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "TooltipOptions",
                            "default": "",
                            "description": "Configuration of the tooltip, refer to the tooltip documentation for more information."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiStateCheckboxPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "MultiStateCheckboxChangeEvent",
                                    "description": "Custom change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on value change"
                        }
                    ]
                }
            }
        },
        "events": {
            "description": "Defines the custom events used by the component's callbacks.",
            "values": {
                "MultiStateCheckboxChangeEvent": {
                    "description": "Custom change event.",
                    "relatedProp": "onChange",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Browser event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Current value"
                        },
                        {
                            "name": "target",
                            "optional": false,
                            "readonly": false,
                            "type": "MultiStateCheckboxChangeTargetOptions",
                            "description": "Target options."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "MultiStateCheckboxPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "MultiStateCheckboxProps"
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "MultiStateCheckboxState"
                        }
                    ],
                    "callbacks": []
                },
                "MultiStateCheckboxPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiStateCheckboxPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "checkbox",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiStateCheckboxPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the checkbox box's DOM element."
                        },
                        {
                            "name": "tooltip",
                            "optional": true,
                            "readonly": false,
                            "type": "TooltipPassThroughOptions",
                            "description": "Uses to pass attributes tooltip's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiStateCheckboxPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the icon's DOM element."
                        },
                        {
                            "name": "srOnlyAria",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiStateCheckboxPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the sr only aria's DOM element."
                        }
                    ],
                    "callbacks": []
                },
                "MultiStateCheckboxState": {
                    "description": "Defines current inline state in MultiStateCheckbox component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Focused state as a boolean."
                        }
                    ],
                    "callbacks": []
                },
                "MultiStateCheckboxOption": {
                    "description": "Custom MultiStateCheckbox option.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "icon",
                            "optional": false,
                            "readonly": false,
                            "type": "IconType<MultiStateCheckboxProps>",
                            "description": "The icon of the option."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "CSSProperties",
                            "description": "Inline style of the element."
                        },
                        {
                            "name": "className",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the element."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "callbacks": []
                },
                "MultiStateCheckboxIconTemplateEvent": {
                    "description": "Custom icon template options.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "option",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | null | MultiStateCheckboxOption",
                            "description": "Option of the element."
                        },
                        {
                            "name": "className",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the element."
                        },
                        {
                            "name": "element",
                            "optional": false,
                            "readonly": false,
                            "type": "Element",
                            "description": "The default element created by the component."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "MultiStateCheckboxProps",
                            "description": "The props passed to the component."
                        }
                    ],
                    "callbacks": []
                },
                "MultiStateCheckboxChangeTargetOptions": {
                    "description": "Custom change target options.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "The name of the element."
                        },
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Unique identifier of the element."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | null | boolean",
                            "description": "Value of the MultiStateCheckbox."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "MultiStateCheckboxPassThroughType": {
                    "values": "PassThroughType<T, MultiStateCheckboxPassThroughMethodOptions>"
                }
            }
        }
    },
    "orderlist": {
        "description": "OrderList is used to sort a collection.\n\n[Live Demo](https://www.primereact.org/orderlist/)",
        "components": {
            "OrderList": {
                "description": "OrderList is used to sort a collection.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in OrderList component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "values": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "An array of objects to reorder."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Text for the caption."
                        },
                        {
                            "name": "listStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the list element."
                        },
                        {
                            "name": "dragdrop",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to enable dragdrop based reordering."
                        },
                        {
                            "name": "dataKey",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Name of the field that uniquely identifies the a record in the data."
                        },
                        {
                            "name": "breakpoint",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "'960px'.",
                            "description": "The breakpoint to define the maximum width boundary when responsiveness is enabled."
                        },
                        {
                            "name": "moveUpIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<OrderListProps>",
                            "default": "",
                            "description": "Icon of the move up icon."
                        },
                        {
                            "name": "moveTopIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<OrderListProps>",
                            "default": "",
                            "description": "Icon of the move top icon."
                        },
                        {
                            "name": "moveDownIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<OrderListProps>",
                            "default": "",
                            "description": "Icon of the move down icon."
                        },
                        {
                            "name": "moveBottomIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<OrderListProps>",
                            "default": "",
                            "description": "Icon of the move bottom icon."
                        },
                        {
                            "name": "filterIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<OrderListProps>",
                            "default": "",
                            "description": "Icon of the filter."
                        },
                        {
                            "name": "filter",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "label",
                            "description": "When filtering is enabled, filterBy decides which field or fields (comma separated) to search against."
                        },
                        {
                            "name": "filterBy",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "label",
                            "description": "When filtering is enabled, filterBy decides which field or fields (comma separated) to search against."
                        },
                        {
                            "name": "filterMatchMode",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "contains",
                            "description": "Defines how the items are filtered, valid values are \"contains\" (default), \"startsWith\", \"endsWith\", \"equals\" and \"notEquals\"."
                        },
                        {
                            "name": "filterPlaceholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Placeholder text to show when filter input is empty."
                        },
                        {
                            "name": "filterLocale",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "undefined",
                            "description": "Locale to use in filtering. The default locale is the host environment's current locale."
                        },
                        {
                            "name": "filterTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Custom template of filter element."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "OrderListPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "OrderListChangeEvent",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke to when a mouse button is pressed."
                        },
                        {
                            "name": "itemTemplate",
                            "parameters": [
                                {
                                    "name": "item",
                                    "optional": false,
                                    "type": "any",
                                    "description": "Current item"
                                }
                            ],
                            "returnType": "ReactNode",
                            "description": "The template of each item"
                        }
                    ]
                }
            }
        },
        "events": {
            "description": "Defines the custom events used by the component's callbacks.",
            "values": {
                "OrderListChangeEvent": {
                    "description": "Custom change event.",
                    "relatedProp": "onChange",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Browser event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Reordered list"
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "OrderListPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "OrderListProps"
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "OrderListState"
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "OrderListContext"
                        }
                    ],
                    "callbacks": []
                },
                "OrderListPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "OrderListPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "controls",
                            "optional": true,
                            "readonly": false,
                            "type": "OrderListPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the controls' DOM element."
                        },
                        {
                            "name": "moveUpButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions",
                            "description": "Uses to pass attributes to the Button component."
                        },
                        {
                            "name": "moveTopButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions",
                            "description": "Uses to pass attributes to the Button component."
                        },
                        {
                            "name": "moveDownButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions",
                            "description": "Uses to pass attributes to the Button component."
                        },
                        {
                            "name": "moveBottomButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions",
                            "description": "Uses to pass attributes to the Button component."
                        },
                        {
                            "name": "container",
                            "optional": true,
                            "readonly": false,
                            "type": "OrderListPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the container's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "OrderListPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "list",
                            "optional": true,
                            "readonly": false,
                            "type": "OrderListPassThroughType<HTMLAttributes<HTMLUListElement>>",
                            "description": "Uses to pass attributes to the list's DOM element."
                        },
                        {
                            "name": "item",
                            "optional": true,
                            "readonly": false,
                            "type": "OrderListPassThroughType<HTMLAttributes<HTMLLIElement>>",
                            "description": "Uses to pass attributes to the item's DOM element."
                        },
                        {
                            "name": "droppoint",
                            "optional": true,
                            "readonly": false,
                            "type": "OrderListPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the item's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "OrderListPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the item's DOM element."
                        },
                        {
                            "name": "filterInput",
                            "optional": true,
                            "readonly": false,
                            "type": "OrderListPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the item's DOM element."
                        },
                        {
                            "name": "filterIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "OrderListPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the item's DOM element."
                        },
                        {
                            "name": "filter",
                            "optional": true,
                            "readonly": false,
                            "type": "OrderListPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the item's DOM element."
                        },
                        {
                            "name": "filterContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "OrderListPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the item's DOM element."
                        }
                    ],
                    "callbacks": []
                },
                "OrderListState": {
                    "description": "Defines current inline state in OrderList component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "selection",
                            "optional": false,
                            "readonly": false,
                            "type": "[]",
                            "description": "Current selection state as a boolean."
                        },
                        {
                            "name": "filterValue",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Current filter value as a string.s"
                        },
                        {
                            "name": "attributeSelector",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Current attribute selector state as a string."
                        }
                    ],
                    "callbacks": []
                },
                "OrderListContext": {
                    "description": "Defines current options in OrderList component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "selected",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current selection state of the item as a boolean."
                        }
                    ],
                    "callbacks": []
                },
                "OrderListFilterOptions": {
                    "description": "Custom filter options.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "filter",
                            "optional": true,
                            "readonly": false,
                            "type": "Function"
                        },
                        {
                            "name": "reset",
                            "optional": true,
                            "readonly": false,
                            "type": "Function"
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "OrderListPassThroughType": {
                    "values": "PassThroughType<T, OrderListPassThroughMethodOptions>"
                }
            }
        }
    },
    "organizationchart": {
        "description": "OrganizationChart visualizes hierarchical organization data.\n\n[Live Demo](https://www.primereact.org/organizationchart/)",
        "components": {
            "OrganizationChart": {
                "description": "OrganizationChart visualizes hierarchical organization data.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in OrganizationChart component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "values": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "OrganizationChartNodeData[]",
                            "default": "",
                            "description": "An array of nested TreeNodes."
                        },
                        {
                            "name": "togglerIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<OrganizationChartProps>",
                            "default": "",
                            "description": "Toggle icon of an expanded and collapsed node."
                        },
                        {
                            "name": "selectionMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"multiple\" | \"single\"",
                            "default": "",
                            "description": "Defines the selection mode, valid values \"single\" and \"multiple\"."
                        },
                        {
                            "name": "selection",
                            "optional": true,
                            "readonly": false,
                            "type": "null | OrganizationChartNodeData | OrganizationChartNodeData[]",
                            "default": "",
                            "description": "A single treenode instance or an array to refer to the selections."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "OrganizationChartPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "nodeTemplate",
                            "parameters": [
                                {
                                    "name": "node",
                                    "optional": false,
                                    "type": "OrganizationChartNodeData",
                                    "description": "A node instance."
                                }
                            ],
                            "returnType": "ReactNode",
                            "description": "Template function that gets a node as a parameter and returns a content."
                        },
                        {
                            "name": "onSelectionChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "OrganizationChartSelectionChangeEvent",
                                    "description": "Custom selection changed event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when node selection changes."
                        },
                        {
                            "name": "onNodeSelect",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "OrganizationChartNodeSelectEvent",
                                    "description": "Custom node select event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is selected."
                        },
                        {
                            "name": "onNodeUnselect",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "OrganizationChartNodeUnselectEvent",
                                    "description": "Custom node unselect event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is unselected."
                        }
                    ]
                }
            }
        },
        "events": {
            "description": "Defines the custom events used by the component's callbacks.",
            "values": {
                "OrganizationChartNodeSelectEvent": {
                    "description": "Custom node select event.",
                    "relatedProp": "onNodeSelect",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Browser event."
                        },
                        {
                            "name": "node",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | null | OrganizationChartNodeData",
                            "description": "Selected node instance."
                        }
                    ]
                },
                "OrganizationChartNodeUnselectEvent": {
                    "description": "Custom node unselect event.",
                    "relatedProp": "onNodeUnselect",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Browser event."
                        },
                        {
                            "name": "node",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | null | OrganizationChartNodeData",
                            "description": "Unselected node instance."
                        }
                    ]
                },
                "OrganizationChartSelectionChangeEvent": {
                    "description": "Custom selection change event.",
                    "relatedProp": "onSelectionChange",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Browser event."
                        },
                        {
                            "name": "data",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | null | OrganizationChartNodeData | OrganizationChartNodeData[]",
                            "description": "Selected node(s)."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "OrganizationChartPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "OrganizationChartProps"
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "OrganizationChartState"
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "OrganizationChartContext"
                        }
                    ],
                    "callbacks": []
                },
                "OrganizationChartPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "OrganizationChartPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "table",
                            "optional": true,
                            "readonly": false,
                            "type": "OrganizationChartPassThroughType<HTMLAttributes<HTMLTableCellElement>>",
                            "description": "Uses to pass attributes to the table's DOM element."
                        },
                        {
                            "name": "cell",
                            "optional": true,
                            "readonly": false,
                            "type": "OrganizationChartPassThroughType<HTMLAttributes<HTMLTableCellElement>>",
                            "description": "Uses to pass attributes to the cell's DOM element."
                        },
                        {
                            "name": "node",
                            "optional": true,
                            "readonly": false,
                            "type": "OrganizationChartPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the node's DOM element."
                        },
                        {
                            "name": "nodeToggler",
                            "optional": true,
                            "readonly": false,
                            "type": "OrganizationChartPassThroughType<HTMLAttributes<HTMLAnchorElement>>",
                            "description": "Uses to pass attributes to the nodeToggler's DOM element."
                        },
                        {
                            "name": "nodeTogglerIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "OrganizationChartPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the nodeTogglerIcon's DOM element."
                        },
                        {
                            "name": "lines",
                            "optional": true,
                            "readonly": false,
                            "type": "OrganizationChartPassThroughType<HTMLAttributes<HTMLTableRowElement>>",
                            "description": "Uses to pass attributes to the lines's DOM element."
                        },
                        {
                            "name": "lineCell",
                            "optional": true,
                            "readonly": false,
                            "type": "OrganizationChartPassThroughType<HTMLAttributes<HTMLTableCellElement>>",
                            "description": "Uses to pass attributes to the lineCell's DOM element."
                        },
                        {
                            "name": "lineDown",
                            "optional": true,
                            "readonly": false,
                            "type": "OrganizationChartPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the lineDown's DOM element."
                        },
                        {
                            "name": "nodes",
                            "optional": true,
                            "readonly": false,
                            "type": "OrganizationChartPassThroughType<HTMLAttributes<HTMLTableRowElement>>",
                            "description": "Uses to pass attributes to the nodes's DOM element."
                        },
                        {
                            "name": "nodeCell",
                            "optional": true,
                            "readonly": false,
                            "type": "OrganizationChartPassThroughType<HTMLAttributes<HTMLTableCellElement>>",
                            "description": "Uses to pass attributes to the nodeCell's DOM element."
                        }
                    ],
                    "callbacks": []
                },
                "OrganizationChartState": {
                    "description": "Defines current inline state in OrganizationChart component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "expanded",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current focus expanded of the node as a boolean."
                        }
                    ],
                    "callbacks": []
                },
                "OrganizationChartContext": {
                    "description": "Defines current options in OrganizationChart component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "selected",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current selection state of the node as a boolean."
                        }
                    ],
                    "callbacks": []
                },
                "OrganizationChartNodeData": {
                    "description": "Custom organizationchart node data.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the node."
                        },
                        {
                            "name": "expanded",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Visibility of node."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "OrganizationChartNodeData[]",
                            "description": "The child elements of the component."
                        },
                        {
                            "name": "selectable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether the node is selectable when selection mode is enabled."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Label of node."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "OrganizationChartPassThroughType": {
                    "values": "PassThroughType<T, OrganizationChartPassThroughMethodOptions>"
                }
            }
        }
    },
    "overlaypanel": {
        "description": "OverlayPanel, also known as Popover, is a container component that can overlay other components on page.\n\n[Live Demo](https://www.primereact.org/overlaypanel)",
        "components": {
            "OverlayPanel": {
                "description": "OverlayPanel, also known as Popover, is a container component that can overlay other components on page.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "toggle",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "undefined | null | SyntheticEvent<Element, Event>",
                                    "description": "Browser event."
                                },
                                {
                                    "name": "target",
                                    "type": "null | EventTarget | HTMLElement",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Toggles the visiblity of the overlay."
                        },
                        {
                            "name": "show",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "undefined | null | SyntheticEvent<Element, Event>",
                                    "description": "Browser event."
                                },
                                {
                                    "name": "target",
                                    "type": "undefined | null | EventTarget | HTMLElement",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Shows the overlay."
                        },
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Hides the overlay."
                        },
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in OverlayPanel component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "values": [
                        {
                            "name": "dismissable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Enables to hide the overlay when outside is clicked."
                        },
                        {
                            "name": "showCloseIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, displays a close icon at top right corner."
                        },
                        {
                            "name": "closeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<OverlayPanelProps>",
                            "default": "",
                            "description": "Icon to display as close icon."
                        },
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "null | HTMLElement | \"self\"",
                            "default": "document.body",
                            "description": "DOM element instance where the overlay panel should be mounted. Valid values are any DOM Element and 'self'. The self value is used to render a component where it is located."
                        },
                        {
                            "name": "ariaCloseLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "close",
                            "description": "Aria label of the close icon."
                        },
                        {
                            "name": "breakpoints",
                            "optional": true,
                            "readonly": false,
                            "type": "OverlayPanelBreakpoints",
                            "default": "",
                            "description": "Object literal to define widths per screen size."
                        },
                        {
                            "name": "transitionOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSTransitionProps",
                            "default": "",
                            "description": "The properties of CSSTransition can be customized, except for \"nodeRef\" and \"in\" properties."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "OverlayPanelPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onShow",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when overlay becomes visible."
                        },
                        {
                            "name": "onHide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when overlay becomes hidden."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "OverlayPanelPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "OverlayPanelProps"
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "OverlayPanelState"
                        }
                    ],
                    "callbacks": []
                },
                "OverlayPanelPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "OverlayPanelPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "OverlayPanelPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "closeButton",
                            "optional": true,
                            "readonly": false,
                            "type": "OverlayPanelPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the close button's DOM element."
                        },
                        {
                            "name": "closeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "OverlayPanelPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the close icon's DOM element."
                        }
                    ],
                    "callbacks": []
                },
                "OverlayPanelState": {
                    "description": "Defines current inline state in OverlayPanel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "visible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current visible state as a boolean."
                        }
                    ],
                    "callbacks": []
                },
                "OverlayPanelBreakpoints": {
                    "description": "Custom overlay panel breakpoints",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "string"
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "OverlayPanelPassThroughType": {
                    "values": "PassThroughType<T, OverlayPanelPassThroughMethodOptions>"
                }
            }
        }
    },
    "overlayservice": {
        "description": "OverlayService allows all overlay components to communicate with each other.\n\n[Live Demo](https://www.primereact.org/dropdown/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "OverlayServiceEvent": {
                    "description": "Overlay service event.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Original event that triggered the overlay."
                        },
                        {
                            "name": "target",
                            "optional": false,
                            "readonly": false,
                            "type": "HTMLElement",
                            "description": "Target element that the overlay is bound to."
                        }
                    ],
                    "callbacks": []
                },
                "OverlayServiceOptions": {
                    "description": "",
                    "relatedProp": "",
                    "props": [],
                    "callbacks": [
                        {
                            "name": "on",
                            "parameters": [
                                {
                                    "name": "action",
                                    "optional": false,
                                    "type": "\"overlay-click\"",
                                    "description": "Custom listener."
                                },
                                {
                                    "name": "fn",
                                    "optional": false,
                                    "type": "any",
                                    "description": "Custom listener."
                                }
                            ],
                            "returnType": "void",
                            "description": "Add event listener for overlay click."
                        },
                        {
                            "name": "emit",
                            "parameters": [
                                {
                                    "name": "action",
                                    "optional": false,
                                    "type": "\"overlay-click\"",
                                    "description": "Custom listener."
                                },
                                {
                                    "name": "params",
                                    "optional": true,
                                    "type": "OverlayServiceEvent",
                                    "description": "Custom listener."
                                }
                            ],
                            "returnType": "void",
                            "description": "Trigger overlay click event."
                        },
                        {
                            "name": "off",
                            "parameters": [
                                {
                                    "name": "action",
                                    "optional": false,
                                    "type": "\"overlay-click\"",
                                    "description": "Custom listener."
                                },
                                {
                                    "name": "fn",
                                    "optional": false,
                                    "type": "any",
                                    "description": "Custom listener."
                                }
                            ],
                            "returnType": "void",
                            "description": "Remove event listener for overlay click."
                        }
                    ]
                }
            }
        }
    },
    "paginator": {
        "description": "Paginator is a generic widget to display content in paged format.\n\n[Live Demo](https://www.primereact.org/paginator/)",
        "components": {
            "Paginator": {
                "description": "Paginator is a generic widget to display content in paged format.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in Paginator component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "values": [
                        {
                            "name": "totalRecords",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Number of total records."
                        },
                        {
                            "name": "rows",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Data count to display per page."
                        },
                        {
                            "name": "first",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Zero-relative number of the first row to be displayed."
                        },
                        {
                            "name": "pageLinkSize",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "5",
                            "description": "Number of page links to display."
                        },
                        {
                            "name": "rowsPerPageOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "number[]",
                            "default": "",
                            "description": "Array of integer values to display inside rows per page dropdown."
                        },
                        {
                            "name": "alwaysShow",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether to show it even there is only one page."
                        },
                        {
                            "name": "template",
                            "optional": true,
                            "readonly": false,
                            "type": "string | PaginatorTemplateOptions",
                            "default": "FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown",
                            "description": "Custom template of the paginator."
                        },
                        {
                            "name": "leftContent",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Content to inject into the left side of the paginator."
                        },
                        {
                            "name": "rightContent",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Content to inject into the right side of the paginator."
                        },
                        {
                            "name": "firstPageLinkIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<PaginatorProps>",
                            "default": "",
                            "description": "Icon of the first page link icon template."
                        },
                        {
                            "name": "prevPageLinkIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<PaginatorProps>",
                            "default": "",
                            "description": "Icon of the prev page link icon template."
                        },
                        {
                            "name": "nextPageLinkIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<PaginatorProps>",
                            "default": "",
                            "description": "Icon of the next page link icon template."
                        },
                        {
                            "name": "lastPageLinkIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<PaginatorProps>",
                            "default": "",
                            "description": "Icon of the last page link icon template."
                        },
                        {
                            "name": "currentPageReportTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "({currentPage} of {totalPages})",
                            "description": "Template of the current page report element. Available placeholders are {currentPage}, {totalPages}, {rows}, {first}, {last} and {totalRecords}"
                        },
                        {
                            "name": "dropdownAppendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "null | HTMLElement | \"self\"",
                            "default": "document.body",
                            "description": "DOM element instance where the overlay panel should be mounted. Valid values are any DOM Element and 'self'. The self value is used to render a component where it is located."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PaginatorPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onPageChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "PaginatorPageChangeEvent",
                                    "description": "Custom page change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when page changes, the event object contains information about the new state."
                        }
                    ]
                }
            }
        },
        "events": {
            "description": "Defines the custom events used by the component's callbacks.",
            "values": {
                "PaginatorPageChangeEvent": {
                    "description": "Custom page change event.",
                    "relatedProp": "onPageChange",
                    "props": [
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Index of first record"
                        },
                        {
                            "name": "rows",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Number of rows to display in new page"
                        },
                        {
                            "name": "page",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "New page number"
                        },
                        {
                            "name": "pageCount",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Total number of pages"
                        }
                    ]
                },
                "PaginatorChangeEvent": {
                    "description": "Custom change event.",
                    "relatedProp": "onChange",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Browser event."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | null | string",
                            "description": "New value of the element."
                        },
                        {
                            "name": "target",
                            "optional": false,
                            "readonly": false,
                            "type": "PaginatorChangeTargetOptions",
                            "description": "Target options."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "PaginatorPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "PaginatorProps"
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "PaginatorContext"
                        }
                    ],
                    "callbacks": []
                },
                "PaginatorPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "PaginatorPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "left",
                            "optional": true,
                            "readonly": false,
                            "type": "PaginatorPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the left's DOM element."
                        },
                        {
                            "name": "firstPageButton",
                            "optional": true,
                            "readonly": false,
                            "type": "PaginatorPassThroughType<HTMLAttributes<HTMLButtonElement>>",
                            "description": "Uses to pass attributes to the first page button's DOM element."
                        },
                        {
                            "name": "firstPageIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "PaginatorPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the first page icon's DOM element."
                        },
                        {
                            "name": "prevPageButton",
                            "optional": true,
                            "readonly": false,
                            "type": "PaginatorPassThroughType<HTMLAttributes<HTMLButtonElement>>",
                            "description": "Uses to pass attributes to the prev page button's DOM element."
                        },
                        {
                            "name": "prevPageIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "PaginatorPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the prev page icon's DOM element."
                        },
                        {
                            "name": "nextPageButton",
                            "optional": true,
                            "readonly": false,
                            "type": "PaginatorPassThroughType<HTMLAttributes<HTMLButtonElement>>",
                            "description": "Uses to pass attributes to the next page button's DOM element."
                        },
                        {
                            "name": "nextPageIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "PaginatorPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the next page icon's DOM element."
                        },
                        {
                            "name": "lastPageButton",
                            "optional": true,
                            "readonly": false,
                            "type": "PaginatorPassThroughType<HTMLAttributes<HTMLButtonElement>>",
                            "description": "Uses to pass attributes to the last page button's DOM element."
                        },
                        {
                            "name": "lastPageIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "PaginatorPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the last page icon's DOM element."
                        },
                        {
                            "name": "pages",
                            "optional": true,
                            "readonly": false,
                            "type": "PaginatorPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the pages's DOM element."
                        },
                        {
                            "name": "pageButton",
                            "optional": true,
                            "readonly": false,
                            "type": "PaginatorPassThroughType<HTMLAttributes<HTMLButtonElement>>",
                            "description": "Uses to pass attributes to the page button's DOM element."
                        },
                        {
                            "name": "current",
                            "optional": true,
                            "readonly": false,
                            "type": "PaginatorPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the current's DOM element."
                        },
                        {
                            "name": "RPPDropdown",
                            "optional": true,
                            "readonly": false,
                            "type": "DropdownPassThroughOptions",
                            "description": "Uses to pass attributes to the Dropdown component."
                        },
                        {
                            "name": "JTPInput",
                            "optional": true,
                            "readonly": false,
                            "type": "InputNumberPassThroughOptions",
                            "description": "Uses to pass attributes to the Dropdown component."
                        },
                        {
                            "name": "end",
                            "optional": true,
                            "readonly": false,
                            "type": "PaginatorPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the end's DOM element."
                        }
                    ],
                    "callbacks": []
                },
                "PaginatorContext": {
                    "description": "Defines current options in Paginator component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current active state as a boolean."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current disabled state of the button as a boolean."
                        }
                    ],
                    "callbacks": []
                },
                "PaginatorFirstPageLinkOptions": {
                    "description": "Custom paginator first page link options",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "className",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the first page link."
                        },
                        {
                            "name": "iconClassName",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Icon classname of the first page link."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether the link is disabled."
                        },
                        {
                            "name": "element",
                            "optional": false,
                            "readonly": false,
                            "type": "Element",
                            "description": "JSX element to be used as the first page link."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "PaginatorProps",
                            "description": "The props of Paginator component"
                        }
                    ],
                    "callbacks": [
                        {
                            "name": "onClick",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Browser event.v"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on click."
                        }
                    ]
                },
                "PaginatorPrevPageLinkOptions": {
                    "description": "Custom paginator prev page link options",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "className",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the prev page link."
                        },
                        {
                            "name": "iconClassName",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Icon classname of the prev page link."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether the link is disabled."
                        },
                        {
                            "name": "element",
                            "optional": false,
                            "readonly": false,
                            "type": "Element",
                            "description": "JSX element to be used as the prev page link."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "PaginatorProps",
                            "description": "The props of Paginator component"
                        }
                    ],
                    "callbacks": [
                        {
                            "name": "onClick",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on click."
                        }
                    ]
                },
                "PaginatorViewOptions": {
                    "description": "Custom paginator view options",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "startPage",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Starting page number for the paginator view."
                        },
                        {
                            "name": "endPage",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Ending page number for the paginator view."
                        }
                    ],
                    "callbacks": []
                },
                "PaginatorPageLinksOptions": {
                    "description": "Custom paginator page links options",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "className",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the page links."
                        },
                        {
                            "name": "view",
                            "optional": false,
                            "readonly": false,
                            "type": "PaginatorViewOptions",
                            "description": "Paginator view options."
                        },
                        {
                            "name": "page",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "The page number."
                        },
                        {
                            "name": "currentPage",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "The current page number."
                        },
                        {
                            "name": "totalPages",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "The total number of pages."
                        },
                        {
                            "name": "element",
                            "optional": false,
                            "readonly": false,
                            "type": "Element",
                            "description": "JSX element to be used as the page links."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "PaginatorProps",
                            "description": "The props of Paginator component"
                        }
                    ],
                    "callbacks": [
                        {
                            "name": "onClick",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on click."
                        }
                    ]
                },
                "PaginatorNextPageLinkOptions": {
                    "description": "Custom paginator next page link options",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "className",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the next page link."
                        },
                        {
                            "name": "iconClassName",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Icon classname of the next page link."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether the link is disabled."
                        },
                        {
                            "name": "element",
                            "optional": false,
                            "readonly": false,
                            "type": "Element",
                            "description": "JSX element to be used as the next page link."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "PaginatorProps",
                            "description": "The props of Paginator component"
                        }
                    ],
                    "callbacks": [
                        {
                            "name": "onClick",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on click."
                        }
                    ]
                },
                "PaginatorLastPageLinkOptions": {
                    "description": "Custom paginator last page link options",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "className",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the last page link."
                        },
                        {
                            "name": "iconClassName",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Icon classname of the last page link."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether the link is disabled."
                        },
                        {
                            "name": "element",
                            "optional": false,
                            "readonly": false,
                            "type": "Element",
                            "description": "JSX element to be used as the last page link."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "PaginatorProps",
                            "description": "The props of Paginator component"
                        }
                    ],
                    "callbacks": [
                        {
                            "name": "onClick",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on click."
                        }
                    ]
                },
                "PaginatorChangeTargetOptions": {
                    "description": "Custom paginator change target options",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "The name attribute of the target options."
                        },
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "The id attribute of the target options."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | null | string",
                            "description": "The value attribute of the target options."
                        }
                    ],
                    "callbacks": []
                },
                "PaginatorRowsPerPageDropdownOptions": {
                    "description": "Custom rows per page dropdown options",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "New value of the element."
                        },
                        {
                            "name": "options",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "description": "The options available in the rows per page dropdown."
                        },
                        {
                            "name": "appendTo",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | null | HTMLElement | \"self\"",
                            "description": "DOM element instance where the overlay panel should be mounted. Valid values are any DOM Element and \"self\". The \"self\" value is used to render a component where it is located."
                        },
                        {
                            "name": "currentPage",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "The current page number."
                        },
                        {
                            "name": "totalPages",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "The total number of pages."
                        },
                        {
                            "name": "totalRecords",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "The total number of records."
                        },
                        {
                            "name": "element",
                            "optional": false,
                            "readonly": false,
                            "type": "Element",
                            "description": "JSX element to be used as the rows per page dropdown."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "PaginatorProps",
                            "description": "The props of Paginator component."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether the dropdown is disabled."
                        }
                    ],
                    "callbacks": [
                        {
                            "name": "onChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "PaginatorChangeEvent",
                                    "description": "Custom change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Paginator options change callback"
                        }
                    ]
                },
                "PaginatorCurrentPageReportOptions": {
                    "description": "Custom paginator current page report options",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "currentPage",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "The current page number."
                        },
                        {
                            "name": "totalPages",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "The total number of pages."
                        },
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "The first number of the current page."
                        },
                        {
                            "name": "last",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "The last number of the current page."
                        },
                        {
                            "name": "rows",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "The number of rows per page."
                        },
                        {
                            "name": "totalRecords",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "The total number of records."
                        },
                        {
                            "name": "className",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the element."
                        },
                        {
                            "name": "element",
                            "optional": false,
                            "readonly": false,
                            "type": "Element",
                            "description": "JSX element to be used as the current page report element."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "PaginatorProps",
                            "description": "The props of Paginator component."
                        }
                    ],
                    "callbacks": []
                },
                "PaginatorJumpToPageInputOptions": {
                    "description": "Custom paginator jump to page input options",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "The current value."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether the input is disabled."
                        },
                        {
                            "name": "className",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the element."
                        },
                        {
                            "name": "element",
                            "optional": false,
                            "readonly": false,
                            "type": "Element",
                            "description": "JSX element to be used as the jump to page input element."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "PaginatorProps",
                            "description": "The props of Paginator component."
                        }
                    ],
                    "callbacks": [
                        {
                            "name": "onChange",
                            "parameters": [
                                {
                                    "name": "first",
                                    "optional": false,
                                    "type": "number",
                                    "description": "Custom change event."
                                },
                                {
                                    "name": "rows",
                                    "optional": false,
                                    "type": "number",
                                    "description": "Custom change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the input value changes."
                        }
                    ]
                },
                "PaginatorTemplateOptions": {
                    "description": "Custom paginator template options",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "layout",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "The layout of the paginator."
                        },
                        {
                            "name": "FirstPageLink",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "description": "The first page link component."
                        },
                        {
                            "name": "PrevPageLink",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "description": "The prev page link component."
                        },
                        {
                            "name": "PageLinks",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "description": "The page links component."
                        },
                        {
                            "name": "NextPageLink",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "description": "The next page link component."
                        },
                        {
                            "name": "LastPageLink",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "description": "The last page link component."
                        },
                        {
                            "name": "RowsPerPageDropdown",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "description": "The rows per page dropdown component."
                        },
                        {
                            "name": "CurrentPageReport",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "description": "The current page report component."
                        },
                        {
                            "name": "JumpToPageInput",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "description": "The jump to page input component."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "PaginatorPassThroughType": {
                    "values": "PassThroughType<T, PaginatorPassThroughMethodOptions>"
                },
                "PaginatorTemplate": {
                    "values": "PaginatorTemplateOptions | string | undefined",
                    "description": "Custom template for the paginator."
                }
            }
        }
    },
    "panel": {
        "description": "Panel is a grouping component providing with content toggle feature.\n\n[Live Demo](https://www.primereact.org/panel/)",
        "components": {
            "Panel": {
                "description": "Panel is a grouping component providing with content toggle feature.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        },
                        {
                            "name": "getContent",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get content of the panel."
                        },
                        {
                            "name": "toggle",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "undefined | SyntheticEvent<Element, Event>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Toggle the panel if toggleable."
                        },
                        {
                            "name": "expand",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "undefined | SyntheticEvent<Element, Event>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Expand the panel if toggleable."
                        },
                        {
                            "name": "collapse",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "undefined | SyntheticEvent<Element, Event>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Collapse the panel if toggleable."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in Panel component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "values": [
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Custom header template of the panel."
                        },
                        {
                            "name": "footer",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Custom footer template of the panel."
                        },
                        {
                            "name": "headerTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Header template of the panel to customize more."
                        },
                        {
                            "name": "footerTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Footer template of the panel to customize more."
                        },
                        {
                            "name": "toggleable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if content of panel can be expanded and collapsed."
                        },
                        {
                            "name": "collapsed",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines the initial state of panel content, supports one or two-way binding as well."
                        },
                        {
                            "name": "expandIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<PanelProps>",
                            "default": "",
                            "description": "Icon of a expanded tab."
                        },
                        {
                            "name": "collapseIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<PanelProps>",
                            "default": "",
                            "description": "Icon of a collapsed tab."
                        },
                        {
                            "name": "icons",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Custom icons template for the header."
                        },
                        {
                            "name": "transitionOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSTransitionProps",
                            "default": "",
                            "description": "The properties of CSSTransition can be customized, except for \"nodeRef\" and \"in\" properties."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onExpand",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a tab gets expanded."
                        },
                        {
                            "name": "onCollapse",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when an active tab is collapsed by clicking on the header."
                        },
                        {
                            "name": "onToggle",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "PanelToggleEvent",
                                    "description": "Custom toggle event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a tab gets expanded."
                        }
                    ]
                }
            }
        },
        "events": {
            "description": "Defines the custom events used by the component's callbacks.",
            "values": {
                "PanelToggleEvent": {
                    "description": "Custom toggle event.",
                    "relatedProp": "onToggle",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "MouseEvent<HTMLElement, MouseEvent>",
                            "description": "Browser event."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Collapsed state as a boolean."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "PanelHeaderTemplateOptions": {
                    "description": "Custom panel header template options.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "className",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the panel."
                        },
                        {
                            "name": "titleClassName",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the panel title."
                        },
                        {
                            "name": "iconsClassName",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the panel icons."
                        },
                        {
                            "name": "togglerClassName",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the panel toggler."
                        },
                        {
                            "name": "togglerIconClassName",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the panel toggler icon."
                        },
                        {
                            "name": "titleElement",
                            "optional": false,
                            "readonly": false,
                            "type": "Element",
                            "description": "The JSX element that represents the title of the panel."
                        },
                        {
                            "name": "iconsElement",
                            "optional": false,
                            "readonly": false,
                            "type": "Element",
                            "description": "The JSX element that represents the icons of the panel."
                        },
                        {
                            "name": "togglerElement",
                            "optional": false,
                            "readonly": false,
                            "type": "Element",
                            "description": "The JSX element that represents the toggler of the panel."
                        },
                        {
                            "name": "element",
                            "optional": false,
                            "readonly": false,
                            "type": "Element",
                            "description": "The JSX element that represents the panel."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "PanelProps",
                            "description": "The props of the Panel component."
                        },
                        {
                            "name": "collapsed",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether the panel header is collapsed or not."
                        }
                    ],
                    "callbacks": [
                        {
                            "name": "onTogglerClick",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "MouseEvent<HTMLElement, MouseEvent>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the toggler button is clicked."
                        }
                    ]
                },
                "PanelFooterTemplateOptions": {
                    "description": "Custom panel footer template options.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "className",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the panel."
                        },
                        {
                            "name": "element",
                            "optional": false,
                            "readonly": false,
                            "type": "Element",
                            "description": "The JSX element that represents the panel."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "PanelProps",
                            "description": "The props of the Panel component."
                        }
                    ],
                    "callbacks": []
                },
                "PanelPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "PanelProps"
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "PanelState"
                        }
                    ],
                    "callbacks": []
                },
                "PanelPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "title",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the title's DOM element."
                        },
                        {
                            "name": "icons",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the icons' DOM element."
                        },
                        {
                            "name": "toggler",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelPassThroughType<HTMLAttributes<HTMLButtonElement>>",
                            "description": "Uses to pass attributes to the toggler's DOM element."
                        },
                        {
                            "name": "togglerIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the togglericon's DOM element."
                        },
                        {
                            "name": "toggleableContent",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the toggleablecontent's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "footer",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the footer's DOM element."
                        }
                    ],
                    "callbacks": []
                },
                "PanelState": {
                    "description": "Defines current inline state in Panel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Current id state."
                        },
                        {
                            "name": "collapsed",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current collapsed state as a boolean."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "PanelPassThroughType": {
                    "values": "PassThroughType<T, PanelPassThroughMethodOptions>"
                }
            }
        }
    },
    "panelmenu": {
        "description": "PanelMenu is a hybrid of accordion-tree components.\n\n[Live Demo](https://www.primereact.org/panelmenu/)",
        "components": {
            "PanelMenu": {
                "description": "PanelMenu is a hybrid of accordion-tree components.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in PanelMenu component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "values": [
                        {
                            "name": "model",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuItem[]",
                            "default": "",
                            "description": "An array of menuitems."
                        },
                        {
                            "name": "multiple",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether multiple tabs can be activated at the same time or not."
                        },
                        {
                            "name": "submenuIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<PanelMenuProps>",
                            "default": "",
                            "description": "Icon of the submenu."
                        },
                        {
                            "name": "transitionOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSTransitionProps",
                            "default": "",
                            "description": "The properties of CSSTransition can be customized, except for \"nodeRef\" and \"in\" properties."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelMenuPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "PanelMenuPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "PanelMenuProps"
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "PanelMenuState"
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "PanelMenuContext"
                        }
                    ],
                    "callbacks": []
                },
                "PanelMenuPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelMenuPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "panel",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelMenuPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the panel's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelMenuPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "headerAction",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelMenuPassThroughType<HTMLAttributes<HTMLAnchorElement>>",
                            "description": "Uses to pass attributes to the header action's DOM element."
                        },
                        {
                            "name": "submenuIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelMenuPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the submenuIcon's DOM element."
                        },
                        {
                            "name": "headerIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelMenuPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the header icon's DOM element."
                        },
                        {
                            "name": "headerSubmenuIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelMenuPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the header submenu icon's DOM element."
                        },
                        {
                            "name": "headerLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelMenuPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the header label's DOM element."
                        },
                        {
                            "name": "toggleableContent",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelMenuPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the toggleable content's DOM element."
                        },
                        {
                            "name": "headerToggleableContent",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelMenuPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the header toggleable content's DOM element."
                        },
                        {
                            "name": "menuContent",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelMenuPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the menu content's DOM element."
                        },
                        {
                            "name": "menu",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelMenuPassThroughType<HTMLAttributes<HTMLUListElement>>",
                            "description": "Uses to pass attributes to the list's DOM element."
                        },
                        {
                            "name": "menuitem",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelMenuPassThroughType<HTMLAttributes<HTMLLIElement>>",
                            "description": "Uses to pass attributes to the list item's DOM element."
                        },
                        {
                            "name": "action",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelMenuPassThroughType<HTMLAttributes<HTMLAnchorElement>>",
                            "description": "Uses to pass attributes to the action's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelMenuPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the icon's DOM element."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelMenuPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the label's DOM element."
                        },
                        {
                            "name": "separator",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelMenuPassThroughType<HTMLAttributes<HTMLLIElement>>",
                            "description": "Uses to pass attributes to the separator's DOM element."
                        }
                    ],
                    "callbacks": []
                },
                "PanelMenuState": {
                    "description": "Defines current inline state in PanelMenu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Current id state as a string."
                        },
                        {
                            "name": "activeItem",
                            "optional": false,
                            "readonly": false,
                            "type": "MenuItem[]",
                            "description": "Active item path."
                        },
                        {
                            "name": "animationDisabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether the menu is visible or not."
                        }
                    ],
                    "callbacks": []
                },
                "PanelMenuContext": {
                    "description": "Defines current options in PanelMenu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current active state of menuitem as a boolean."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "PanelMenuPassThroughType": {
                    "values": "PassThroughType<T, PanelMenuPassThroughMethodOptions>"
                }
            }
        }
    },
    "password": {
        "description": "Password displays strength indicator for password fields.\n\n[Live Demo](https://www.primereact.org/password/)",
        "components": {
            "Password": {
                "description": "Password displays strength indicator for password fields.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "focus",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Used to focus the component."
                        },
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        },
                        {
                            "name": "getInput",
                            "parameters": [],
                            "returnType": "ForwardRefExoticComponent<InputTextProps & RefAttributes<HTMLInputElement>>",
                            "description": "Used to get input element."
                        },
                        {
                            "name": "getOverlay",
                            "parameters": [],
                            "returnType": "HTMLElement",
                            "description": "Used to get overlay element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in Password component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "values": [
                        {
                            "name": "inputId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the input element."
                        },
                        {
                            "name": "inputRef",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<HTMLInputElement>",
                            "default": "",
                            "description": "Reference of the input element."
                        },
                        {
                            "name": "inputStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the input field."
                        },
                        {
                            "name": "inputClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the input field."
                        },
                        {
                            "name": "hideIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<PasswordProps>",
                            "default": "",
                            "description": "Hide icon template."
                        },
                        {
                            "name": "showIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<PasswordProps>",
                            "default": "",
                            "description": "Show icon template."
                        },
                        {
                            "name": "promptLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "Please enter a password",
                            "description": "Text to prompt password entry."
                        },
                        {
                            "name": "weakLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "Weak",
                            "description": "Text for a weak password."
                        },
                        {
                            "name": "mediumLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "Medium",
                            "description": "Text for a medium password."
                        },
                        {
                            "name": "strongLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "Strong",
                            "description": "Text for a strong password."
                        },
                        {
                            "name": "mediumRegex",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "^(((?=.*[a-z])(?=.*[A-Z]))|((?=.*[a-z])(?=.*[0-9]))|((?=.*[A-Z])(?=.*[0-9])))(?=.{6,}).",
                            "description": "Regex for a medium level password."
                        },
                        {
                            "name": "strongRegex",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})",
                            "description": "Regex for a strong level password."
                        },
                        {
                            "name": "feedback",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show the strength indicator or not."
                        },
                        {
                            "name": "toggleMask",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to show an icon to display the password as plain text."
                        },
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "null | HTMLElement | \"self\"",
                            "default": "document.body",
                            "description": "DOM element instance where the overlay panel should be mounted. Valid values are any DOM Element and 'self'. The self value is used to render a component where it is located."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Template of panel header if \"feedback\" is enabled."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Template of panel content if \"feedback\" is enabled."
                        },
                        {
                            "name": "footer",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Template of panel footer if \"feedback\" is enabled."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Template of mask icon if \"toggleMask\" is enabled."
                        },
                        {
                            "name": "tooltip",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Content of the tooltip."
                        },
                        {
                            "name": "tooltipOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "TooltipOptions",
                            "default": "",
                            "description": "Configuration of the tooltip, refer to the tooltip documentation for more information."
                        },
                        {
                            "name": "keyfilter",
                            "optional": true,
                            "readonly": false,
                            "type": "KeyFilterType",
                            "default": "",
                            "description": "Format definition of the keys to block."
                        },
                        {
                            "name": "panelStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the overlay panel element."
                        },
                        {
                            "name": "panelClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the overlay panel element."
                        },
                        {
                            "name": "transitionOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSTransitionProps",
                            "default": "",
                            "description": "The properties of CSSTransition can be customized, except for \"nodeRef\" and \"in\" properties."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PasswordPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onInput",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FormEvent<HTMLInputElement>",
                                    "description": "Browser event"
                                },
                                {
                                    "name": "validatePattern",
                                    "optional": false,
                                    "type": "boolean",
                                    "description": "Whether to validate the value"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on input event of input field."
                        },
                        {
                            "name": "onShow",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when overlay becomes visible."
                        },
                        {
                            "name": "onHide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when overlay becomes hidden."
                        }
                    ]
                }
            }
        },
        "events": {
            "description": "Defines the custom events used by the component's callbacks.",
            "values": {
                "PasswordIconEvent": {
                    "description": "Custom icon event",
                    "relatedProp": "icon",
                    "props": [
                        {
                            "name": "className",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the default element."
                        },
                        {
                            "name": "element",
                            "optional": false,
                            "readonly": false,
                            "type": "Element",
                            "description": "Default element created by the component."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "PasswordProps",
                            "description": "All component props."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "PasswordPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "PasswordProps"
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "PasswordState"
                        }
                    ],
                    "callbacks": []
                },
                "PasswordPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "PasswordPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "input",
                            "optional": true,
                            "readonly": false,
                            "type": "PasswordPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the InputText component."
                        },
                        {
                            "name": "hideIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "PasswordPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the hide icon's DOM element."
                        },
                        {
                            "name": "showIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "PasswordPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the show icon's DOM element."
                        },
                        {
                            "name": "panel",
                            "optional": true,
                            "readonly": false,
                            "type": "PasswordPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the panel's DOM element."
                        },
                        {
                            "name": "meter",
                            "optional": true,
                            "readonly": false,
                            "type": "PasswordPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the meter's DOM element."
                        },
                        {
                            "name": "meterLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "PasswordPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the meter label's DOM element."
                        },
                        {
                            "name": "info",
                            "optional": true,
                            "readonly": false,
                            "type": "PasswordPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the info's DOM element."
                        }
                    ],
                    "callbacks": []
                },
                "PasswordState": {
                    "description": "Defines current inline state in Password component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "overlayVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current overlay visible state as a boolean."
                        },
                        {
                            "name": "meter",
                            "optional": false,
                            "readonly": false,
                            "type": "PasswordMeterStateOptions",
                            "description": "Current overlay visible state as a boolean."
                        },
                        {
                            "name": "infoText",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Current info test state as a string."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current focused state as a boolean."
                        },
                        {
                            "name": "unmasked",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current unmasked state as a boolean."
                        }
                    ],
                    "callbacks": []
                },
                "PasswordMeterStateOptions": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "strength",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Current strength of the meter state as a string."
                        },
                        {
                            "name": "width",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Current width of the meter state as a string."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "PasswordPassThroughType": {
                    "values": "PassThroughType<T, PasswordPassThroughMethodOptions>"
                }
            }
        }
    },
    "picklist": {
        "description": "PickList is used to reorder items between different lists.\n\n[Live Demo](https://www.primereact.org/picklist/)",
        "components": {
            "PickList": {
                "description": "PickList is used to reorder items between different lists.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in PickList component.",
                    "values": [
                        {
                            "name": "id",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Unique identifier of the element."
                        },
                        {
                            "name": "source",
                            "optional": true,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "An array of objects for the source list."
                        },
                        {
                            "name": "target",
                            "optional": true,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "An array of objects for the target list."
                        },
                        {
                            "name": "sourceHeader",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Template for the source list caption."
                        },
                        {
                            "name": "targetHeader",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Template for the target list caption."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the element."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the element."
                        },
                        {
                            "name": "sourceStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the source list element."
                        },
                        {
                            "name": "targetStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the target list element."
                        },
                        {
                            "name": "sourceSelection",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Selected item in the source list."
                        },
                        {
                            "name": "targetSelection",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Selected items in the target list."
                        },
                        {
                            "name": "showSourceControls",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show buttons of source list."
                        },
                        {
                            "name": "showTargetControls",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show buttons of target list."
                        },
                        {
                            "name": "metaKeySelection",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Defines how multiple items can be selected, when true metaKey needs to be pressed to select or unselect an item and when set to false selection of each item can be toggled individually. On touch enabled devices, metaKeySelection is turned off automatically."
                        },
                        {
                            "name": "filter",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified, displays an input field to filter the items on keyup."
                        },
                        {
                            "name": "targetFilterIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<PickListProps>",
                            "default": "",
                            "description": "Icon of the target list filter."
                        },
                        {
                            "name": "sourceFilterIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<PickListProps>",
                            "default": "",
                            "description": "Icon of the source list filter."
                        },
                        {
                            "name": "moveAllToSourceIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<PickListProps>",
                            "default": "",
                            "description": "Icon for moving all items to the source list."
                        },
                        {
                            "name": "moveToSourceIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<PickListProps>",
                            "default": "",
                            "description": "Icon for moving an item to the source list."
                        },
                        {
                            "name": "moveAllToTargetIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<PickListProps>",
                            "default": "",
                            "description": "Icon for moving all items to the target list."
                        },
                        {
                            "name": "moveToTargetIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<PickListProps>",
                            "default": "",
                            "description": "Icon for moving an item to the target list."
                        },
                        {
                            "name": "moveUpIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<PickListProps>",
                            "default": "",
                            "description": "Icon of the move up icon."
                        },
                        {
                            "name": "moveTopIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<PickListProps>",
                            "default": "",
                            "description": "Icon of the move top icon."
                        },
                        {
                            "name": "moveDownIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<PickListProps>",
                            "default": "",
                            "description": "Icon of the move down icon."
                        },
                        {
                            "name": "moveBottomIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<PickListProps>",
                            "default": "",
                            "description": "Icon of the move bottom icon."
                        },
                        {
                            "name": "filterBy",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "When specified displays an input field to filter the items on keyup and decides which field to search (Accepts multiple fields with a comma)."
                        },
                        {
                            "name": "filterMatchMode",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "contains",
                            "description": "Defines how the items are filtered, valid values are \"contains\" (default) \"startsWith\", \"endsWith\", \"equals\", \"notEquals\", \"in\", \"lt\", \"lte\", \"gt\" and \"gte\"."
                        },
                        {
                            "name": "filterLocale",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "undefined",
                            "description": "Locale to use in filtering. The default locale is the host environment's current locale."
                        },
                        {
                            "name": "sourceFilterValue",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Filter value in the target list."
                        },
                        {
                            "name": "targetFilterValue",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Filter value in the source list."
                        },
                        {
                            "name": "showSourceFilter",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show filter input for source list when filterBy is enabled."
                        },
                        {
                            "name": "showTargetFilter",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show filter input for target list when filterBy is enabled."
                        },
                        {
                            "name": "sourceFilterPlaceholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Placeholder text on source filter input."
                        },
                        {
                            "name": "targetFilterPlaceholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Placeholder text on target filter input."
                        },
                        {
                            "name": "sourceFilterTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Template for the source filter content."
                        },
                        {
                            "name": "targetFilterTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Placeholder text on target filter input."
                        },
                        {
                            "name": "tabIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "dataKey",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Name of the field that uniquely identifies the a record in the data."
                        },
                        {
                            "name": "breakpoint",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "'960px'.",
                            "description": "The breakpoint to define the maximum width boundary when responsiveness is enabled."
                        },
                        {
                            "name": "itemTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Template that gets the options for both source and target items and returns the content for it. Useful if you want the same template for both lists else use the custom sourceItemTemplate or targetItemTemplate properties."
                        },
                        {
                            "name": "sourceItemTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Template that gets the options for the source items and returns the content for it."
                        },
                        {
                            "name": "targetItemTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Template that gets the options for the target items and returns the content for it."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PickListPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "PickListChangeEvent",
                                    "description": "Custom change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when items are moved from source to target."
                        },
                        {
                            "name": "onMoveToSource",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "PickListEvent",
                                    "description": "Custom picklist event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when items are moved from target to source."
                        },
                        {
                            "name": "onMoveAllToSource",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "PickListEvent",
                                    "description": "Custom picklist event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when all items are moved from target to source."
                        },
                        {
                            "name": "onMoveToTarget",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "PickListEvent",
                                    "description": "Custom picklist event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when items are moved from source to target."
                        },
                        {
                            "name": "onMoveAllToTarget",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "PickListEvent",
                                    "description": "Custom picklist event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when all items are moved from source to target."
                        },
                        {
                            "name": "onSourceSelectionChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "PickListEvent",
                                    "description": "Custom picklist event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when items are selected within source list."
                        },
                        {
                            "name": "onTargetSelectionChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "PickListEvent",
                                    "description": "Custom picklist event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when items are selected within target list."
                        },
                        {
                            "name": "onSourceFilterChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "PickListEvent",
                                    "description": "Custom picklist event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when items are filtered within source list."
                        },
                        {
                            "name": "onTargetFilterChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "PickListEvent",
                                    "description": "Custom picklist event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when items are filtered within target list."
                        }
                    ]
                }
            }
        },
        "events": {
            "description": "Defines the custom events used by the component's callbacks.",
            "values": {
                "PickListEvent": {
                    "description": "Custom picklist event.",
                    "relatedProp": "onMoveToSource",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Browser event."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Moved items"
                        }
                    ]
                },
                "PickListChangeEvent": {
                    "description": "Custom picklist event.",
                    "relatedProp": "onChange",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Browser event."
                        },
                        {
                            "name": "source",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Source list"
                        },
                        {
                            "name": "target",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Target list"
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "PickListPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "PickListProps"
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "PickListState"
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "PickListContext"
                        }
                    ],
                    "callbacks": []
                },
                "PickListPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "PickListPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "controls",
                            "optional": true,
                            "readonly": false,
                            "type": "PickListPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the source controls' DOM element."
                        },
                        {
                            "name": "moveUpButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions",
                            "description": "Uses to pass attributes to the Button component."
                        },
                        {
                            "name": "moveTopButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions",
                            "description": "Uses to pass attributes to the Button component."
                        },
                        {
                            "name": "moveDownButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions",
                            "description": "Uses to pass attributes to the Button component."
                        },
                        {
                            "name": "moveBottomButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions",
                            "description": "Uses to pass attributes to the Button component."
                        },
                        {
                            "name": "listWrapper",
                            "optional": true,
                            "readonly": false,
                            "type": "PickListPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the source wrapper's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "PickListPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the source header's DOM element."
                        },
                        {
                            "name": "buttons",
                            "optional": true,
                            "readonly": false,
                            "type": "PickListPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the buttons' DOM element."
                        },
                        {
                            "name": "moveToTargetButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions",
                            "description": "Uses to pass attributes to the Button component."
                        },
                        {
                            "name": "moveAllToTargetButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions",
                            "description": "Uses to pass attributes to the Button component."
                        },
                        {
                            "name": "moveToSourceButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions",
                            "description": "Uses to pass attributes to the Button component."
                        },
                        {
                            "name": "moveAllToSourceButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions",
                            "description": "Uses to pass attributes to the Button component."
                        },
                        {
                            "name": "filterIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "PickListPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the buttons' DOM element."
                        },
                        {
                            "name": "filter",
                            "optional": true,
                            "readonly": false,
                            "type": "PickListPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the buttons' DOM element."
                        },
                        {
                            "name": "filterInput",
                            "optional": true,
                            "readonly": false,
                            "type": "PickListPassThroughType<HTMLAttributes<HTMLInputElement>>",
                            "description": "Uses to pass attributes to the buttons' DOM element."
                        },
                        {
                            "name": "filterContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "PickListPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the buttons' DOM element."
                        },
                        {
                            "name": "item",
                            "optional": true,
                            "readonly": false,
                            "type": "PickListPassThroughType<HTMLAttributes<HTMLLIElement>>",
                            "description": "Uses to pass attributes to the buttons' DOM element."
                        },
                        {
                            "name": "list",
                            "optional": true,
                            "readonly": false,
                            "type": "PickListPassThroughType<HTMLAttributes<HTMLUListElement>>",
                            "description": "Uses to pass attributes to the buttons' DOM element."
                        }
                    ],
                    "callbacks": []
                },
                "PickListState": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "sourceSelection",
                            "optional": false,
                            "readonly": false,
                            "type": "[]",
                            "description": "Current source selection state as a []."
                        },
                        {
                            "name": "targetSelection",
                            "optional": false,
                            "readonly": false,
                            "type": "[]",
                            "description": "Current target selection state as a []."
                        },
                        {
                            "name": "sourceFilterValue",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Current source filter state as a string."
                        },
                        {
                            "name": "targetFilterValue",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Current source target filter state as a string."
                        },
                        {
                            "name": "attributeSelector",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Current attribute selector state as a any."
                        }
                    ],
                    "callbacks": []
                },
                "PickListContext": {
                    "description": "Defines current options in PickList component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "selected",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current selection state of the item as a boolean."
                        }
                    ],
                    "callbacks": []
                },
                "PickListFilterTemplateOptions": {
                    "description": "Custom filter template options.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "className",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the filter."
                        },
                        {
                            "name": "inputProps",
                            "optional": false,
                            "readonly": false,
                            "type": "PickListFilterInputProps",
                            "description": "Props of the filter input."
                        },
                        {
                            "name": "iconClassName",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the filter icon."
                        },
                        {
                            "name": "element",
                            "optional": false,
                            "readonly": false,
                            "type": "ReactNode",
                            "description": "The JSX element that represents the picklist filter."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "PickListProps",
                            "description": "The props of the PickList component."
                        }
                    ],
                    "callbacks": []
                },
                "PickListFilterInputProps": {
                    "description": "Custom filter input props.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "className",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the filter input."
                        }
                    ],
                    "callbacks": [
                        {
                            "name": "onChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Filter change callback."
                        },
                        {
                            "name": "onKeyDown",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback function to be invoked when the keydown event."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "PickListPassThroughType": {
                    "values": "PassThroughType<T, PickListPassThroughMethodOptions>"
                }
            }
        }
    },
    "progressbar": {
        "description": "ProgressBar is a process status indicator.\n\n[Live Demo](https://www.primereact.org/progressbar)",
        "components": {
            "ProgressBar": {
                "description": "ProgressBar is a process status indicator.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in ProgressBar component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "values": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "null | string | number",
                            "default": "",
                            "description": "Current value of the progress."
                        },
                        {
                            "name": "showValue",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Show or hide progress bar value."
                        },
                        {
                            "name": "unit",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "%",
                            "description": "Unit sign appended to the value."
                        },
                        {
                            "name": "mode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"determinate\" | \"indeterminate\"",
                            "default": "determinate",
                            "description": "Defines the mode of the progress, valid values are \"determinate\" and \"indeterminate\"."
                        },
                        {
                            "name": "color",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Color for the background of the progress."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "ProgressBarPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "displayValueTemplate",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "undefined | null | string | number"
                                }
                            ],
                            "returnType": "ReactNode",
                            "description": "Custom display value template"
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "ProgressBarPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ProgressBarProps"
                        }
                    ],
                    "callbacks": []
                },
                "ProgressBarPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ProgressBarPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "indeterminateContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "ProgressBarPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the indeterminate container's DOM element."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "ProgressBarPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the value's DOM element."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "ProgressBarPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the label's DOM element."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ProgressBarPassThroughType": {
                    "values": "PassThroughType<T, ProgressBarPassThroughMethodOptions>"
                }
            }
        }
    },
    "progressspinner": {
        "description": "ProgressSpinner is a process status indicator.\n\n[Live Demo](https://www.primereact.org/progressspinner)",
        "components": {
            "ProgressSpinner": {
                "description": "ProgressSpinner is a process status indicator.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in ProgressSpinner component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "values": [
                        {
                            "name": "strokeWidth",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "2",
                            "description": "Width of the circle stroke."
                        },
                        {
                            "name": "fill",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Color for the background of the circle."
                        },
                        {
                            "name": "animationDuration",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "2s",
                            "description": "Duration of the rotate animation."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "ProgressSpinnerPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "ProgressSpinnerPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ProgressSpinnerProps"
                        }
                    ],
                    "callbacks": []
                },
                "ProgressSpinnerPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ProgressSpinnerPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "spinner",
                            "optional": true,
                            "readonly": false,
                            "type": "ProgressSpinnerPassThroughType<HTMLAttributes<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the spinner's DOM element."
                        },
                        {
                            "name": "circle",
                            "optional": true,
                            "readonly": false,
                            "type": "ProgressSpinnerPassThroughType<HTMLAttributes<SVGCircleElement>>",
                            "description": "Uses to pass attributes to the circle's DOM element."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ProgressSpinnerPassThroughType": {
                    "values": "PassThroughType<T, ProgressSpinnerPassThroughMethodOptions>"
                }
            }
        }
    },
    "radiobutton": {
        "description": "RadioButton is an extension to standard radio button element with theming.\n\n[Live Demo](https://www.primereact.org/radiobutton/)",
        "components": {
            "RadioButton": {
                "description": "RadioButton is an extension to standard radio button element with theming.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "focus",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Used to focus the component."
                        },
                        {
                            "name": "select",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Browser event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Used to select a button"
                        },
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        },
                        {
                            "name": "getInput",
                            "parameters": [],
                            "returnType": "HTMLInputElement",
                            "description": "Used to get input element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in RadioButton component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "values": [
                        {
                            "name": "autoFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should automatically get focus on load."
                        },
                        {
                            "name": "inputRef",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<HTMLInputElement>",
                            "default": "",
                            "description": "Reference of the input element."
                        },
                        {
                            "name": "inputId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Unique identifier of the inner native radiobutton."
                        },
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Name of the checkbox element."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Value of the checkbox."
                        },
                        {
                            "name": "checked",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Specifies whether a checkbox should be checked or not."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the element value cannot be altered."
                        },
                        {
                            "name": "required",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that an input field must be filled out before submitting the form."
                        },
                        {
                            "name": "tooltip",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Content of the tooltip."
                        },
                        {
                            "name": "tooltipOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "TooltipOptions",
                            "default": "",
                            "description": "Configuration of the tooltip, refer to the tooltip documentation for more information."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "RadioButtonPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "RadioButtonChangeEvent",
                                    "description": "Custom change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on value change"
                        },
                        {
                            "name": "onClick",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "RadioButtonClickEvent",
                                    "description": "Custom click event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on click.  Mark the event with preventDefault to prevent the option from changing."
                        }
                    ]
                }
            }
        },
        "events": {
            "description": "Defines the custom events used by the component's callbacks.",
            "values": {
                "RadioButtonChangeEvent": {
                    "description": "Custom change event.",
                    "relatedProp": "onChange",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": true,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        },
                        {
                            "name": "checked",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean"
                        },
                        {
                            "name": "target",
                            "optional": false,
                            "readonly": false,
                            "type": "FormTarget<any>"
                        }
                    ]
                },
                "RadioButtonClickEvent": {
                    "description": "Custom click event.",
                    "relatedProp": "onClick",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": true,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        },
                        {
                            "name": "checked",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean"
                        },
                        {
                            "name": "target",
                            "optional": false,
                            "readonly": false,
                            "type": "FormTarget<any>"
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "RadioButtonPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "RadioButtonProps"
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "RadioButtonState"
                        }
                    ],
                    "callbacks": []
                },
                "RadioButtonPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "RadioButtonPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "input",
                            "optional": true,
                            "readonly": false,
                            "type": "RadioButtonPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the input's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "RadioButtonPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the icon's DOM element."
                        },
                        {
                            "name": "hiddenInputWrapper",
                            "optional": true,
                            "readonly": false,
                            "type": "RadioButtonPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the hidden accessible DOM element wrapper."
                        },
                        {
                            "name": "hiddenInput",
                            "optional": true,
                            "readonly": false,
                            "type": "RadioButtonPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the hidden accessible DOM element."
                        },
                        {
                            "name": "tooltip",
                            "optional": true,
                            "readonly": false,
                            "type": "TooltipPassThroughOptions",
                            "description": "Uses to pass attributes tooltip's DOM element."
                        }
                    ],
                    "callbacks": []
                },
                "RadioButtonState": {
                    "description": "Defines current inline state in RadioButton component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current focused state as a boolean."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "RadioButtonPassThroughType": {
                    "values": "PassThroughType<T, RadioButtonPassThroughMethodOptions>"
                }
            }
        }
    },
    "rating": {
        "description": "Rating component is a star based selection input.\n\n[Live Demo](https://www.primereact.org/rating/)",
        "components": {
            "Rating": {
                "description": "Rating component is a star based selection input.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in Rating component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "values": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Value of the rating."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the element should be disabled."
                        },
                        {
                            "name": "readOnly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the input cannot be typed."
                        },
                        {
                            "name": "stars",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "5",
                            "description": "Number of stars."
                        },
                        {
                            "name": "cancel",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "When specified a cancel icon is displayed to allow removing the value."
                        },
                        {
                            "name": "tooltip",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Content of the tooltip."
                        },
                        {
                            "name": "tooltipOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "TooltipOptions",
                            "default": "",
                            "description": "Configuration of the tooltip, refer to the tooltip documentation for more information."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "onIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<RatingProps>",
                            "default": "",
                            "description": "Icon for the on state."
                        },
                        {
                            "name": "offIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<RatingProps>",
                            "default": "",
                            "description": "Icon for the off state."
                        },
                        {
                            "name": "cancelIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<RatingProps>",
                            "default": "",
                            "description": "Icon for the cancelable state."
                        },
                        {
                            "name": "cancelIconProps",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLAttributes<HTMLSpanElement>",
                            "default": "",
                            "description": "Properties of the cancel icon."
                        },
                        {
                            "name": "onIconProps",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLAttributes<HTMLSpanElement>",
                            "default": "",
                            "description": "Properties of the on icon."
                        },
                        {
                            "name": "offIconProps",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLAttributes<HTMLSpanElement>",
                            "default": "",
                            "description": "Properties of the off icon."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "RatingPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "RatingChangeEvent",
                                    "description": "Custom change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on value change."
                        }
                    ]
                }
            }
        },
        "events": {
            "description": "Defines the custom events used by the component's callbacks.",
            "values": {
                "RatingChangeEvent": {
                    "description": "Custom change event.",
                    "relatedProp": "onChange",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": true,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "Nullable<number>"
                        },
                        {
                            "name": "checked",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean"
                        },
                        {
                            "name": "target",
                            "optional": false,
                            "readonly": false,
                            "type": "FormTarget<number>"
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "RatingPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "RatingProps"
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "RatingContext"
                        }
                    ],
                    "callbacks": []
                },
                "RatingPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "RatingPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "cancelIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "RatingPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the cancel icon's DOM element."
                        },
                        {
                            "name": "item",
                            "optional": true,
                            "readonly": false,
                            "type": "RatingPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the item's DOM element."
                        },
                        {
                            "name": "cancelItem",
                            "optional": true,
                            "readonly": false,
                            "type": "RatingPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the cancel item's DOM element."
                        },
                        {
                            "name": "onIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "RatingPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the on icon's DOM element."
                        },
                        {
                            "name": "offIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "RatingPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the off icon's DOM element."
                        },
                        {
                            "name": "tooltip",
                            "optional": true,
                            "readonly": false,
                            "type": "TooltipPassThroughOptions",
                            "description": "Uses to pass attributes tooltip's DOM element."
                        }
                    ],
                    "callbacks": []
                },
                "RatingContext": {
                    "description": "Defines current options in Rating component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current active state of the item as a boolean."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "RatingPassThroughType": {
                    "values": "PassThroughType<T, RatingPassThroughMethodOptions>"
                }
            }
        }
    },
    "ripple": {
        "description": "Ripple component adds ripple effect to the host element.\n\n[Live Demo](https://www.primereact.org/ripple)",
        "components": {
            "Ripple": {
                "description": "Ripple component adds ripple effect to the host element.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                },
                "props": {
                    "description": "Defines valid properties in Ripple component.",
                    "values": [
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        }
    },
    "row": {
        "description": "Row component is a helper component used to create grouping structures in DataTable.\n\n[Live Demo](https://www.primereact.org/datatable/)",
        "components": {
            "Row": {
                "description": "Row component is a helper component used to create grouping structures in DataTable.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                },
                "props": {
                    "description": "Defines valid properties in Row component.",
                    "values": [
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the element."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the row."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "RowPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "RowPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "RowProps"
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "ColumnGroupPassThroughOptions"
                        }
                    ],
                    "callbacks": []
                },
                "RowPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "RowPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "RowPassThroughType": {
                    "values": "PassThroughType<T, RowPassThroughMethodOptions>"
                }
            }
        }
    },
    "scrollpanel": {
        "description": "ScrollPanel is a cross browser, lightweight and skinnable alternative to native browser scrollbar.\n\n[Live Demo](https://www.primereact.org/scrollpanel/)",
        "components": {
            "ScrollPanel": {
                "description": "ScrollPanel is a cross browser, lightweight and skinnable alternative to native browser scrollbar.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        },
                        {
                            "name": "getContent",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get content of the scrollpanel."
                        },
                        {
                            "name": "getXBar",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get horizontal scrollbar of the panel."
                        },
                        {
                            "name": "getYBar",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get vertical scrollbar of the panel."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in ScrollPanel component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "values": [
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "ScrollPanelPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "ScrollPanelThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ScrollPanelProps"
                        }
                    ],
                    "callbacks": []
                },
                "ScrollPanelPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ScrollPanelThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "wrapper",
                            "optional": true,
                            "readonly": false,
                            "type": "ScrollPanelThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the wrapper's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "ScrollPanelThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "barX",
                            "optional": true,
                            "readonly": false,
                            "type": "ScrollPanelThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the horizontal panel's DOM element."
                        },
                        {
                            "name": "barY",
                            "optional": true,
                            "readonly": false,
                            "type": "ScrollPanelThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the vertical panel's DOM element."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ScrollPanelThroughType": {
                    "values": "PassThroughType<T, ScrollPanelThroughMethodOptions>"
                }
            }
        }
    },
    "scrolltop": {
        "description": "ScrollTop gets displayed after a certain scroll position and used to navigates to the top of the page quickly.\n\n[Live Demo](https://www.primereact.org/scrolltop/)",
        "components": {
            "ScrollTop": {
                "description": "ScrollTop gets displayed after a certain scroll position and used to navigates to the top of the page quickly.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLButtonElement",
                            "description": "Used to get container element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in ScrollTop component.",
                    "values": [
                        {
                            "name": "target",
                            "optional": true,
                            "readonly": false,
                            "type": "\"window\" | \"parent\"",
                            "default": "window",
                            "description": "Target of the ScrollTop, valid values are \"window\" and \"parent\"."
                        },
                        {
                            "name": "threshold",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "400",
                            "description": "Defines the threshold value of the vertical scroll position of the target to toggle the visibility."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<ScrollTopProps>",
                            "default": "",
                            "description": "Name of the icon or JSX.Element for icon."
                        },
                        {
                            "name": "behavior",
                            "optional": true,
                            "readonly": false,
                            "type": "\"auto\" | \"smooth\"",
                            "default": "smooth",
                            "description": "Defines the scrolling behavior, \"smooth\" adds an animation and \"auto\" scrolls with a jump."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "transitionOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSTransitionProps",
                            "default": "",
                            "description": "The properties of CSSTransition can be customized, except for \"nodeRef\" and \"in\" properties."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "ScrollTopPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onShow",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when overlay panel becomes visible."
                        },
                        {
                            "name": "onHide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when overlay becomes hidden."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "ScrollTopPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ScrollTopProps"
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "ScrollTopState"
                        }
                    ],
                    "callbacks": []
                },
                "ScrollTopPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ScrollTopPassThroughType<HTMLAttributes<HTMLButtonElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "ScrollTopPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the icon's DOM element."
                        }
                    ],
                    "callbacks": []
                },
                "ScrollTopState": {
                    "description": "Defines current inline state in ScrollTop component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "visible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current visible state as a boolean."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ScrollTopPassThroughType": {
                    "values": "PassThroughType<T, ScrollTopPassThroughMethodOptions>"
                }
            }
        }
    },
    "selectbutton": {
        "description": "SelectButton is used to choose single or multiple items from a list using buttons.\n\n[Live Demo](https://www.primereact.org/selectbutton/)",
        "components": {
            "SelectButton": {
                "description": "SelectButton is used to choose single or multiple items from a list using buttons.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        },
                        {
                            "name": "focus",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Used to focus the component."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in SelectButton component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "values": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Value of the component."
                        },
                        {
                            "name": "options",
                            "optional": true,
                            "readonly": false,
                            "type": "SelectItemOptionsType",
                            "default": "",
                            "description": "An array of objects to display as the available options."
                        },
                        {
                            "name": "optionLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Name of the label field of an option when an arbitrary objects instead of SelectItems are used as options."
                        },
                        {
                            "name": "optionValue",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Name of the value field of an option when arbitrary objects are used as options instead of SelectItems."
                        },
                        {
                            "name": "optionDisabled",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the disabled flag of an option, defaults to false when not defined."
                        },
                        {
                            "name": "tabIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "multiple",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified, allows selecting multiple values."
                        },
                        {
                            "name": "unselectable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether selection can be cleared."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the element should be disabled."
                        },
                        {
                            "name": "dataKey",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "A property to uniquely match the value in options for better performance."
                        },
                        {
                            "name": "tooltip",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Content of the tooltip."
                        },
                        {
                            "name": "tooltipOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "TooltipOptions",
                            "default": "",
                            "description": "Configuration of the tooltip, refer to the tooltip documentation for more information."
                        },
                        {
                            "name": "ariaLabelledBy",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SelectButtonPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "itemTemplate",
                            "parameters": [
                                {
                                    "name": "item",
                                    "optional": false,
                                    "type": "any",
                                    "description": "Current item"
                                }
                            ],
                            "returnType": "ReactNode",
                            "description": "Function that gets the option and returns the content."
                        },
                        {
                            "name": "onChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "SelectButtonChangeEvent",
                                    "description": "Custom change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on value change."
                        }
                    ]
                }
            }
        },
        "events": {
            "description": "Defines the custom events used by the component's callbacks.",
            "values": {
                "SelectButtonChangeEvent": {
                    "description": "Custom change event.",
                    "relatedProp": "onChange",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": true,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        },
                        {
                            "name": "checked",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean"
                        },
                        {
                            "name": "target",
                            "optional": false,
                            "readonly": false,
                            "type": "FormTarget<any>"
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "SelectButtonPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "SelectButtonProps"
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "SelectButtonContext"
                        }
                    ],
                    "callbacks": []
                },
                "SelectButtonPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "SelectButtonPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "button",
                            "optional": true,
                            "readonly": false,
                            "type": "SelectButtonPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the button's DOM element."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "SelectButtonPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the label's DOM element."
                        },
                        {
                            "name": "tooltip",
                            "optional": true,
                            "readonly": false,
                            "type": "TooltipPassThroughOptions",
                            "description": "Uses to pass attributes tooltip's DOM element."
                        }
                    ],
                    "callbacks": []
                },
                "SelectButtonContext": {
                    "description": "Defines current options in SelectButton component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "selected",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Current selected value."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "SelectButtonPassThroughType": {
                    "values": "PassThroughType<T, SelectButtonPassThroughMethodOptions>"
                }
            }
        }
    },
    "selectitem": {
        "description": "This module contains the interface and types for options in a select component.",
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "SelectItemOptionsType": {
                    "values": "SelectItem[] | any[]",
                    "description": "Custom options type."
                }
            }
        }
    },
    "sidebar": {
        "description": "Sidebar is a panel component displayed as an overlay.\n\n[Live Demo](https://www.primereact.org/sidebar/)",
        "components": {
            "Sidebar": {
                "description": "Sidebar is a panel component displayed as an overlay.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        },
                        {
                            "name": "getMask",
                            "parameters": [],
                            "returnType": "HTMLElement",
                            "description": "Used to get mask element."
                        },
                        {
                            "name": "getCloseIcon",
                            "parameters": [],
                            "returnType": "HTMLButtonElement",
                            "description": "Used to get close icon element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in Sidebar component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "values": [
                        {
                            "name": "maskStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the mask."
                        },
                        {
                            "name": "maskClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the mask."
                        },
                        {
                            "name": "visible",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Specifies the visibility of the dialog."
                        },
                        {
                            "name": "position",
                            "optional": true,
                            "readonly": false,
                            "type": "\"left\" | \"top\" | \"bottom\" | \"right\"",
                            "default": "left",
                            "description": "Specifies the position of the sidebar, valid values are \"left\" and \"right\"."
                        },
                        {
                            "name": "fullScreen",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Adds a close icon to the header to hide the dialog."
                        },
                        {
                            "name": "blockScroll",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to block scrolling of the document when sidebar is active."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "dismissable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to dismiss sidebar on click of the mask."
                        },
                        {
                            "name": "showCloseIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to display a close icon inside the panel."
                        },
                        {
                            "name": "closeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<SidebarProps>",
                            "default": "",
                            "description": "Icon of the close button."
                        },
                        {
                            "name": "ariaCloseLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "close",
                            "description": "Aria label of the close icon."
                        },
                        {
                            "name": "closeOnEscape",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Specifies if pressing escape key should hide the sidebar."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "true",
                            "description": "Custom template for the header."
                        },
                        {
                            "name": "icons",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "true",
                            "description": "Custom icons template for the header."
                        },
                        {
                            "name": "modal",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to a modal layer behind the sidebar."
                        },
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "null | HTMLElement | \"self\"",
                            "default": "document.body",
                            "description": "DOM element instance where the overlay panel should be mounted. Valid values are any DOM Element and self. The self value is used to render a component where it is located."
                        },
                        {
                            "name": "transitionOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSTransitionProps",
                            "default": "",
                            "description": "The properties of CSSTransition can be customized, except for \"nodeRef\" and \"in\" properties."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SidebarPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onShow",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when sidebar gets shown."
                        },
                        {
                            "name": "onHide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when the actions used to close the sidebar are triggered. Exp; close icon, mask and esc key."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "SidebarPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "SidebarProps"
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "SidebarState"
                        }
                    ],
                    "callbacks": []
                },
                "SidebarPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "SidebarPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "SidebarPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "closeButton",
                            "optional": true,
                            "readonly": false,
                            "type": "SidebarPassThroughType<HTMLAttributes<HTMLButtonElement>>",
                            "description": "Uses to pass attributes to the close button's DOM element."
                        },
                        {
                            "name": "closeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "SidebarPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the close icon's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "SidebarPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "icons",
                            "optional": true,
                            "readonly": false,
                            "type": "SidebarPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the custom icons content's DOM element."
                        },
                        {
                            "name": "mask",
                            "optional": true,
                            "readonly": false,
                            "type": "SidebarPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the mask's DOM element."
                        }
                    ],
                    "callbacks": []
                },
                "SidebarState": {
                    "description": "Defines current inline state in Sidebar component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "containerVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current container visible state as a boolean."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "SidebarPassThroughType": {
                    "values": "PassThroughType<T, SidebarPassThroughMethodOptions>"
                }
            }
        }
    },
    "skeleton": {
        "description": "Skeleton is a placeholder to display instead of the actual content.\n\n[Live Demo](https://www.primereact.org/skeleton/)",
        "components": {
            "Skeleton": {
                "description": "Skeleton is a placeholder to display instead of the actual content.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in Skeleton component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "values": [
                        {
                            "name": "shape",
                            "optional": true,
                            "readonly": false,
                            "type": "\"circle\" | \"rectangle\"",
                            "default": "rectangle",
                            "description": "It specifies an alternate text for an image, if the image cannot be displayed."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Size of the Circle or Square."
                        },
                        {
                            "name": "width",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "100%",
                            "description": "Width of the element."
                        },
                        {
                            "name": "height",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "1rem",
                            "description": "Height of the element."
                        },
                        {
                            "name": "borderRadius",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Border radius of the element, defaults to value from theme."
                        },
                        {
                            "name": "animation",
                            "optional": true,
                            "readonly": false,
                            "type": "\"none\" | \"wave\"",
                            "default": "wave",
                            "description": "Type of the animation, valid options are \"wave\" and \"none\"."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SkeletonPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "SkeletonPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "SkeletonProps"
                        }
                    ],
                    "callbacks": []
                },
                "SkeletonPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "SkeletonPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "SkeletonPassThroughType": {
                    "values": "PassThroughType<T, SkeletonPassThroughMethodOptions>"
                }
            }
        }
    },
    "slidemenu": {
        "description": "SlideMenu displays submenus with a slide animation.\n\n[Live Demo](https://www.primereact.org/slidemenu/)",
        "components": {
            "SlideMenu": {
                "description": "SlideMenu displays submenus with a slide animation.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "show",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Browser event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Displays the popup menu."
                        },
                        {
                            "name": "hide",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Browser event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Hides the popup menu."
                        },
                        {
                            "name": "toggle",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Browser event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Toggles the visibility of the popup menu."
                        },
                        {
                            "name": "setLevelState",
                            "parameters": [
                                {
                                    "name": "level",
                                    "type": "number",
                                    "description": "Number of the menu to set"
                                }
                            ],
                            "returnType": "void",
                            "description": "Navigates the slide menu to this specific level."
                        },
                        {
                            "name": "navigateForward",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Navigates the slide menu forward."
                        },
                        {
                            "name": "navigateBack",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Navigates the slide menu backwards."
                        },
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in SlideMenu component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "values": [
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "null | HTMLElement | \"self\"",
                            "default": "document.body",
                            "description": "DOM element instance where the overlay panel should be mounted. Valid values are any DOM Element and 'self'. The self value is used to render a component where it is located."
                        },
                        {
                            "name": "autoZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to automatically manage layering."
                        },
                        {
                            "name": "backIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<SlideMenuProps>",
                            "default": "",
                            "description": "Defines the backward icon."
                        },
                        {
                            "name": "backLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "Back",
                            "description": "Label of element to navigate back."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "easing",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "ease-out",
                            "description": "Easing animation to use for sliding."
                        },
                        {
                            "name": "effectDuration",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "250",
                            "description": "Duration of the sliding animation in milliseconds."
                        },
                        {
                            "name": "menuWidth",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "190",
                            "description": "Width of the submenus."
                        },
                        {
                            "name": "model",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuItem[]",
                            "default": "",
                            "description": "An array of menuitems."
                        },
                        {
                            "name": "popup",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if menu would displayed as a popup."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SlideMenuPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "submenuIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<SlideMenuProps>",
                            "default": "",
                            "description": "Icon of the submenu."
                        },
                        {
                            "name": "transitionOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSTransitionProps",
                            "default": "",
                            "description": "The properties of CSSTransition can be customized, except for \"nodeRef\" and \"in\" properties."
                        },
                        {
                            "name": "viewportHeight",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "175",
                            "description": "Height of the scrollable area, a scrollbar appears if a menu height is longer than this value."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onShow",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a popup menu is shown."
                        },
                        {
                            "name": "onHide",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a popup menu is hidden."
                        },
                        {
                            "name": "onNavigate",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "SlideMenuNavigateEvent",
                                    "description": "Navigate event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a menu is navigated to."
                        }
                    ]
                }
            }
        },
        "events": {
            "description": "Defines the custom events used by the component's callbacks.",
            "values": {
                "SlideMenuNavigateEvent": {
                    "description": "Custom navigate event",
                    "relatedProp": "onNavigate",
                    "props": [
                        {
                            "name": "level",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Level of current displayed menu"
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "SlideMenuPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "SlideMenuProps"
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "SlideMenuState"
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "SlideMenuContext"
                        }
                    ],
                    "callbacks": []
                },
                "SlideMenuPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "SlideMenuPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "wrapper",
                            "optional": true,
                            "readonly": false,
                            "type": "SlideMenuPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the wrapper's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "SlideMenuPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "menu",
                            "optional": true,
                            "readonly": false,
                            "type": "SlideMenuPassThroughType<HTMLAttributes<HTMLUListElement>>",
                            "description": "Uses to pass attributes to the list's DOM element."
                        },
                        {
                            "name": "menuitem",
                            "optional": true,
                            "readonly": false,
                            "type": "SlideMenuPassThroughType<HTMLAttributes<HTMLLIElement>>",
                            "description": "Uses to pass attributes to the list item's DOM element."
                        },
                        {
                            "name": "action",
                            "optional": true,
                            "readonly": false,
                            "type": "SlideMenuPassThroughType<HTMLAttributes<HTMLAnchorElement>>",
                            "description": "Uses to pass attributes to the action's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "SlideMenuPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the icon's DOM element."
                        },
                        {
                            "name": "previous",
                            "optional": true,
                            "readonly": false,
                            "type": "SlideMenuPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the previous's DOM element."
                        },
                        {
                            "name": "previousIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "SlideMenuPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the previous icon's DOM element."
                        },
                        {
                            "name": "previousLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "SlideMenuPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the previous label's DOM element."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "SlideMenuPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the label's DOM element."
                        },
                        {
                            "name": "submenuIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "SlideMenuPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the submenu icon's DOM element."
                        },
                        {
                            "name": "separator",
                            "optional": true,
                            "readonly": false,
                            "type": "SlideMenuPassThroughType<HTMLAttributes<HTMLLIElement>>",
                            "description": "Uses to pass attributes to the separator's DOM element."
                        }
                    ],
                    "callbacks": []
                },
                "SlideMenuState": {
                    "description": "Defines current inline state in SlideMenu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "visible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current visible state as a boolean."
                        },
                        {
                            "name": "level",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Current level state as a number."
                        }
                    ],
                    "callbacks": []
                },
                "SlideMenuContext": {
                    "description": "Defines current options in SlideMenu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current active state of menuitem as a boolean."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "SlideMenuPassThroughType": {
                    "values": "PassThroughType<T, SlideMenuPassThroughMethodOptions>"
                }
            }
        }
    },
    "slider": {
        "description": "Slider is a component to provide input with a drag handle.\n\n[Live Demo](https://www.primereact.org/slider/)",
        "components": {
            "Slider": {
                "description": "Slider is a component to provide input with a drag handle.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Returns the reference of virtualScroller's container."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in Slider component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "values": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "number | [number, number]",
                            "default": "0",
                            "description": "Value of the component."
                        },
                        {
                            "name": "min",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Mininum boundary value."
                        },
                        {
                            "name": "max",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "100",
                            "description": "Maximum boundary value."
                        },
                        {
                            "name": "orientation",
                            "optional": true,
                            "readonly": false,
                            "type": "\"horizontal\" | \"vertical\"",
                            "default": "horizontal",
                            "description": "Orientation of the slider, valid values are horizontal and vertical."
                        },
                        {
                            "name": "step",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Step factor to increment/decrement the value."
                        },
                        {
                            "name": "range",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When speficed, allows two boundary values to be picked."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "ariaLabelledBy",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SliderPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "SliderChangeEvent",
                                    "description": "Custom change event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on value change via slide."
                        },
                        {
                            "name": "onSlideEnd",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "SliderSlideEndEvent",
                                    "description": "Custom slide event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when slide ends."
                        }
                    ]
                }
            }
        },
        "events": {
            "description": "Defines the custom events used by the component's callbacks.",
            "values": {
                "SliderChangeEvent": {
                    "description": "Custom change event.",
                    "relatedProp": "onChange",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Slide event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "number | [number, number]",
                            "description": "New value"
                        }
                    ],
                    "extendedBy": "SliderSlideEndEvent"
                },
                "SliderSlideEndEvent": {
                    "description": "Custom slide event.",
                    "relatedProp": "onSlideEnd",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Slide event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "number | [number, number]",
                            "description": "New value"
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "SliderPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "SliderProps"
                        }
                    ],
                    "callbacks": []
                },
                "SliderPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "SliderPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "range",
                            "optional": true,
                            "readonly": false,
                            "type": "SliderPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the range's DOM element."
                        },
                        {
                            "name": "handle",
                            "optional": true,
                            "readonly": false,
                            "type": "SliderPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the handle's DOM element."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "SliderPassThroughType": {
                    "values": "PassThroughType<T, SliderPassThroughMethodOptions>"
                }
            }
        }
    },
    "speeddial": {
        "description": "When pressed, a floating action button can display multiple primary actions that can be performed on a page.\n\n[Live Demo](https://www.primereact.org/speeddial/)",
        "components": {
            "SpeedDial": {
                "description": "When pressed, a floating action button can display multiple primary actions that can be performed on a page.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Used to show the popup."
                        },
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Used to hide the popup."
                        },
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in SpeedDial component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "values": [
                        {
                            "name": "model",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuItem[]",
                            "default": "",
                            "description": "MenuModel instance to define the action items."
                        },
                        {
                            "name": "visible",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Specifies the visibility of the overlay."
                        },
                        {
                            "name": "direction",
                            "optional": true,
                            "readonly": false,
                            "type": "\"left\" | \"right\" | \"up\" | \"down\" | \"up-left\" | \"up-right\" | \"down-left\" | \"down-right\"",
                            "default": "up",
                            "description": "Specifies the opening direction of actions. Valid values are 'up', 'down', 'left', 'right', 'up-left', 'up-right', 'down-left' and 'down-right'"
                        },
                        {
                            "name": "transitionDelay",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "30",
                            "description": "Transition delay step for each action item."
                        },
                        {
                            "name": "type",
                            "optional": true,
                            "readonly": false,
                            "type": "\"linear\" | \"circle\" | \"semi-circle\" | \"quarter-circle\"",
                            "default": "linear",
                            "description": "Specifies the opening type of actions."
                        },
                        {
                            "name": "radius",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Radius for *circle types."
                        },
                        {
                            "name": "mask",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to show a mask element behind the speeddial."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component is disabled."
                        },
                        {
                            "name": "hideOnClickOutside",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the actions close when clicked outside."
                        },
                        {
                            "name": "buttonStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the button element."
                        },
                        {
                            "name": "buttonClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the button element."
                        },
                        {
                            "name": "buttonTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Template of button element."
                        },
                        {
                            "name": "maskStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the mask element."
                        },
                        {
                            "name": "maskClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the mask element."
                        },
                        {
                            "name": "showIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<SpeedDialProps>",
                            "default": "",
                            "description": "Show icon of the button element."
                        },
                        {
                            "name": "hideIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<SpeedDialProps>",
                            "default": "",
                            "description": "Hide icon of the button element."
                        },
                        {
                            "name": "rotateAnimation",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Defined to rotate showIcon when hideIcon is not present."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SpeedDialPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onVisibleChange",
                            "parameters": [
                                {
                                    "name": "visible",
                                    "optional": false,
                                    "type": "boolean",
                                    "description": "Custom visible change event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Fired when the visibility of element changed."
                        },
                        {
                            "name": "onClick",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "MouseEvent<HTMLElement, MouseEvent>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Fired when the button element clicked."
                        },
                        {
                            "name": "onShow",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Fired when the actions are visible."
                        },
                        {
                            "name": "onHide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Fired when the actions are hidden."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "SpeedDialPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "SpeedDialProps"
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "SpeedDialState"
                        }
                    ],
                    "callbacks": []
                },
                "SpeedDialPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "SpeedDialPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "button",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions",
                            "description": "Uses to pass attributes to the Button component."
                        },
                        {
                            "name": "menu",
                            "optional": true,
                            "readonly": false,
                            "type": "SpeedDialPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the menu's DOM element."
                        },
                        {
                            "name": "menuitem",
                            "optional": true,
                            "readonly": false,
                            "type": "SpeedDialPassThroughType<HTMLAttributes<HTMLLIElement>>",
                            "description": "Uses to pass attributes to the menu item's DOM element."
                        },
                        {
                            "name": "action",
                            "optional": true,
                            "readonly": false,
                            "type": "SpeedDialPassThroughType<HTMLAttributes<HTMLAnchorElement>>",
                            "description": "Uses to pass attributes to the action's DOM element."
                        },
                        {
                            "name": "actionIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "SpeedDialPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the action icon's DOM element."
                        },
                        {
                            "name": "mask",
                            "optional": true,
                            "readonly": false,
                            "type": "SpeedDialPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the mask's DOM element."
                        }
                    ],
                    "callbacks": []
                },
                "SpeedDialState": {
                    "description": "Defines current inline state in SpeedDial component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "visible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current visible state as a boolean."
                        }
                    ],
                    "callbacks": []
                },
                "SpeedDialButtonOptions": {
                    "description": "",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "className",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the element."
                        },
                        {
                            "name": "iconClassName",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Icon Classname of the element."
                        },
                        {
                            "name": "element",
                            "optional": false,
                            "readonly": false,
                            "type": "Element",
                            "description": "Default element created by the component."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "SpeedDialProps",
                            "description": "Properties passed to the component."
                        },
                        {
                            "name": "visible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether the overlay is opened."
                        }
                    ],
                    "callbacks": [
                        {
                            "name": "onClick",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "MouseEvent<HTMLElement, MouseEvent>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Fired when the button element clicked."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "SpeedDialPassThroughType": {
                    "values": "PassThroughType<T, SpeedDialPassThroughMethodOptions>"
                }
            }
        }
    },
    "splitbutton": {
        "description": "SplitButton groups a set of commands in an overlay with a default command.\n\n[Live Demo](https://www.primereact.org/splitbutton/)",
        "components": {
            "SplitButton": {
                "description": "SplitButton groups a set of commands in an overlay with a default command.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Used to show the popup."
                        },
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Used to hide the popup."
                        },
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in SplitButton component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "values": [
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Text of the button."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<SplitButtonProps>",
                            "default": "",
                            "description": "Name of the icon."
                        },
                        {
                            "name": "text",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Add a textual class to the button without a background initially."
                        },
                        {
                            "name": "rounded",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Add a circular border radius to the button."
                        },
                        {
                            "name": "raised",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Add a shadow to indicate elevation."
                        },
                        {
                            "name": "outlined",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Add a border class without a background initially."
                        },
                        {
                            "name": "severity",
                            "optional": true,
                            "readonly": false,
                            "type": "\"success\" | \"warning\" | \"secondary\" | \"info\" | \"danger\"",
                            "default": "",
                            "description": "Defines the style of the button, valid values are \"secondary\", \"success\", \"info\", \"warning\", \"danger\"."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "\"small\" | \"large\"",
                            "default": "",
                            "description": "Defines the size of the button, valid values are \"small\" and \"large\"."
                        },
                        {
                            "name": "loading",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Display loading icon of the button"
                        },
                        {
                            "name": "loadingIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<SplitButtonProps>",
                            "default": "",
                            "description": "Name of the loading icon or JSX.Element for loading icon."
                        },
                        {
                            "name": "model",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuItem[]",
                            "default": "",
                            "description": "MenuModel instance to define the overlay items."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "visible",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "When present, it specifies that the element should be visible."
                        },
                        {
                            "name": "buttonClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "ClassName of the button."
                        },
                        {
                            "name": "menuStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the overlay menu."
                        },
                        {
                            "name": "menuClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "ClassName class of the overlay menu."
                        },
                        {
                            "name": "menuButtonClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "ClassName of the menu dropdown button."
                        },
                        {
                            "name": "buttonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Props for the main button, any prop is passed implicity to the button element."
                        },
                        {
                            "name": "menuButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Props for the dropdown button, any prop is passed implicity to the dropdown button element."
                        },
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "null | HTMLElement | \"self\"",
                            "default": "document.body",
                            "description": "DOM element instance where the overlay panel should be mounted. Valid values are any DOM Element and 'self'. The self value is used to render a component where it is located."
                        },
                        {
                            "name": "tooltip",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Content of the tooltip."
                        },
                        {
                            "name": "tooltipOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "TooltipOptions",
                            "default": "",
                            "description": "Configuration of the tooltip, refer to the tooltip documentation for more information."
                        },
                        {
                            "name": "buttonTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "TemplateType<SplitButtonProps>",
                            "default": "",
                            "description": "Template of the default button."
                        },
                        {
                            "name": "transitionOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSTransitionProps",
                            "default": "",
                            "description": "The properties of CSSTransition can be customized, except for \"nodeRef\" and \"in\" properties."
                        },
                        {
                            "name": "dropdownIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<SplitButtonProps>",
                            "default": "",
                            "description": "Name of the dropdown icon or JSX.Element for dropdown icon."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SplitButtonPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onClick",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "MouseEvent<HTMLElement, MouseEvent>",
                                    "description": "Browser event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when main button is clicked."
                        },
                        {
                            "name": "onShow",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when overlay panel becomes visible."
                        },
                        {
                            "name": "onHide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when overlay panel becomes hidden."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "SplitButtonPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "SplitButtonProps"
                        }
                    ],
                    "callbacks": []
                },
                "SplitButtonPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "SplitButtonPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "SplitButtonPassThroughType<SVGProps<SVGSVGElement> | HTMLAttributes<SVGSVGElement | HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the icon's DOM element."
                        },
                        {
                            "name": "button",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions",
                            "description": "Uses to pass attributes to the Button component."
                        },
                        {
                            "name": "menuButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions",
                            "description": "Uses to pass attributes to the Button component."
                        },
                        {
                            "name": "menu",
                            "optional": true,
                            "readonly": false,
                            "type": "SplitButtonPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the menu's DOM element."
                        },
                        {
                            "name": "menuList",
                            "optional": true,
                            "readonly": false,
                            "type": "SplitButtonPassThroughType<HTMLAttributes<HTMLUListElement>>",
                            "description": "Uses to pass attributes to the menu list's DOM element."
                        },
                        {
                            "name": "separator",
                            "optional": true,
                            "readonly": false,
                            "type": "SplitButtonPassThroughType<HTMLAttributes<HTMLLIElement>>",
                            "description": "Uses to pass attributes to the separator's DOM element."
                        },
                        {
                            "name": "menuIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "SplitButtonPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the menu icon's DOM element."
                        },
                        {
                            "name": "menuLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "SplitButtonPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the menu label's DOM element."
                        },
                        {
                            "name": "anchor",
                            "optional": true,
                            "readonly": false,
                            "type": "SplitButtonPassThroughType<HTMLAttributes<HTMLAnchorElement>>",
                            "description": "Uses to pass attributes to the anchor's DOM element."
                        },
                        {
                            "name": "menuItem",
                            "optional": true,
                            "readonly": false,
                            "type": "SplitButtonPassThroughType<HTMLAttributes<HTMLLIElement>>",
                            "description": "Uses to pass attributes to the menu item's DOM element."
                        },
                        {
                            "name": "tooltip",
                            "optional": true,
                            "readonly": false,
                            "type": "TooltipPassThroughOptions",
                            "description": "Uses to pass attributes tooltip's DOM element."
                        }
                    ],
                    "callbacks": []
                },
                "SplitButtonState": {
                    "description": "Defines current inline state in SplitButton component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Current id state as a boolean."
                        },
                        {
                            "name": "overlayVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current overlay visible state as a boolean."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "SplitButtonPassThroughType": {
                    "values": "PassThroughType<T, SplitButtonPassThroughMethodOptions>"
                }
            }
        }
    },
    "splitter": {
        "description": "Splitter is utilized to separate and resize panels.\n\n[Live Demo](https://www.primereact.org/splitter/)\n\nHelper Components:\n\n-  SplitterPanel",
        "components": {
            "SplitterPanel": {
                "description": "SplitterPanel is a helper component for Splitter.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                },
                "props": {
                    "description": "Defines valid properties in SplitterPanel component.",
                    "values": [
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Size of the element relative to 100%."
                        },
                        {
                            "name": "minSize",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Minimum size of the element relative to 100%."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "ClassName of the component."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SplitterPanelPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            },
            "Splitter": {
                "description": "Splitter is utilized to separate and resize panels.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in Splitter component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "values": [
                        {
                            "name": "layout",
                            "optional": true,
                            "readonly": false,
                            "type": "\"horizontal\" | \"vertical\"",
                            "default": "horizontal",
                            "description": "Orientation of the panels, valid values are \"horizontal\" and \"vertical\"."
                        },
                        {
                            "name": "gutterSize",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "4",
                            "description": "Size of the divider in pixels."
                        },
                        {
                            "name": "stateKey",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Storage identifier of a stateful Splitter."
                        },
                        {
                            "name": "stateStorage",
                            "optional": true,
                            "readonly": false,
                            "type": "\"local\" | \"session\"",
                            "default": "session",
                            "description": "Defines where a stateful splitter keeps its state, valid values are \"session\" for sessionStorage and \"local\" for localStorage."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "SplitterPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onResizeEnd",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "SplitterResizeEndEvent",
                                    "description": "Custom resize end event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when resize ends."
                        }
                    ]
                }
            }
        },
        "events": {
            "description": "Defines the custom events used by the component's callbacks.",
            "values": {
                "SplitterResizeEndEvent": {
                    "description": "Custom resize end event.",
                    "relatedProp": "onResizeEnd",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Browser event."
                        },
                        {
                            "name": "sizes",
                            "optional": false,
                            "readonly": false,
                            "type": "number[]",
                            "description": "Sizes of the panels as an array."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "SplitterPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "SplitterProps"
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "SplitterState"
                        }
                    ],
                    "callbacks": []
                },
                "SplitterState": {
                    "description": "Defines current inline state in Panel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "panelSizes",
                            "optional": false,
                            "readonly": false,
                            "type": "number[]",
                            "description": "Previous size state as a number."
                        }
                    ],
                    "callbacks": []
                },
                "SplitterPanelPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "PanelProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "SplitterPanelPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        }
                    ],
                    "callbacks": []
                },
                "SplitterPanelPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "SplitterPanelProps"
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "SplitterPassThroughMethodOptions"
                        }
                    ],
                    "callbacks": []
                },
                "SplitterPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "SplitterPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "gutter",
                            "optional": true,
                            "readonly": false,
                            "type": "SplitterPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the gutter's DOM element."
                        },
                        {
                            "name": "gutterHandler",
                            "optional": true,
                            "readonly": false,
                            "type": "SplitterPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the gutter handler's DOM element."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "SplitterPassThroughType": {
                    "values": "PassThroughType<T, SplitterPassThroughMethodOptions>"
                },
                "SplitterPanelPassThroughType": {
                    "values": "PassThroughType<T, SplitterPanelPassThroughMethodOptions>"
                }
            }
        }
    },
    "steps": {
        "description": "Steps also known as Stepper, is an indicator for the steps in a workflow. Layout of steps component is optimized for responsive design.\n\n[Live Demo](https://www.primereact.org/steps/)",
        "components": {
            "Steps": {
                "description": "Steps also known as Stepper, is an indicator for the steps in a workflow. Layout of steps component is optimized for responsive design.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in Steps component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "values": [
                        {
                            "name": "model",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | MenuItem[]",
                            "default": "",
                            "description": "An array of menuitems."
                        },
                        {
                            "name": "activeIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Index of the active item."
                        },
                        {
                            "name": "readOnly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the items are clickable or not."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "StepsPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onSelect",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "StepsSelectEvent",
                                    "description": "Custom select event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the new step is selected."
                        }
                    ]
                }
            }
        },
        "events": {
            "description": "Defines the custom events used by the component's callbacks.",
            "values": {
                "StepsSelectEvent": {
                    "description": "Custom select event",
                    "relatedProp": "onSelect",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Browser event"
                        },
                        {
                            "name": "item",
                            "optional": false,
                            "readonly": false,
                            "type": "MenuItem",
                            "description": "Selected item instance"
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Index of selected item instance"
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "StepsThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "StepsProps"
                        }
                    ],
                    "callbacks": []
                },
                "StepsPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "StepsPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "menu",
                            "optional": true,
                            "readonly": false,
                            "type": "StepsPassThroughType<HTMLAttributes<HTMLUListElement>>",
                            "description": "Uses to pass attributes to the list's DOM element."
                        },
                        {
                            "name": "menuitem",
                            "optional": true,
                            "readonly": false,
                            "type": "StepsPassThroughType<HTMLAttributes<HTMLLIElement>>",
                            "description": "Uses to pass attributes to the list item's DOM element."
                        },
                        {
                            "name": "action",
                            "optional": true,
                            "readonly": false,
                            "type": "StepsPassThroughType<HTMLAttributes<HTMLAnchorElement>>",
                            "description": "Uses to pass attributes to the action's DOM element."
                        },
                        {
                            "name": "step",
                            "optional": true,
                            "readonly": false,
                            "type": "StepsPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the step's DOM element."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "StepsPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the label's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "StepsPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the icon's DOM element."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "StepsPassThroughType": {
                    "values": "PassThroughType<T, StepsThroughMethodOptions>"
                }
            }
        }
    },
    "styleclass": {
        "description": "StyleClass manages css classes declaratively to during enter/leave animations or just to toggle classes on an element.\n\n[Live Demo](https://www.primereact.org/styleclass)",
        "components": {
            "StyleClass": {
                "description": "StyleClass manages css classes declaratively to during enter/leave animations or just to toggle classes on an element.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLElement",
                            "description": "Used to get container element."
                        },
                        {
                            "name": "getTarget",
                            "parameters": [],
                            "returnType": "HTMLElement",
                            "description": "Used to get target element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in StyleClass component.",
                    "values": [
                        {
                            "name": "nodeRef",
                            "optional": false,
                            "readonly": false,
                            "type": "MutableRefObject<ReactNode>",
                            "default": "",
                            "description": "A React reference to DOM element that need to specify. Required."
                        },
                        {
                            "name": "selector",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Selector to define the target element."
                        },
                        {
                            "name": "enterClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class to add when item begins to get displayed."
                        },
                        {
                            "name": "enterActiveClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class to add during enter animation."
                        },
                        {
                            "name": "enterToClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class to add when item begins to get displayed."
                        },
                        {
                            "name": "leaveClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class to add when item begins to get hidden."
                        },
                        {
                            "name": "leaveActiveClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class to add during leave animation."
                        },
                        {
                            "name": "leaveToClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class to add when leave animation is completed."
                        },
                        {
                            "name": "hideOnOutsideClick",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to trigger leave animation when outside of the element is clicked."
                        },
                        {
                            "name": "toggleClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Adds or removes a class when no enter-leave animation is required."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        }
    },
    "tabmenu": {
        "description": "TabMenu is a navigation/command component that displays items as tab headers.\n\n[Live Demo](https://www.primereact.org/tabmenu/)",
        "components": {
            "TabMenu": {
                "description": "TabMenu is a navigation/command component that displays items as tab headers.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in TabMenu component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "values": [
                        {
                            "name": "model",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuItem[]",
                            "default": "",
                            "description": "An array of menuitems."
                        },
                        {
                            "name": "activeIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Active index of menuitem."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "TabMenuPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onTabChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TabMenuTabChangeEvent",
                                    "description": "Custom tab change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when active tab changes."
                        }
                    ]
                }
            }
        },
        "events": {
            "description": "Defines the custom events used by the component's callbacks.",
            "values": {
                "TabMenuTabChangeEvent": {
                    "description": "Custom tab change event.",
                    "relatedProp": "onTabChange",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Browser event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "MenuItem",
                            "description": "Selected menuitem"
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Index of the selected tab"
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "TabMenuThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "TabMenuProps"
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "TabMenuState"
                        }
                    ],
                    "callbacks": []
                },
                "TabMenuPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "TabMenuPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "menu",
                            "optional": true,
                            "readonly": false,
                            "type": "TabMenuPassThroughType<HTMLAttributes<HTMLUListElement>>",
                            "description": "Uses to pass attributes to the list's DOM element."
                        },
                        {
                            "name": "menuitem",
                            "optional": true,
                            "readonly": false,
                            "type": "TabMenuPassThroughType<HTMLAttributes<HTMLLIElement>>",
                            "description": "Uses to pass attributes to the list item's DOM element."
                        },
                        {
                            "name": "action",
                            "optional": true,
                            "readonly": false,
                            "type": "TabMenuPassThroughType<HTMLAttributes<HTMLAnchorElement>>",
                            "description": "Uses to pass attributes to the action's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "TabMenuPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the icon's DOM element."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "TabMenuPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the label's DOM element."
                        },
                        {
                            "name": "inkbar",
                            "optional": true,
                            "readonly": false,
                            "type": "TabMenuPassThroughType<HTMLAttributes<HTMLLIElement>>",
                            "description": "Uses to pass attributes to the inkbar's DOM element."
                        }
                    ],
                    "callbacks": []
                },
                "TabMenuState": {
                    "description": "Defines current inline state in TabMenu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "activeIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Current active index state as a number."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "TabMenuPassThroughType": {
                    "values": "PassThroughType<T, TabMenuThroughMethodOptions>"
                }
            }
        }
    },
    "tabview": {
        "description": "TabView is a container component to group content with tabs.\n\n[Live Demo](https://www.primereact.org/tabview/)\n\nHelper Components:\n\n-  TabPanel",
        "components": {
            "TabPanel": {
                "description": "TabPanel is a helper component for TabView.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                },
                "props": {
                    "description": "Defines valid properties in TabPanel component.",
                    "values": [
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Orientation of tab headers."
                        },
                        {
                            "name": "headerTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Header template of the tab to customize more."
                        },
                        {
                            "name": "leftIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<TabPanel>",
                            "default": "",
                            "description": "Icons can be placed at left of a header."
                        },
                        {
                            "name": "rightIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<TabPanel>",
                            "default": "",
                            "description": "Icons can be placed at right of a header."
                        },
                        {
                            "name": "prevButton",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<TabPanel>",
                            "default": "",
                            "description": "Previous button of the tab header."
                        },
                        {
                            "name": "nextButton",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<TabPanel>",
                            "default": "",
                            "description": "Next button of the tab header."
                        },
                        {
                            "name": "closeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<TabPanel>",
                            "default": "",
                            "description": "Close button of the tab header."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the tab is disabled."
                        },
                        {
                            "name": "closable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if tab can be removed."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the tab header and content."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the tab header and content."
                        },
                        {
                            "name": "headerStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the tab header."
                        },
                        {
                            "name": "headerClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the tab header."
                        },
                        {
                            "name": "contentStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the tab content."
                        },
                        {
                            "name": "contentClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the tab content."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "TabPanelPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            },
            "TabView": {
                "description": "TabView is a container component to group content with tabs.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "reset",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Resets all states."
                        },
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in TabView component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "values": [
                        {
                            "name": "activeIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Active index of the TabView."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "panelContainerClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the panels container of the tabview."
                        },
                        {
                            "name": "panelContainerStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the panels container of the tabview."
                        },
                        {
                            "name": "renderActiveOnly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to render the contents of the selected tab or all tabs."
                        },
                        {
                            "name": "scrollable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled displays buttons at each side of the tab headers to scroll the tab list."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "TabViewPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onBeforeTabChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TabViewTabChangeEvent",
                                    "description": "Custom tab change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke before an active tab is changed. Return false to prevent tab from changing."
                        },
                        {
                            "name": "onBeforeTabClose",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TabViewTabCloseEvent",
                                    "description": "Custom tab close event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke before an active tab is close. Return false to prevent tab from closing."
                        },
                        {
                            "name": "onTabChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TabViewTabChangeEvent",
                                    "description": "Custom tab change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when an active tab is changed."
                        },
                        {
                            "name": "onTabClose",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TabViewTabCloseEvent",
                                    "description": "Custom tab close event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when an active tab is closed."
                        }
                    ]
                }
            }
        },
        "events": {
            "description": "Defines the custom events used by the component's callbacks.",
            "values": {
                "TabViewTabChangeEvent": {
                    "description": "Custom change event.",
                    "relatedProp": "onTabChange",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Browser event"
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Index of the selected tab"
                        }
                    ]
                },
                "TabViewTabCloseEvent": {
                    "description": "Custom close event.",
                    "relatedProp": "onTabClose",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Browser event"
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Index of the selected tab"
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "TabPanelHeaderTemplateOptions": {
                    "description": "Custom Tabpanel header template options",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "className",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the header element."
                        },
                        {
                            "name": "titleClassName",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the header title element."
                        },
                        {
                            "name": "leftIconElement",
                            "optional": false,
                            "readonly": false,
                            "type": "Element",
                            "description": "Left icon of the tab header."
                        },
                        {
                            "name": "titleElement",
                            "optional": false,
                            "readonly": false,
                            "type": "Element",
                            "description": "The title element of the tab header."
                        },
                        {
                            "name": "rightIconElement",
                            "optional": false,
                            "readonly": false,
                            "type": "Element",
                            "description": "Right icon of the tab header."
                        },
                        {
                            "name": "element",
                            "optional": false,
                            "readonly": false,
                            "type": "Element",
                            "description": "The JSX element of the tab header."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "TabPanelProps",
                            "description": "The props of the tab panel component."
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "The index of the tab header."
                        },
                        {
                            "name": "selected",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether the tab header is selected or not."
                        },
                        {
                            "name": "ariaControls",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "The aria-controls attribute of the tab header."
                        }
                    ],
                    "callbacks": [
                        {
                            "name": "onClick",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "MouseEvent<HTMLElement, MouseEvent>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on click."
                        },
                        {
                            "name": "onKeyDown",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "KeyboardEvent<HTMLElement>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the key pressed."
                        }
                    ]
                },
                "TabPanelPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "TabPanelProps"
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "TabViewPassThroughMethodOptions"
                        }
                    ],
                    "callbacks": []
                },
                "TabPanelPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "TabPanelPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "TabPanelPassThroughType<HTMLAttributes<HTMLLIElement>>",
                            "description": "Uses to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "headerAction",
                            "optional": true,
                            "readonly": false,
                            "type": "TabPanelPassThroughType<HTMLAttributes<HTMLAnchorElement>>",
                            "description": "Uses to pass attributes to the header action's DOM element."
                        },
                        {
                            "name": "headerTitle",
                            "optional": true,
                            "readonly": false,
                            "type": "TabPanelPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the title's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "TabPanelPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the list's DOM element."
                        }
                    ],
                    "callbacks": []
                },
                "TabViewPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "TabViewProps"
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "TabViewState"
                        }
                    ],
                    "callbacks": []
                },
                "TabViewState": {
                    "description": "Defines current inline state in TabView component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "activeIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Current active index state."
                        },
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Unique id for the TabView component."
                        },
                        {
                            "name": "hiddenTabsState",
                            "optional": false,
                            "readonly": false,
                            "type": "number[]",
                            "description": "Current state of hidden tab."
                        },
                        {
                            "name": "isPrevButtonDisabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current state of previous button."
                        },
                        {
                            "name": "isNextButtonDisabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current state of the next button."
                        }
                    ],
                    "callbacks": []
                },
                "TabViewPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "TabViewPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "navContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "TabViewPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the nav container's DOM element."
                        },
                        {
                            "name": "navContent",
                            "optional": true,
                            "readonly": false,
                            "type": "TabViewPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the nav content's DOM element."
                        },
                        {
                            "name": "nav",
                            "optional": true,
                            "readonly": false,
                            "type": "TabViewPassThroughType<HTMLAttributes<HTMLUListElement>>",
                            "description": "Uses to pass attributes to the list's DOM element."
                        },
                        {
                            "name": "inkbar",
                            "optional": true,
                            "readonly": false,
                            "type": "TabViewPassThroughType<HTMLAttributes<HTMLLIElement>>",
                            "description": "Uses to pass attributes to the inkbar's DOM element."
                        },
                        {
                            "name": "previousButton",
                            "optional": true,
                            "readonly": false,
                            "type": "TabViewPassThroughType<HTMLAttributes<HTMLButtonElement>>",
                            "description": "Uses to pass attributes to the previous button's DOM element."
                        },
                        {
                            "name": "previousIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "TabViewPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the previous button icon's DOM element."
                        },
                        {
                            "name": "nextButton",
                            "optional": true,
                            "readonly": false,
                            "type": "TabViewPassThroughType<HTMLAttributes<HTMLButtonElement>>",
                            "description": "Uses to pass attributes to the next button's DOM element."
                        },
                        {
                            "name": "nextIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "TabViewPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the next button icon's DOM element."
                        },
                        {
                            "name": "panelContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "TabViewPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the panel's DOM element."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "TabViewPassThroughType": {
                    "values": "PassThroughType<T, TabViewPassThroughMethodOptions>"
                },
                "TabPanelPassThroughType": {
                    "values": "PassThroughType<T, TabPanelPassThroughMethodOptions>"
                }
            }
        }
    },
    "tag": {
        "description": "Tag component is used to categorize content.\n\n[Live Demo](https://www.primereact.org/tag)",
        "components": {
            "Tag": {
                "description": "Tag component is used to categorize content.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLSpanElement",
                            "description": "Used to get container element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in Tag component. In addition to these, all properties of HTMLSpanElement can be used in this component.",
                    "values": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Value to display inside the tag."
                        },
                        {
                            "name": "severity",
                            "optional": true,
                            "readonly": false,
                            "type": "null | \"success\" | \"warning\" | \"info\" | \"danger\"",
                            "default": "null",
                            "description": "Severity type of the tag."
                        },
                        {
                            "name": "rounded",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the corners of the tag are rounded."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<TagProps>",
                            "default": "",
                            "description": "Icon of the tag to display next to the value."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "TagPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "TagPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "TagProps"
                        }
                    ],
                    "callbacks": []
                },
                "TagPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "TagPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "TagPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the icon's DOM element."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "TagPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the value's DOM element."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "TagPassThroughType": {
                    "values": "PassThroughType<T, TagPassThroughMethodOptions>"
                }
            }
        }
    },
    "terminal": {
        "description": "Terminal is a text based user interface.\n\n[Live Demo](https://www.primereact.org/terminal)",
        "components": {
            "Terminal": {
                "description": "Terminal is a text based user interface.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "focus",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Used to focus the component."
                        },
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in Terminal component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "values": [
                        {
                            "name": "welcomeMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Initial text to display on terminal."
                        },
                        {
                            "name": "prompt",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Prompt text for each command."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "TerminalPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "TerminalState": {
                    "description": "Defines current inline state in Terminal component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "commandText",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Current command text as a string."
                        },
                        {
                            "name": "commands",
                            "optional": false,
                            "readonly": false,
                            "type": "string[]",
                            "description": "Current commands as an array."
                        }
                    ],
                    "callbacks": []
                },
                "TerminalPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "TerminalProps"
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "TerminalState"
                        }
                    ],
                    "callbacks": []
                },
                "TerminalPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "TerminalPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "welcomeMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "TerminalPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the welcome message's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "TerminalPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "commands",
                            "optional": true,
                            "readonly": false,
                            "type": "TerminalPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the commands' DOM element."
                        },
                        {
                            "name": "prompt",
                            "optional": true,
                            "readonly": false,
                            "type": "TerminalPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the prompt's DOM element."
                        },
                        {
                            "name": "command",
                            "optional": true,
                            "readonly": false,
                            "type": "TerminalPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the command's DOM element."
                        },
                        {
                            "name": "response",
                            "optional": true,
                            "readonly": false,
                            "type": "TerminalPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the response's DOM element."
                        },
                        {
                            "name": "container",
                            "optional": true,
                            "readonly": false,
                            "type": "TerminalPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the container's DOM element."
                        },
                        {
                            "name": "commandText",
                            "optional": true,
                            "readonly": false,
                            "type": "TerminalPassThroughType<HTMLAttributes<HTMLInputElement>>",
                            "description": "Uses to pass attributes to the command text's DOM element."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "TerminalPassThroughType": {
                    "values": "PassThroughType<T, TerminalPassThroughMethodOptions>"
                }
            }
        }
    },
    "terminalservice": {
        "description": "Terminal is a text based user interface.\n\n[Live Demo](https://www.primereact.org/terminal/)",
        "components": {
            "TerminalService": {
                "description": "Terminal is a text based user interface.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                },
                "props": {
                    "description": "",
                    "values": []
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "TerminalServiceOptions": {
                    "description": "Custom terminal service options.",
                    "relatedProp": "",
                    "props": [],
                    "callbacks": [
                        {
                            "name": "on",
                            "parameters": [
                                {
                                    "name": "action",
                                    "optional": false,
                                    "type": "\"clear\" | \"response\" | \"command\"",
                                    "description": "Custom listener."
                                },
                                {
                                    "name": "fn",
                                    "optional": false,
                                    "type": "any",
                                    "description": "Custom listener."
                                }
                            ],
                            "returnType": "void",
                            "description": "Method to attach an event listener to a specific action."
                        },
                        {
                            "name": "emit",
                            "parameters": [
                                {
                                    "name": "action",
                                    "optional": false,
                                    "type": "\"clear\" | \"response\" | \"command\"",
                                    "description": "Custom listener."
                                },
                                {
                                    "name": "params",
                                    "optional": true,
                                    "type": "any",
                                    "description": "Custom listener."
                                }
                            ],
                            "returnType": "void",
                            "description": "Method to emit an event for a specific action."
                        },
                        {
                            "name": "off",
                            "parameters": [
                                {
                                    "name": "action",
                                    "optional": false,
                                    "type": "\"clear\" | \"response\" | \"command\"",
                                    "description": "Custom listener."
                                },
                                {
                                    "name": "fn",
                                    "optional": false,
                                    "type": "any",
                                    "description": "Custom listener."
                                }
                            ],
                            "returnType": "void",
                            "description": "Method to detach an event listener from a specific action."
                        }
                    ]
                }
            }
        }
    },
    "tieredmenu": {
        "description": "TieredMenu is an input component that provides real-time suggestions when being typed.\n\n[Live Demo](https://www.primereact.org/tieredmenu/)",
        "components": {
            "TieredMenu": {
                "description": "TieredMenu is an input component that provides real-time suggestions when being typed.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "toggle",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Toggles the visibility of the popup menu."
                        },
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in TieredMenu component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "values": [
                        {
                            "name": "model",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuItem[]",
                            "default": "",
                            "description": "An array of menuitems."
                        },
                        {
                            "name": "popup",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if menu would displayed as a popup."
                        },
                        {
                            "name": "autoZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to automatically manage layering."
                        },
                        {
                            "name": "breakpoint",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "The breakpoint to define the maximum width boundary when responsiveness is enabled."
                        },
                        {
                            "name": "scrollHeight",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "400px",
                            "description": "Maximum height of the options panel on responsive mode."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Whether to automatically manage layering."
                        },
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "null | HTMLElement | \"self\"",
                            "default": "document.body",
                            "description": "DOM element instance where the overlay panel should be mounted. Valid values are any DOM Element and 'self'. The self value is used to render a component where it is located."
                        },
                        {
                            "name": "transitionOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSTransitionProps",
                            "default": "",
                            "description": "The properties of CSSTransition can be customized, except for \"nodeRef\" and \"in\" properties."
                        },
                        {
                            "name": "submenuIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<TieredMenuProps>",
                            "default": "",
                            "description": "Icon of the submenu."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "TieredMenuPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onShow",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a popup menu is shown."
                        },
                        {
                            "name": "onHide",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a popup menu is hidden."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "TieredMenuPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "TieredMenuProps"
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "TieredMenuState"
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "TieredMenuContext"
                        }
                    ],
                    "callbacks": []
                },
                "TieredMenuPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "TieredMenuPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "menu",
                            "optional": true,
                            "readonly": false,
                            "type": "TieredMenuPassThroughType<HTMLAttributes<HTMLUListElement>>",
                            "description": "Uses to pass attributes to the list's DOM element."
                        },
                        {
                            "name": "menuitem",
                            "optional": true,
                            "readonly": false,
                            "type": "TieredMenuPassThroughType<HTMLAttributes<HTMLLIElement>>",
                            "description": "Uses to pass attributes to the list item's DOM element."
                        },
                        {
                            "name": "action",
                            "optional": true,
                            "readonly": false,
                            "type": "TieredMenuPassThroughType<HTMLAttributes<HTMLAnchorElement>>",
                            "description": "Uses to pass attributes to the action's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "TieredMenuPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the icon's DOM element."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "TieredMenuPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the label's DOM element."
                        },
                        {
                            "name": "submenuIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "TieredMenuPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the submenu icon's DOM element."
                        },
                        {
                            "name": "separator",
                            "optional": true,
                            "readonly": false,
                            "type": "TieredMenuPassThroughType<HTMLAttributes<HTMLLIElement>>",
                            "description": "Uses to pass attributes to the separator's DOM element."
                        }
                    ],
                    "callbacks": []
                },
                "TieredMenuState": {
                    "description": "Defines current inline state in TieredMenu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "attributeSelector",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Current attributeSelector visible state as a string."
                        },
                        {
                            "name": "visible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current visible state as a boolean."
                        }
                    ],
                    "callbacks": []
                },
                "TieredMenuContext": {
                    "description": "Defines current options in TieredMenu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current active state of menuitem as a boolean."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "TieredMenuPassThroughType": {
                    "values": "PassThroughType<T, TieredMenuPassThroughMethodOptions>"
                }
            }
        }
    },
    "timeline": {
        "description": "Timeline visualizes a series of chained events.\n\n[Live Demo](https://www.primereact.org/timeline/)",
        "components": {
            "Timeline": {
                "description": "Timeline visualizes a series of chained events.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in Timeline component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "values": [
                        {
                            "name": "align",
                            "optional": true,
                            "readonly": false,
                            "type": "\"alternate\" | \"left\" | \"top\" | \"bottom\" | \"right\"",
                            "default": "left",
                            "description": "Position of the timeline bar relative to the content. Valid values are \"left\", \"right for vertical layout and \"top\", \"bottom\" for horizontal layout."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Template of the content."
                        },
                        {
                            "name": "dataKey",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Name of the field that uniquely identifies a record in the data. Should be a unique business key to prevent re-rendering."
                        },
                        {
                            "name": "layout",
                            "optional": true,
                            "readonly": false,
                            "type": "\"horizontal\" | \"vertical\"",
                            "default": "vertical",
                            "description": "Orientation of the timeline, valid values are \"vertical\" and \"horizontal\"."
                        },
                        {
                            "name": "marker",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Template content allows placing a custom event marker instead of the default one."
                        },
                        {
                            "name": "opposite",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Template content to be placed at the other side of the bar."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "An array of events to display."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "TimelinePassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "TimelinePassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "Timeline"
                        }
                    ],
                    "callbacks": []
                },
                "TimelinePassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "TimelinePassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "event",
                            "optional": true,
                            "readonly": false,
                            "type": "TimelinePassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the event's DOM element."
                        },
                        {
                            "name": "opposite",
                            "optional": true,
                            "readonly": false,
                            "type": "TimelinePassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the opposite's DOM element."
                        },
                        {
                            "name": "separator",
                            "optional": true,
                            "readonly": false,
                            "type": "TimelinePassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the separator's DOM element."
                        },
                        {
                            "name": "marker",
                            "optional": true,
                            "readonly": false,
                            "type": "TimelinePassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the marker's DOM element."
                        },
                        {
                            "name": "connector",
                            "optional": true,
                            "readonly": false,
                            "type": "TimelinePassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the connector's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "TimelinePassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the content's DOM element."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "TimelinePassThroughType": {
                    "values": "PassThroughType<T, TimelinePassThroughMethodOptions>"
                }
            }
        }
    },
    "toast": {
        "description": "Toast is used to display messages in an overlay.\n\n[Live Demo](https://www.primereact.org/toast/)",
        "components": {
            "Toast": {
                "description": "Toast is used to display messages in an overlay.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "show",
                            "parameters": [
                                {
                                    "name": "message",
                                    "type": "ToastMessage | ToastMessage[]",
                                    "description": "Message to show"
                                }
                            ],
                            "returnType": "void",
                            "description": "Used to show the message."
                        },
                        {
                            "name": "clear",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Clears the all messages from Toast."
                        },
                        {
                            "name": "replace",
                            "parameters": [
                                {
                                    "name": "message",
                                    "type": "ToastMessage | ToastMessage[]",
                                    "description": "Message to replace"
                                }
                            ],
                            "returnType": "void",
                            "description": "Used to add new messages after removing all old messages."
                        },
                        {
                            "name": "remove",
                            "parameters": [
                                {
                                    "name": "message",
                                    "type": "ToastMessage | ToastMessage[]",
                                    "description": "Message to remove"
                                }
                            ],
                            "returnType": "void",
                            "description": "Used to remove messages."
                        },
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in Toast component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "values": [
                        {
                            "name": "baseZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to add to initial layering of PrimeReact components which start from 1000."
                        },
                        {
                            "name": "position",
                            "optional": true,
                            "readonly": false,
                            "type": "\"center\" | \"bottom-right\" | \"bottom-left\" | \"top-right\" | \"top-left\" | \"top-center\" | \"bottom-center\"",
                            "default": "top-right",
                            "description": "Position of the toast in viewport, valid values are 'center', 'top-center', 'top-left', 'top-right', 'bottom-center', 'bottom-left', 'bottom-right'."
                        },
                        {
                            "name": "transitionOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSTransitionProps",
                            "default": "",
                            "description": "The properties of CSSTransition can be customized, except for \"nodeRef\" and \"in\" properties."
                        },
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "null | HTMLElement | \"self\"",
                            "default": "self",
                            "description": "DOM element instance where the component should be mounted. Valid values are any DOM Element and 'self'. The self value is used to render a component where it is located."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "ToastPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onClick",
                            "parameters": [
                                {
                                    "name": "message",
                                    "optional": false,
                                    "type": "ToastMessage",
                                    "description": "Clicked message"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when an active tab is collapsed by clicking on the header."
                        },
                        {
                            "name": "onRemove",
                            "parameters": [
                                {
                                    "name": "message",
                                    "optional": false,
                                    "type": "ToastMessage",
                                    "description": "Removed message"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a message is removed."
                        },
                        {
                            "name": "onShow",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when message becomes visible."
                        },
                        {
                            "name": "onHide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when message becomes hidden."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "ToastPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ToastProps"
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "ToastState"
                        }
                    ],
                    "callbacks": []
                },
                "ToastPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ToastPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "message",
                            "optional": true,
                            "readonly": false,
                            "type": "ToastPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the message's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "ToastPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "ToastPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the icon's DOM element."
                        },
                        {
                            "name": "text",
                            "optional": true,
                            "readonly": false,
                            "type": "ToastPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the text's DOM element."
                        },
                        {
                            "name": "summary",
                            "optional": true,
                            "readonly": false,
                            "type": "ToastPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the summary's DOM element."
                        },
                        {
                            "name": "detail",
                            "optional": true,
                            "readonly": false,
                            "type": "ToastPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the detail's DOM element."
                        },
                        {
                            "name": "button",
                            "optional": true,
                            "readonly": false,
                            "type": "ToastPassThroughType<HTMLAttributes<HTMLButtonElement>>",
                            "description": "Uses to pass attributes to the button's DOM element."
                        },
                        {
                            "name": "buttonIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ToastPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the button icon's DOM element."
                        }
                    ],
                    "callbacks": []
                },
                "ToastMessageOptions": {
                    "description": "Defines message options in Toast component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "severity",
                            "optional": true,
                            "readonly": false,
                            "type": "\"error\" | \"success\" | \"info\" | \"warn\"",
                            "description": "Severity level of the message."
                        },
                        {
                            "name": "summary",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Summary content of the message."
                        },
                        {
                            "name": "detail",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "description": "Detail content of the message."
                        },
                        {
                            "name": "closable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether the message can be closed manually using the close icon."
                        },
                        {
                            "name": "life",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "description": "Delay in milliseconds to close the message automatically."
                        },
                        {
                            "name": "group",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Key of the Toast to display the message."
                        },
                        {
                            "name": "styleClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "description": "Style class of the message."
                        },
                        {
                            "name": "contentStyleClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "description": "Style class of the content."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "ToastPassThroughOptions",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ],
                    "callbacks": []
                },
                "ToastState": {
                    "description": "Defines current inline state in Toast component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "messages",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "description": "Current messages."
                        }
                    ],
                    "callbacks": []
                },
                "ToastMessage": {
                    "description": "Message options for toast component",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "id",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Unique id of the message."
                        },
                        {
                            "name": "severity",
                            "optional": true,
                            "readonly": false,
                            "type": "\"error\" | \"success\" | \"info\" | \"warn\"",
                            "description": "Severity of the message."
                        },
                        {
                            "name": "summary",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "description": "Summary content of the message."
                        },
                        {
                            "name": "detail",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "description": "Detail content of the message."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "description": "Custom content of the message. If enabled, summary and details properties are ignored."
                        },
                        {
                            "name": "closable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether the message can be closed manually using the close icon."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<ToastProps>",
                            "description": "Icon of the message."
                        },
                        {
                            "name": "closeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<ToastProps>",
                            "description": "Icon of the close button."
                        },
                        {
                            "name": "sticky",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "When enabled, message is not removed automatically."
                        },
                        {
                            "name": "life",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "description": "Delay in milliseconds to close the message automatically."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the message."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "description": "Inline style of the message."
                        },
                        {
                            "name": "contentClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the message content."
                        },
                        {
                            "name": "contentStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "description": "Inline style of the message content."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "Omit<ToastPassThroughOptions, \"message\">",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ToastPassThroughType": {
                    "values": "PassThroughType<T, ToastPassThroughMethodOptions>"
                }
            }
        }
    },
    "togglebutton": {
        "description": "ToggleButton is used to select a boolean value using a button.\n\n[Live Demo](https://www.primereact.org/togglebutton/)",
        "components": {
            "ToggleButton": {
                "description": "ToggleButton is used to select a boolean value using a button.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "focus",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Used to focus the component."
                        },
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in ToggleButton component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "values": [
                        {
                            "name": "checked",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Specifies the on/off state of the button."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "iconPos",
                            "optional": true,
                            "readonly": false,
                            "type": "\"left\" | \"right\"",
                            "default": "left",
                            "description": "Position of the icon, valid values are \"left\" and \"right\"."
                        },
                        {
                            "name": "offIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<ToggleButtonProps>",
                            "default": "",
                            "description": "Icon for the off state."
                        },
                        {
                            "name": "offLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "no",
                            "description": "Label for the off state."
                        },
                        {
                            "name": "onIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<ToggleButtonProps>",
                            "default": "",
                            "description": "Icon for the on state."
                        },
                        {
                            "name": "onLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "yes",
                            "description": "Label for the on state."
                        },
                        {
                            "name": "tooltip",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Content of the tooltip."
                        },
                        {
                            "name": "tooltipOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "TooltipOptions",
                            "default": "",
                            "description": "Configuration of the tooltip, refer to the tooltip documentation for more information."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "ToggleButtonPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onBlur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FocusEvent<HTMLElement, Element>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when autocomplete loses focus."
                        },
                        {
                            "name": "onChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "ToggleButtonChangeEvent",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on value change."
                        },
                        {
                            "name": "onFocus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FocusEvent<HTMLElement, Element>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when autocomplete gets focus."
                        }
                    ]
                }
            }
        },
        "events": {
            "description": "Defines the custom events used by the component's callbacks.",
            "values": {
                "ToggleButtonChangeEvent": {
                    "description": "Custom change event.",
                    "relatedProp": "onChange",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Browser event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Value as the checked state."
                        },
                        {
                            "name": "target",
                            "optional": false,
                            "readonly": false,
                            "type": "ToggleButtonChangeTargetOptions",
                            "description": "Target element."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "ToggleButtonPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ToggleButtonProps"
                        }
                    ],
                    "callbacks": []
                },
                "ToggleButtonPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ToggleButtonPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "ToggleButtonPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the icon's DOM element."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "ToggleButtonPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the label's DOM element."
                        },
                        {
                            "name": "tooltip",
                            "optional": true,
                            "readonly": false,
                            "type": "TooltipPassThroughOptions",
                            "description": "Uses to pass attributes tooltip's DOM element."
                        }
                    ],
                    "callbacks": []
                },
                "ToggleButtonChangeTargetOptions": {
                    "description": "Custom toggle button change target options",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "The name of the element."
                        },
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Unique identifier of the element."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Collapsed state as a boolean."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ToggleButtonPassThroughType": {
                    "values": "PassThroughType<T, ToggleButtonPassThroughMethodOptions>"
                }
            }
        }
    },
    "toolbar": {
        "description": "Toolbar is a grouping component for buttons and other content.\n\n[Live Demo](https://www.primereact.org/toolbar/)",
        "components": {
            "Toolbar": {
                "description": "Toolbar is a grouping component for buttons and other content.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in Toolbar component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "values": [
                        {
                            "name": "left",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "The template of left section.",
                            "deprecated": "use start instead"
                        },
                        {
                            "name": "right",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "The template of right section.",
                            "deprecated": "use end instead"
                        },
                        {
                            "name": "start",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "The template of start section."
                        },
                        {
                            "name": "center",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "The template of center section."
                        },
                        {
                            "name": "end",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "The template of end section."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "ToolbarPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "ToolbarPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ToolbarProps"
                        }
                    ],
                    "callbacks": []
                },
                "ToolbarPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ToolbarPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "start",
                            "optional": true,
                            "readonly": false,
                            "type": "ToolbarPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the start's DOM element."
                        },
                        {
                            "name": "center",
                            "optional": true,
                            "readonly": false,
                            "type": "ToolbarPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the center's DOM element."
                        },
                        {
                            "name": "end",
                            "optional": true,
                            "readonly": false,
                            "type": "ToolbarPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the right's DOM element."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ToolbarPassThroughType": {
                    "values": "PassThroughType<T, ToolbarPassThroughMethodOptions>"
                }
            }
        }
    },
    "tooltip": {
        "description": "Tooltip functionality is integrated within various PrimeReact components.\n\n[Live Demo](https://www.primereact.org/tooltip/)",
        "components": {
            "Tooltip": {
                "description": "Tooltip functionality is integrated within various PrimeReact components.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "updateTargetEvents",
                            "parameters": [
                                {
                                    "name": "target",
                                    "type": "undefined | HTMLElement",
                                    "description": "Target element or if undefined will use current target."
                                }
                            ],
                            "returnType": "void",
                            "description": "Used to reload target events. In some cases, the target element can be hidden initially. Later, when this element becomes visible, it will be necessary to bind tooltip events to this element."
                        },
                        {
                            "name": "loadTargetEvents",
                            "parameters": [
                                {
                                    "name": "target",
                                    "type": "undefined | HTMLElement",
                                    "description": "Target element or if undefined will use current target."
                                }
                            ],
                            "returnType": "void",
                            "description": "Used to load target events."
                        },
                        {
                            "name": "unloadTargetEvents",
                            "parameters": [
                                {
                                    "name": "target",
                                    "type": "undefined | HTMLElement",
                                    "description": "Target element or if undefined will use current target."
                                }
                            ],
                            "returnType": "void",
                            "description": "Used to unload target events."
                        },
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLElement",
                            "description": "Used to get container element."
                        },
                        {
                            "name": "getTarget",
                            "parameters": [],
                            "returnType": "null | HTMLElement",
                            "description": "Used to get target element."
                        },
                        {
                            "name": "show",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "TooltipEvent",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "null",
                            "description": "Used to show the tooltip."
                        },
                        {
                            "name": "hide",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "TooltipEvent",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "null",
                            "description": "Used to hide the tooltip."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in Tooltip component. In addition to these, all properties of TooltipOptions can be used in this component.",
                    "values": [
                        {
                            "name": "id",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Unique identifier of the element."
                        },
                        {
                            "name": "target",
                            "optional": true,
                            "readonly": false,
                            "type": "string | string[] | HTMLElement",
                            "default": "",
                            "description": "Target element on global tooltip option."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Content to be displayed in tooltip."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "TooltipPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "null | HTMLElement | \"self\"",
                            "default": "document.body",
                            "description": "DOM element instance where the overlay panel should be mounted. Valid values are any DOM Element and 'self'. The self value is used to render a component where it is located."
                        },
                        {
                            "name": "at",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines which position on the target element to align the positioned tooltip."
                        },
                        {
                            "name": "autoHide",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to hide tooltip when hovering over tooltip content."
                        },
                        {
                            "name": "autoZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to automatically manage layering."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the tooltip."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the tooltip should be hidden."
                        },
                        {
                            "name": "event",
                            "optional": true,
                            "readonly": false,
                            "type": "\"both\" | \"focus\" | \"hover\"",
                            "default": "hover",
                            "description": "Event to show the tooltip."
                        },
                        {
                            "name": "hideDelay",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Delay to hide the tooltip in milliseconds."
                        },
                        {
                            "name": "hideEvent",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "mouseleave",
                            "description": "Event to hide the tooltip if the event property is empty."
                        },
                        {
                            "name": "mouseTrack",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the tooltip will follow the mouse."
                        },
                        {
                            "name": "mouseTrackLeft",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "5",
                            "description": "Defines left position of the tooltip in relation to the mouse when the mouseTrack is enabled."
                        },
                        {
                            "name": "mouseTrackTop",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "5",
                            "description": "Defines top position of the tooltip in relation to the mouse when the mouseTrack is enabled."
                        },
                        {
                            "name": "my",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines which position on the tooltip being positioned to align with the target element."
                        },
                        {
                            "name": "position",
                            "optional": true,
                            "readonly": false,
                            "type": "\"left\" | \"top\" | \"bottom\" | \"right\" | \"mouse\"",
                            "default": "right",
                            "description": "Position of the tooltip."
                        },
                        {
                            "name": "showDelay",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Delay to show the tooltip in milliseconds."
                        },
                        {
                            "name": "showEvent",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "mouseenter",
                            "description": "Event to show the tooltip if the event property is empty."
                        },
                        {
                            "name": "showOnDisabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to show tooltip for disabled elements."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Style of the tooltip."
                        },
                        {
                            "name": "updateDelay",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Delay to update the tooltip in milliseconds."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onBeforeShow",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TooltipEvent",
                                    "description": "Browser event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke before the tooltip is shown."
                        },
                        {
                            "name": "onBeforeHide",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TooltipEvent",
                                    "description": "Browser event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke before the tooltip is hidden."
                        },
                        {
                            "name": "onShow",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TooltipEvent",
                                    "description": "Browser event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the tooltip is shown."
                        },
                        {
                            "name": "onHide",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TooltipEvent",
                                    "description": "Browser event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the tooltip is hidden."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "TooltipPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "TooltipProps"
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "TooltipState"
                        }
                    ],
                    "callbacks": []
                },
                "TooltipPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "TooltipPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "arrow",
                            "optional": true,
                            "readonly": false,
                            "type": "TooltipPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the arrow's DOM element."
                        },
                        {
                            "name": "text",
                            "optional": true,
                            "readonly": false,
                            "type": "TooltipPassThroughType<HTMLAttributes<HTMLLIElement>>",
                            "description": "Uses to pass attributes to the text's DOM element."
                        }
                    ],
                    "callbacks": []
                },
                "TooltipState": {
                    "description": "Defines current inline state in Tooltip component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "visible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current visible state as a boolean."
                        },
                        {
                            "name": "position",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Current position state as a string."
                        },
                        {
                            "name": "className",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Current className state as a string."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "TooltipPassThroughType": {
                    "values": "PassThroughType<T, TooltipPassThroughMethodOptions>"
                }
            }
        }
    },
    "tooltipoptions": {
        "description": "This module contains the common options and events of Tooltip.",
        "model": {
            "TooltipOptions": {
                "description": "Defines valid properties of TooltipOptions.",
                "props": {
                    "description": "",
                    "values": [
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "null | HTMLElement | \"self\"",
                            "default": "document.body",
                            "description": "DOM element instance where the overlay panel should be mounted. Valid values are any DOM Element and 'self'. The self value is used to render a component where it is located."
                        },
                        {
                            "name": "at",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines which position on the target element to align the positioned tooltip."
                        },
                        {
                            "name": "autoHide",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to hide tooltip when hovering over tooltip content."
                        },
                        {
                            "name": "autoZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to automatically manage layering."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the tooltip."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the tooltip should be hidden."
                        },
                        {
                            "name": "event",
                            "optional": true,
                            "readonly": false,
                            "type": "\"both\" | \"focus\" | \"hover\"",
                            "default": "hover",
                            "description": "Event to show the tooltip."
                        },
                        {
                            "name": "hideDelay",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Delay to hide the tooltip in milliseconds."
                        },
                        {
                            "name": "hideEvent",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "mouseleave",
                            "description": "Event to hide the tooltip if the event property is empty."
                        },
                        {
                            "name": "mouseTrack",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the tooltip will follow the mouse."
                        },
                        {
                            "name": "mouseTrackLeft",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "5",
                            "description": "Defines left position of the tooltip in relation to the mouse when the mouseTrack is enabled."
                        },
                        {
                            "name": "mouseTrackTop",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "5",
                            "description": "Defines top position of the tooltip in relation to the mouse when the mouseTrack is enabled."
                        },
                        {
                            "name": "my",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines which position on the tooltip being positioned to align with the target element."
                        },
                        {
                            "name": "position",
                            "optional": true,
                            "readonly": false,
                            "type": "\"left\" | \"top\" | \"bottom\" | \"right\" | \"mouse\"",
                            "default": "right",
                            "description": "Position of the tooltip."
                        },
                        {
                            "name": "showDelay",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Delay to show the tooltip in milliseconds."
                        },
                        {
                            "name": "showEvent",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "mouseenter",
                            "description": "Event to show the tooltip if the event property is empty."
                        },
                        {
                            "name": "showOnDisabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to show tooltip for disabled elements."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Style of the tooltip."
                        },
                        {
                            "name": "updateDelay",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Delay to update the tooltip in milliseconds."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "TooltipPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                }
            },
            "TooltipHTMLAttributes": {
                "description": "In addition to React.HTMLAttributes, the following attributes can be used on any HTMLElement if the page has a PrimeReact  tooltip  component.",
                "props": {
                    "description": "",
                    "values": [
                        {
                            "name": "data-pr-tooltip",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Content to be displayed in tooltip."
                        },
                        {
                            "name": "data-pr-disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the tooltip should be hidden."
                        },
                        {
                            "name": "data-pr-classname",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the tooltip."
                        },
                        {
                            "name": "data-pr-position",
                            "optional": true,
                            "readonly": false,
                            "type": "\"left\" | \"top\" | \"bottom\" | \"right\" | \"mouse\"",
                            "default": "right",
                            "description": "Position of the tooltip."
                        },
                        {
                            "name": "data-pr-my",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines which position on the tooltip being positioned to align with the target element."
                        },
                        {
                            "name": "data-pr-at",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines which position on the target element to align the positioned tooltip."
                        },
                        {
                            "name": "data-pr-event",
                            "optional": true,
                            "readonly": false,
                            "type": "\"both\" | \"focus\" | \"hover\"",
                            "default": "hover",
                            "description": "Event to show the tooltip."
                        },
                        {
                            "name": "data-pr-showevent",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "mouseenter",
                            "description": "Event to show the tooltip if the event property is empty."
                        },
                        {
                            "name": "data-pr-hideevent",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "mouseleave",
                            "description": "Event to hide the tooltip if the event property is empty."
                        },
                        {
                            "name": "data-pr-mousetrack",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the tooltip will follow the mouse."
                        },
                        {
                            "name": "data-pr-mousetracktop",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "5",
                            "description": "Defines top position of the tooltip in relation to the mouse when the mouseTrack is enabled."
                        },
                        {
                            "name": "data-pr-mousetrackleft",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "5",
                            "description": "Defines left position of the tooltip in relation to the mouse when the mouseTrack is enabled."
                        },
                        {
                            "name": "data-pr-showdelay",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Delay to show the tooltip in milliseconds."
                        },
                        {
                            "name": "data-pr-updatedelay",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Delay to update the tooltip in milliseconds."
                        },
                        {
                            "name": "data-pr-hidedelay",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Delay to hide the tooltip in milliseconds."
                        },
                        {
                            "name": "data-pr-autohide",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to hide tooltip when hovering over tooltip content."
                        },
                        {
                            "name": "data-pr-showondisabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to show tooltip for disabled elements."
                        }
                    ]
                }
            }
        },
        "events": {
            "description": "Defines the custom events used by the component's callbacks.",
            "values": {
                "TooltipEvent": {
                    "description": "Custom tooltip event",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Browser event"
                        },
                        {
                            "name": "target",
                            "optional": false,
                            "readonly": false,
                            "type": "HTMLElement",
                            "description": "Target element."
                        }
                    ]
                }
            }
        }
    },
    "tree": {
        "description": "Tree is used to display hierarchical data.\n\n[Live Demo](https://www.primereact.org/tree/)",
        "components": {
            "Tree": {
                "description": "Tree is used to display hierarchical data.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "filter",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "T",
                                    "description": "The filter value"
                                }
                            ],
                            "returnType": "void",
                            "description": "Filters the data."
                        },
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in TreeProps component.",
                    "values": [
                        {
                            "name": "id",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Unique identifier of the element."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeNode[]",
                            "default": "",
                            "description": "An array of treenodes."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "selectionMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"multiple\" | \"checkbox\" | \"single\"",
                            "default": "",
                            "description": "Defines the selection mode, valid values \"single\", \"multiple\", and \"checkbox\"."
                        },
                        {
                            "name": "selectionKeys",
                            "optional": true,
                            "readonly": false,
                            "type": "null | string | TreeMultipleSelectionKeys | TreeCheckboxSelectionKeys",
                            "default": "",
                            "description": "A single or an array of keys to control the selection state."
                        },
                        {
                            "name": "contextMenuSelectionKey",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "A single key to control the selection with the context menu."
                        },
                        {
                            "name": "expandedKeys",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeExpandedKeysType",
                            "default": "",
                            "description": "An array of keys to represent the state of the tree expansion state in controlled mode."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "contentStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the tree content."
                        },
                        {
                            "name": "contentClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the tree content."
                        },
                        {
                            "name": "metaKeySelection",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Defines how multiple items can be selected, when true metaKey needs to be pressed to select or unselect an item and when set to false selection of each item can be toggled individually. On touch enabled devices, metaKeySelection is turned off automatically."
                        },
                        {
                            "name": "propagateSelectionUp",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether checkbox selections propagate to ancestor nodes."
                        },
                        {
                            "name": "propagateSelectionDown",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether checkbox selections propagate to descendant nodes."
                        },
                        {
                            "name": "loading",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display loading indicator."
                        },
                        {
                            "name": "loadingIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<TreeProps>",
                            "default": "",
                            "description": "Icon to display when tree is loading."
                        },
                        {
                            "name": "checkboxIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<TreeProps>",
                            "default": "",
                            "description": "Icon to display in the checkbox."
                        },
                        {
                            "name": "collapseIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<TreeProps>",
                            "default": "",
                            "description": "Icon of an expanded tab."
                        },
                        {
                            "name": "expandIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<TreeProps>",
                            "default": "",
                            "description": "Icon of an collapsed tab."
                        },
                        {
                            "name": "dragdropScope",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "false",
                            "description": "Unique key to enable dragdrop functionality."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "The template of header."
                        },
                        {
                            "name": "footer",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "The template of header."
                        },
                        {
                            "name": "filterTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Template of filter element."
                        },
                        {
                            "name": "showHeader",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show the header or not."
                        },
                        {
                            "name": "filter",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified, displays an input field to filter the items."
                        },
                        {
                            "name": "filterIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<TreeProps>",
                            "default": "",
                            "description": "Icon of the filter."
                        },
                        {
                            "name": "filterValue",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "When filtering is enabled, the value of input field."
                        },
                        {
                            "name": "filterBy",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "label",
                            "description": "When filtering is enabled, filterBy decides which field or fields (comma separated) to search against."
                        },
                        {
                            "name": "filterMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"strict\" | \"lenient\"",
                            "default": "lenient",
                            "description": "Mode for filtering valid values are \"lenient\" and \"strict\". Default is lenient."
                        },
                        {
                            "name": "filterPlaceholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Placeholder text to show when filter input is empty."
                        },
                        {
                            "name": "filterLocale",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "undefined",
                            "description": "Locale to use in filtering. The default locale is the host environment's current locale."
                        },
                        {
                            "name": "togglerTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Template of toggler element."
                        },
                        {
                            "name": "nodeTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "false",
                            "description": "Template of node element."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "TreePassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onSelectionChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TreeSelectionEvent",
                                    "description": "Custom select event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when selection changes."
                        },
                        {
                            "name": "onContextMenuSelectionChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TreeSelectionEvent",
                                    "description": "Custom select event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when selection changes with a context menu."
                        },
                        {
                            "name": "onSelect",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TreeEventNodeEvent",
                                    "description": "Custom node event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is selected."
                        },
                        {
                            "name": "onUnselect",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TreeEventNodeEvent",
                                    "description": "Custom node event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is unselected."
                        },
                        {
                            "name": "onExpand",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TreeEventNodeEvent",
                                    "description": "Custom node event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is expanded."
                        },
                        {
                            "name": "onCollapse",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TreeEventNodeEvent",
                                    "description": "Custom node event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is collapsed."
                        },
                        {
                            "name": "onToggle",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TreeExpandedEvent",
                                    "description": "Custom expand event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is toggled."
                        },
                        {
                            "name": "onDragDrop",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TreeDragDropEvent",
                                    "description": "Custom dragdrop event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is selected."
                        },
                        {
                            "name": "onContextMenu",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TreeEventNodeEvent",
                                    "description": "Custom node event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is selected with a context menu."
                        },
                        {
                            "name": "onFilterValueChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TreeFilterValueChangeEvent",
                                    "description": "Custom filter value change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when filter value changes."
                        },
                        {
                            "name": "onNodeClick",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TreeNodeClickEvent",
                                    "description": "Custom click event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the node is clicked."
                        },
                        {
                            "name": "onNodeDoubleClick",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TreeNodeDoubleClickEvent",
                                    "description": "Custom doubleclick event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the node is double-clicked."
                        }
                    ]
                }
            }
        },
        "events": {
            "description": "Defines the custom events used by the component's callbacks.",
            "values": {
                "TreeExpandedEvent": {
                    "description": "Custom tree event.",
                    "relatedProp": "onToggle",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Browser event."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeExpandedKeysType",
                            "description": "Expanded node key."
                        }
                    ]
                },
                "TreeSelectionEvent": {
                    "description": "Custom tree event.",
                    "relatedProp": "onSelectionChange",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Browser event."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "null | string | TreeMultipleSelectionKeys | TreeCheckboxSelectionKeys",
                            "description": "Selected node key(s)."
                        }
                    ]
                },
                "TreeEventNodeEvent": {
                    "description": "Custom tree event.",
                    "relatedProp": "onSelect",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Browser event."
                        },
                        {
                            "name": "node",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeNode",
                            "description": "Unselected node instance."
                        }
                    ]
                },
                "TreeDragDropEvent": {
                    "description": "Custom dragdrop event.",
                    "relatedProp": "onDragDrop",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Browser event."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeNode[]",
                            "description": "New value after the dragdrop."
                        },
                        {
                            "name": "dragNode",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeNode",
                            "description": "The node that is being dragged."
                        },
                        {
                            "name": "dropNode",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeNode",
                            "description": "The node that is being dropped on."
                        },
                        {
                            "name": "dropIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "The index of the drop."
                        }
                    ]
                },
                "TreeFilterValueChangeEvent": {
                    "description": "Custom filter value change event.",
                    "relatedProp": "onFilterValueChange",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "FormEvent<HTMLInputElement>",
                            "description": "Browser event."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "The filtered value."
                        }
                    ]
                },
                "TreeNodeDoubleClickEvent": {
                    "description": "Custom click event.",
                    "relatedProp": "onNodeDoubleClick",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Browser event"
                        },
                        {
                            "name": "node",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeNode",
                            "description": "The current node"
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "TreePassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeProps"
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeState"
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeContext"
                        }
                    ],
                    "callbacks": []
                },
                "TreePassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "TreePassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "loadingOverlay",
                            "optional": true,
                            "readonly": false,
                            "type": "TreePassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the loading overlay's DOM element."
                        },
                        {
                            "name": "loadingIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "TreePassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the loading icon's DOM element."
                        },
                        {
                            "name": "filterContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "TreePassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the filter container's DOM element."
                        },
                        {
                            "name": "input",
                            "optional": true,
                            "readonly": false,
                            "type": "TreePassThroughType<HTMLAttributes<HTMLInputElement>>",
                            "description": "Uses to pass attributes to the input's DOM element."
                        },
                        {
                            "name": "searchIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "TreePassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the search icon's DOM element."
                        },
                        {
                            "name": "container",
                            "optional": true,
                            "readonly": false,
                            "type": "TreePassThroughType<HTMLAttributes<HTMLUListElement>>",
                            "description": "Uses to pass attributes to the container's DOM element."
                        },
                        {
                            "name": "node",
                            "optional": true,
                            "readonly": false,
                            "type": "TreePassThroughType<HTMLAttributes<HTMLLIElement>>",
                            "description": "Uses to pass attributes to the node's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "TreePassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "toggler",
                            "optional": true,
                            "readonly": false,
                            "type": "TreePassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the toggler's DOM element."
                        },
                        {
                            "name": "togglerIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "TreePassThroughType<HTMLAttributes<HTMLButtonElement>>",
                            "description": "Uses to pass attributes to the toggler icon's DOM element."
                        },
                        {
                            "name": "checkboxContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "TreePassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the checkbox container's DOM element."
                        },
                        {
                            "name": "checkbox",
                            "optional": true,
                            "readonly": false,
                            "type": "TreePassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the checkbox's DOM element."
                        },
                        {
                            "name": "checkboxIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "TreePassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the checkbox icon's DOM element."
                        },
                        {
                            "name": "nodeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "TreePassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the node icon's DOM element."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "TreePassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the label's DOM element."
                        },
                        {
                            "name": "subgroup",
                            "optional": true,
                            "readonly": false,
                            "type": "TreePassThroughType<HTMLAttributes<HTMLUListElement>>",
                            "description": "Uses to pass attributes to the subgroup's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "TreePassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "footer",
                            "optional": true,
                            "readonly": false,
                            "type": "TreePassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "droppoint",
                            "optional": true,
                            "readonly": false,
                            "type": "TreePassThroughType<HTMLAttributes<HTMLLIElement>>",
                            "description": "Uses to pass attributes to the header's DOM element."
                        }
                    ],
                    "callbacks": []
                },
                "TreeState": {
                    "description": "Defines current inline state in Tree component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "expandedKeys",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeExpandedKeysType",
                            "description": "Current expanded keys state."
                        },
                        {
                            "name": "filterValue",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Current filter value state as a string."
                        }
                    ],
                    "callbacks": []
                },
                "TreeContext": {
                    "description": "Defines current options in Tree component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "expanded",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current expanded state of the node as a boolean."
                        },
                        {
                            "name": "selected",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current selected state of the node as a boolean."
                        },
                        {
                            "name": "checked",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current checked state of the node as a boolean."
                        }
                    ],
                    "callbacks": []
                },
                "TreeHeaderTemplateOptions": {
                    "description": "Custom tree header template options",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "filterContainerClassName",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the filter container element."
                        },
                        {
                            "name": "filterIconClasssName",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the filter icon element."
                        },
                        {
                            "name": "filterInput",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeFilterInputOptions",
                            "description": "The options for the filter input element."
                        },
                        {
                            "name": "filterElement",
                            "optional": false,
                            "readonly": false,
                            "type": "Element",
                            "description": "The JSX element of the filter input."
                        },
                        {
                            "name": "element",
                            "optional": false,
                            "readonly": false,
                            "type": "Element",
                            "description": "The JSX element of the tree header."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeProps",
                            "description": "The props of the tree header component."
                        }
                    ],
                    "callbacks": []
                },
                "TreeFilterInputOptions": {
                    "description": "Custom tree filter input options",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "className",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the tree filter input element."
                        }
                    ],
                    "callbacks": [
                        {
                            "name": "onKeyDown",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "KeyboardEvent<HTMLInputElement>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback function to be invoked when the keydown event."
                        },
                        {
                            "name": "onChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "KeyboardEvent<HTMLInputElement>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback function to be invoked when the change event."
                        }
                    ]
                },
                "TreeNodeTemplateOptions": {
                    "description": "Custom tree node template options",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "className",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the element."
                        },
                        {
                            "name": "element",
                            "optional": false,
                            "readonly": false,
                            "type": "Element",
                            "description": "The JSX element that represents the tree node."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeProps",
                            "description": "The props of the Tree component."
                        },
                        {
                            "name": "expanded",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether the tree node is expanded or not."
                        }
                    ],
                    "callbacks": [
                        {
                            "name": "onTogglerClick",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Browser event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the toggler button is clicked."
                        }
                    ]
                },
                "TreeTogglerTemplateOptions": {
                    "description": "Custom tree toggler template options",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "containerClassName",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the panels container."
                        },
                        {
                            "name": "iconClassName",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Icon classname."
                        },
                        {
                            "name": "element",
                            "optional": false,
                            "readonly": false,
                            "type": "Element",
                            "description": "JSX element to be used as the template options."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeProps",
                            "description": "The props of Tree component"
                        },
                        {
                            "name": "expanded",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether the tree node is expanded or not."
                        }
                    ],
                    "callbacks": [
                        {
                            "name": "onClick",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on click."
                        }
                    ]
                },
                "TreeMultipleSelectionKeys": {
                    "description": "Custom tree multiple selection keys",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean"
                        }
                    ],
                    "callbacks": []
                },
                "TreeCheckboxSelectionKeys": {
                    "description": "Custom tree checkbox selection keys",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeCheckboxSelectionKeyType"
                        }
                    ],
                    "callbacks": []
                },
                "TreeCheckboxSelectionKeyType": {
                    "description": "Custom tree checkbox selection type",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "checked",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether the checkbox is checked or not."
                        },
                        {
                            "name": "partialChecked",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether the checkbox is partially checked or not."
                        }
                    ],
                    "callbacks": []
                },
                "TreeExpandedKeysType": {
                    "description": "Custom tree expanded keys type",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean"
                        }
                    ],
                    "callbacks": []
                },
                "TreeNodeClickEvent": {
                    "description": "Custom click event",
                    "relatedProp": "onNodeClick",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Browser event"
                        },
                        {
                            "name": "node",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeNode",
                            "description": "The current node"
                        }
                    ],
                    "callbacks": [],
                    "extendedBy": "TreeNodeDoubleClickEvent"
                },
                "TreeFilterOptions": {
                    "description": "Custom tree filter options",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "filter",
                            "optional": true,
                            "readonly": false,
                            "type": "Function"
                        },
                        {
                            "name": "reset",
                            "optional": true,
                            "readonly": false,
                            "type": "Function"
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "TreePassThroughType": {
                    "values": "PassThroughType<T, TreePassThroughMethodOptions>"
                }
            }
        }
    },
    "treenode": {
        "description": "This module contains the data interface for nodes in tree components.",
        "model": {
            "TreeNode": {
                "description": "Defines model of TreeNode API.",
                "props": {
                    "description": "",
                    "values": [
                        {
                            "name": "id",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Unique identifier of the element."
                        },
                        {
                            "name": "key",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "",
                            "description": "Unique key of the node."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Label of the node."
                        },
                        {
                            "name": "data",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Data represented by the node."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<TreeNode>",
                            "default": "",
                            "description": "Icon of the node to display next to content."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "TreeNode[]",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the node."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the node."
                        },
                        {
                            "name": "droppable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the node is droppable when dragdrop is enabled."
                        },
                        {
                            "name": "draggable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the node is draggable when dragdrop is enabled."
                        },
                        {
                            "name": "selectable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the node is selectable when selection mode is enabled."
                        },
                        {
                            "name": "leaf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Specifies if the node has children. Used in lazy loading."
                        },
                        {
                            "name": "expanded",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Visibility of node."
                        }
                    ]
                }
            }
        }
    },
    "treeselect": {
        "description": "TreeSelect is a form component to choose from hierarchical data.\n\n[Live Demo](https://www.primereact.org/treeselect/)",
        "components": {
            "TreeSelect": {
                "description": "TreeSelect is a form component to choose from hierarchical data.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "focus",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Used to focus the component."
                        },
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in TreeSelect component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "values": [
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "null | HTMLElement | \"self\"",
                            "default": "document.body",
                            "description": "DOM element instance where the overlay panel should be mounted. Valid values are any DOM Element and 'self'. The self value is used to render a component where it is located."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Used to define a string that labels the component."
                        },
                        {
                            "name": "ariaLabelledBy",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "autoFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should automatically get focus on load."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "closeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<TreeSelectProps>",
                            "default": "",
                            "description": "Icon of the close button."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "display",
                            "optional": true,
                            "readonly": false,
                            "type": "\"comma\" | \"chip\"",
                            "default": "comma",
                            "description": "Defines how the selected items are displayed, valid values are \"comma\" and \"chip\"."
                        },
                        {
                            "name": "dropdownIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<TreeSelectProps>",
                            "default": "",
                            "description": "Icon of the dropdown."
                        },
                        {
                            "name": "emptyMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Text to display when there is no data."
                        },
                        {
                            "name": "expandedKeys",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeSelectExpandedKeysType",
                            "default": "",
                            "description": "An array of keys to represent the state of the treeselect expansion state in controlled mode."
                        },
                        {
                            "name": "filter",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified, displays an input field to filter the items."
                        },
                        {
                            "name": "filterBy",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "label",
                            "description": "When filtering is enabled, filterBy decides which field or fields (comma separated) to search against."
                        },
                        {
                            "name": "filterIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<TreeSelectProps>",
                            "default": "",
                            "description": "Icon of the filter."
                        },
                        {
                            "name": "filterInputAutoFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "When the panel is opened, it specifies that the filter input should focus automatically."
                        },
                        {
                            "name": "filterLocale",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "undefined",
                            "description": "Locale to use in filtering. The default locale is the host environment's current locale."
                        },
                        {
                            "name": "filterMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"strict\" | \"lenient\"",
                            "default": "lenient",
                            "description": "Mode for filtering valid values are \"lenient\" and \"strict\". Default is lenient."
                        },
                        {
                            "name": "filterPlaceholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Placeholder text to show when filter input is empty."
                        },
                        {
                            "name": "filterTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "The template for filter element."
                        },
                        {
                            "name": "filterValue",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "When filtering is enabled, the value of input field."
                        },
                        {
                            "name": "inputId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the input element."
                        },
                        {
                            "name": "inputRef",
                            "optional": true,
                            "readonly": false,
                            "type": "Ref<HTMLInputElement>",
                            "default": "",
                            "description": "Reference of the input element."
                        },
                        {
                            "name": "metaKeySelection",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Defines how multiple items can be selected, when true metaKey needs to be pressed to select or unselect an item and when set to false selection of each item can be toggled individually. On touch enabled devices, metaKeySelection is turned off automatically."
                        },
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Name of the input element."
                        },
                        {
                            "name": "nodeTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "false",
                            "description": "Template of internally used tree component node element."
                        },
                        {
                            "name": "options",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeNode[]",
                            "default": "",
                            "description": "An array of options to display."
                        },
                        {
                            "name": "panelClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the overlay panel element."
                        },
                        {
                            "name": "panelFooterTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "The template of footer."
                        },
                        {
                            "name": "panelHeaderTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "The template of header."
                        },
                        {
                            "name": "panelStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the overlay panel element."
                        },
                        {
                            "name": "placeholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Hint text for the input field."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeSelectPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "resetFilterOnHide",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Resets the filter when the overlay is hidden."
                        },
                        {
                            "name": "scrollHeight",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "400px",
                            "description": "Maximum height of the options panel."
                        },
                        {
                            "name": "selectionMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"multiple\" | \"checkbox\" | \"single\"",
                            "default": "",
                            "description": "Defines the selection mode, valid values \"single\", \"multiple\", and \"checkbox\"."
                        },
                        {
                            "name": "transitionOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSTransitionProps",
                            "default": "",
                            "description": "The properties of CSSTransition can be customized, except for \"nodeRef\" and \"in\" properties."
                        },
                        {
                            "name": "togglerTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Template of toggler element."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "null | string | TreeSelectSelectionKeysType | TreeSelectSelectionKeysType[]",
                            "default": "",
                            "description": "A single or an object of keys to control the selection state."
                        },
                        {
                            "name": "valueTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "The template of selected values."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TreeSelectChangeEvent",
                                    "description": "Custom change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when selection changes."
                        },
                        {
                            "name": "onFilterValueChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TreeSelectFilterValueChangeEvent",
                                    "description": "Custom filter change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when filter value changes."
                        },
                        {
                            "name": "onHide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Used to hide the overlay."
                        },
                        {
                            "name": "onNodeCollapse",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TreeSelectEventNodeEvent",
                                    "description": "Custom change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is collapsed."
                        },
                        {
                            "name": "onNodeExpand",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TreeSelectEventNodeEvent",
                                    "description": "Custom change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is expanded."
                        },
                        {
                            "name": "onNodeSelect",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TreeSelectEventNodeEvent",
                                    "description": "Custom change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is selected."
                        },
                        {
                            "name": "onNodeUnselect",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TreeSelectEventNodeEvent",
                                    "description": "Custom change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is unselected."
                        },
                        {
                            "name": "onShow",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Used to show the overlay."
                        },
                        {
                            "name": "onToggle",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TreeSelectExpandedEvent",
                                    "description": "Custom toggle event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is toggled."
                        }
                    ]
                }
            }
        },
        "events": {
            "description": "Defines the custom events used by the component's callbacks.",
            "values": {
                "TreeSelectChangeEvent": {
                    "description": "Custom change event.",
                    "relatedProp": "onChange",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": true,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "Nullable<string | TreeSelectSelectionKeysType | TreeSelectSelectionKeysType[]>"
                        },
                        {
                            "name": "checked",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean"
                        },
                        {
                            "name": "target",
                            "optional": false,
                            "readonly": false,
                            "type": "FormTarget<string | TreeSelectSelectionKeysType | TreeSelectSelectionKeysType[]>"
                        }
                    ]
                },
                "TreeSelectEventNodeEvent": {
                    "description": "Custom change event.",
                    "relatedProp": "onNodeCollapse",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Browser event"
                        },
                        {
                            "name": "node",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeNode",
                            "description": "Unselected node instance."
                        }
                    ]
                },
                "TreeSelectExpandedEvent": {
                    "description": "Custom toggle event.",
                    "relatedProp": "onToggle",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Browser event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeSelectExpandedKeysType",
                            "description": "Toggled node instance"
                        }
                    ]
                },
                "TreeSelectFilterValueChangeEvent": {
                    "description": "Custom filter change event.",
                    "relatedProp": "onFilterValueChange",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "FormEvent<HTMLInputElement>",
                            "description": "Browser event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "The filtered value"
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "TreeSelectPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeSelectProps"
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeSelectState"
                        }
                    ],
                    "callbacks": []
                },
                "TreeSelectPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeSelectPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "labelContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeSelectPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the label container's DOM element."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeSelectPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the label's DOM element."
                        },
                        {
                            "name": "token",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeSelectPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the token's DOM element."
                        },
                        {
                            "name": "tokenLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeSelectPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the token label's DOM element."
                        },
                        {
                            "name": "trigger",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeSelectPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the trigger's DOM element."
                        },
                        {
                            "name": "triggerIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeSelectPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the trigger icon's DOM element."
                        },
                        {
                            "name": "panel",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeSelectPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the panel's DOM element."
                        },
                        {
                            "name": "wrapper",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeSelectPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the wrapper's DOM element."
                        },
                        {
                            "name": "tree",
                            "optional": true,
                            "readonly": false,
                            "type": "TreePassThroughOptions",
                            "description": "Uses to pass attributes to the trigger's DOM element."
                        },
                        {
                            "name": "emptyMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeSelectPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the empty message's DOM element."
                        },
                        {
                            "name": "hiddenInputWrapper",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeSelectPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the hidden input wrapper's DOM element."
                        },
                        {
                            "name": "hiddenInput",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeSelectPassThroughType<HTMLAttributes<HTMLInputElement>>",
                            "description": "Uses to pass attributes to the hidden input's DOM element."
                        },
                        {
                            "name": "filterContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeSelectPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the filter container's DOM element."
                        },
                        {
                            "name": "filter",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeSelectPassThroughType<HTMLAttributes<HTMLInputElement>>",
                            "description": "uses to pass attributes to the filter's DOM element."
                        },
                        {
                            "name": "filterIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeSelectPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "uses to pass attributes to the filter icon's DOM element."
                        },
                        {
                            "name": "headerIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeSelectPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "uses to pass attributes to the header icon's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeSelectPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "uses to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "closeButton",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeSelectPassThroughType<SVGProps<SVGSVGElement> | HTMLAttributes<HTMLButtonElement>>",
                            "description": "uses to pass attributes to the close button's DOM element."
                        }
                    ],
                    "callbacks": []
                },
                "TreeSelectState": {
                    "description": "Defines current inline state in TreeSelect component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current focused state as a boolean."
                        },
                        {
                            "name": "overlayVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current overlay visible state as a boolean."
                        },
                        {
                            "name": "expandedKeys",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeSelectExpandedKeysType",
                            "description": "Current expanded keys state."
                        },
                        {
                            "name": "filterValue",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Current selected keys state."
                        }
                    ],
                    "callbacks": []
                },
                "TreeSelectPanelHeaderTemplateOptions": {
                    "description": "Custom panel header template options.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "className",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the panel."
                        },
                        {
                            "name": "filterElement",
                            "optional": false,
                            "readonly": false,
                            "type": "Element",
                            "description": "The JSX element that represents the filter of the panel."
                        },
                        {
                            "name": "closeElement",
                            "optional": false,
                            "readonly": false,
                            "type": "Element",
                            "description": "The JSX element that represents the close of the panel."
                        },
                        {
                            "name": "closeElementClassName",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the panel close element."
                        },
                        {
                            "name": "closeIconClassName",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the panel close icon."
                        },
                        {
                            "name": "element",
                            "optional": false,
                            "readonly": false,
                            "type": "Element",
                            "description": "The JSX element that represents the panel."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeSelectProps",
                            "description": "The props of the TreeSelect component."
                        }
                    ],
                    "callbacks": [
                        {
                            "name": "onCloseClick",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when the close button is clicked."
                        }
                    ]
                },
                "TreeSelectSelectionKeysType": {
                    "description": "Custom treeselect selection keys type",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean | TreeSelectCheckboxSelectionKeyType"
                        }
                    ],
                    "callbacks": []
                },
                "TreeSelectCheckboxSelectionKeyType": {
                    "description": "Custom checkbox selection key type",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "checked",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether the checkbox is checked or not."
                        },
                        {
                            "name": "partialChecked",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether the checkbox is partially checked or not."
                        }
                    ],
                    "callbacks": []
                },
                "TreeSelectExpandedKeysType": {
                    "description": "Custom expanded keys type.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean"
                        }
                    ],
                    "callbacks": []
                },
                "TreeSelectFilterOptions": {
                    "description": "Custom filter options.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "filter",
                            "optional": true,
                            "readonly": false,
                            "type": "Function"
                        },
                        {
                            "name": "reset",
                            "optional": true,
                            "readonly": false,
                            "type": "Function"
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "TreeSelectPassThroughType": {
                    "values": "PassThroughType<T, TreeSelectPassThroughMethodOptions>"
                }
            }
        }
    },
    "treetable": {
        "description": "TreeTable is used to display hierarchical data in tabular format.\n\n[Live Demo](https://www.primereact.org/treetable/)",
        "components": {
            "TreeTable": {
                "description": "TreeTable is used to display hierarchical data in tabular format.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "filter",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "T",
                                    "description": "The filter value"
                                },
                                {
                                    "name": "field",
                                    "type": "string",
                                    "description": "The filter field"
                                },
                                {
                                    "name": "mode",
                                    "type": "undefined | \"endsWith\" | \"startsWith\" | \"custom\" | \"contains\" | \"in\" | \"equals\" | \"notEquals\" | \"lt\" | \"lte\" | \"gt\" | \"gte\"",
                                    "description": "Filter match mode."
                                }
                            ],
                            "returnType": "void",
                            "description": "Filters the data."
                        },
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in TreeTable component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "values": [
                        {
                            "name": "alwaysShowPaginator",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show it even there is only one page."
                        },
                        {
                            "name": "checkboxIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<TreeTableProps>",
                            "default": "",
                            "description": "Icon of the checkbox when checked."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the node."
                        },
                        {
                            "name": "columnResizeMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"fit\" | \"expand\"",
                            "default": "fit",
                            "description": "Defines whether the overall table width should change on column resize, valid values are \"fit\" and \"expand\"."
                        },
                        {
                            "name": "contextMenuSelectionKey",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "A single key to control the selection with the context menu."
                        },
                        {
                            "name": "currentPageReportTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "({currentPage} of {totalPages})",
                            "description": "Template of the current page report element. Available placeholders are {currentPage}, {totalPages}, {rows}, {first}, {last} and {totalRecords}"
                        },
                        {
                            "name": "defaultSortOrder",
                            "optional": true,
                            "readonly": false,
                            "type": "null | 0 | 1 | -1",
                            "default": "1",
                            "description": "Default sort order of an unsorted column."
                        },
                        {
                            "name": "emptyMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "No records found",
                            "description": "Text to display when there is no data."
                        },
                        {
                            "name": "expandedKeys",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTableExpandedKeysType",
                            "default": "",
                            "description": "An array of keys to represent the state of the tree expansion state in controlled mode."
                        },
                        {
                            "name": "filterDelay",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "300",
                            "description": "Delay in milliseconds before filtering the data."
                        },
                        {
                            "name": "filterLocale",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "undefined",
                            "description": "Locale to use in filtering. The default locale is the host environment's current locale."
                        },
                        {
                            "name": "filterMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"strict\" | \"lenient\"",
                            "default": "lenient",
                            "description": "Mode for filtering valid values are lenient and strict. Default is lenient."
                        },
                        {
                            "name": "filters",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTableFilterMeta",
                            "default": "",
                            "description": "An array of FilterMetadata objects to provide external filters."
                        },
                        {
                            "name": "first",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Index of the first row to be displayed."
                        },
                        {
                            "name": "footer",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Footer content of the table."
                        },
                        {
                            "name": "footerColumnGroup",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactElement<any, string | JSXElementConstructor<any>>",
                            "default": "",
                            "description": "ColumnCroup component for footer."
                        },
                        {
                            "name": "frozenFooterColumnGroup",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactElement<any, string | JSXElementConstructor<any>>",
                            "default": "",
                            "description": "ColumnCroup component for footer of frozen columns."
                        },
                        {
                            "name": "frozenHeaderColumnGroup",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactElement<any, string | JSXElementConstructor<any>>",
                            "default": "",
                            "description": "ColumnCroup component for header of frozen columns."
                        },
                        {
                            "name": "frozenWidth",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Width of the frozen part in scrollable DataTable."
                        },
                        {
                            "name": "globalFilter",
                            "optional": true,
                            "readonly": false,
                            "type": "null | string",
                            "default": "",
                            "description": "Value of the global filter to use in filtering."
                        },
                        {
                            "name": "globalFilterMatchMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"endsWith\" | \"startsWith\" | \"custom\" | \"contains\" | \"in\" | \"equals\" | \"notEquals\" | \"lt\" | \"lte\" | \"gt\" | \"gte\" | \"notContains\" | \"between\" | \"dateIs\" | \"dateIsNot\" | \"dateBefore\" | \"dateAfter\"",
                            "default": "contains",
                            "description": "Defines filterMatchMode; \"startsWith\", \"contains\", \"endsWith\", \"equals\", \"notEquals\", \"in\", \"lt\", \"lte\", \"gt\", \"gte\" and \"custom\"."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Header content of the table."
                        },
                        {
                            "name": "headerColumnGroup",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactElement<any, string | JSXElementConstructor<any>>",
                            "default": "",
                            "description": "ColumnCroup component for header."
                        },
                        {
                            "name": "id",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Unique identifier of the element."
                        },
                        {
                            "name": "lazy",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if data is loaded and interacted with in lazy manner."
                        },
                        {
                            "name": "loading",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Displays a loader to indicate data load is in progress."
                        },
                        {
                            "name": "loadingIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<TreeTableProps>",
                            "default": "",
                            "description": "The icon to show while indicating data load is in progress."
                        },
                        {
                            "name": "metaKeySelection",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Defines whether metaKey is requred or not for the selection. When true metaKey needs to be pressed to select or unselect an item and when set to false selection of each item can be toggled individually. On touch enabled devices, metaKeySelection is turned off automatically."
                        },
                        {
                            "name": "multiSortMeta",
                            "optional": true,
                            "readonly": false,
                            "type": "null | TreeTableSortMeta[]",
                            "default": "",
                            "description": "An array of SortMeta objects to sort the data by default in multiple sort mode."
                        },
                        {
                            "name": "pageLinkSize",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "5",
                            "description": "Number of page links to display."
                        },
                        {
                            "name": "paginator",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified as true, enables the pagination."
                        },
                        {
                            "name": "paginatorClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the paginator element."
                        },
                        {
                            "name": "paginatorDropdownAppendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "null | HTMLElement | \"self\"",
                            "default": "document.body",
                            "description": "DOM element instance where the overlay panel should be mounted. Valid values are any DOM Element and 'self'. The self value is used to render a component where it is located."
                        },
                        {
                            "name": "paginatorLeft",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Content for the left side of the paginator."
                        },
                        {
                            "name": "paginatorPosition",
                            "optional": true,
                            "readonly": false,
                            "type": "\"both\" | \"top\" | \"bottom\"",
                            "default": "bottom",
                            "description": "Position of the paginator, options are \"top\",\"bottom\" or \"both\"."
                        },
                        {
                            "name": "paginatorRight",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Content for the right side of the paginator."
                        },
                        {
                            "name": "paginatorTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "PaginatorTemplate",
                            "default": "FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown",
                            "description": "Template of the paginator. For details, refer to the template section of the paginator documentation for further options."
                        },
                        {
                            "name": "propagateSelectionDown",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether checkbox selections propagate to descendant nodes."
                        },
                        {
                            "name": "propagateSelectionUp",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether checkbox selections propagate to ancestor nodes."
                        },
                        {
                            "name": "removableSort",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, columns can have an un-sorted state."
                        },
                        {
                            "name": "reorderableColumns",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, columns can be reordered using drag and drop."
                        },
                        {
                            "name": "reorderIndicatorDownIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<TreeTableProps>",
                            "default": "",
                            "description": "Defines the reorder indicator down icon."
                        },
                        {
                            "name": "reorderIndicatorUpIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<TreeTableProps>",
                            "default": "",
                            "description": "Defines the reorder indicator up icon."
                        },
                        {
                            "name": "resizableColumns",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, columns can be resized using drag and drop."
                        },
                        {
                            "name": "rowHover",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, background of the rows change on hover."
                        },
                        {
                            "name": "rows",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Number of rows to display per page."
                        },
                        {
                            "name": "rowsPerPageOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "number[]",
                            "default": "",
                            "description": "Array of integer values to display inside rows per page dropdown."
                        },
                        {
                            "name": "scrollHeight",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Height of the scroll viewport."
                        },
                        {
                            "name": "scrollable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified, enables horizontal and/or vertical scrolling."
                        },
                        {
                            "name": "selectOnEdit",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Determines whether the cell editor will be opened when clicking to select any row on Selection and Cell Edit modes."
                        },
                        {
                            "name": "selectionKeys",
                            "optional": true,
                            "readonly": false,
                            "type": "null | string | TreeTableSelectionKeysType | TreeTableSelectionKeysType[]",
                            "default": "",
                            "description": "A single or an array of keys to control the selection state."
                        },
                        {
                            "name": "selectionMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"multiple\" | \"checkbox\" | \"single\"",
                            "default": "",
                            "description": "Defines the selection mode, valid values \"single\", \"multiple\", and \"checkbox\"."
                        },
                        {
                            "name": "showGridlines",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to show grid lines between cells."
                        },
                        {
                            "name": "sortField",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Name of the field to sort data by default."
                        },
                        {
                            "name": "sortIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<TreeTableProps>",
                            "default": "",
                            "description": "Icon to display the current sorting status."
                        },
                        {
                            "name": "sortMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"multiple\" | \"single\"",
                            "default": "single",
                            "description": "Defines whether sorting works on single column or on multiple columns."
                        },
                        {
                            "name": "sortOrder",
                            "optional": true,
                            "readonly": false,
                            "type": "null | 0 | 1 | -1",
                            "default": "",
                            "description": "Order to sort the data by default."
                        },
                        {
                            "name": "stripedRows",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to displays rows with alternating colors."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "tabIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "tableClassName",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the table element."
                        },
                        {
                            "name": "tableStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the table element."
                        },
                        {
                            "name": "togglerTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "Template of toggler element."
                        },
                        {
                            "name": "totalRecords",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Number of total records, defaults to length of value when not defined."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeNode[]",
                            "default": "",
                            "description": "An array of treenodes to display."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onColReorder",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TreeTableColReorderEvent",
                                    "description": "Custom column reorder event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a column is reordered."
                        },
                        {
                            "name": "onCollapse",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TreeTableEvent",
                                    "description": "Custom treetable event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is collapsed."
                        },
                        {
                            "name": "onColumnResizeEnd",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TreeTableColumnResizeEndEvent",
                                    "description": "Custom resize event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a column is resized."
                        },
                        {
                            "name": "onContextMenu",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TreeTableEvent",
                                    "description": "Custom treetable event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a context menu is clicked."
                        },
                        {
                            "name": "onContextMenuSelectionChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TreeTableSelectionEvent",
                                    "description": "Custom selection event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when selection changes with a context menu."
                        },
                        {
                            "name": "onExpand",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TreeTableEvent",
                                    "description": "Custom treetable event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is expanded."
                        },
                        {
                            "name": "onFilter",
                            "parameters": [
                                {
                                    "name": "filters",
                                    "optional": false,
                                    "type": "TreeTableFilterMeta[]",
                                    "description": "Custom treetable event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on filtering."
                        },
                        {
                            "name": "onPage",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TreeTablePageEvent",
                                    "description": "Custom page event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on pagination."
                        },
                        {
                            "name": "onRowClick",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TreeTableEvent",
                                    "description": "Custom treetable event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a row is clicked."
                        },
                        {
                            "name": "onRowMouseEnter",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TreeTableRowMouseEvent",
                                    "description": "Custom row mouse event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a row is hovered with mouse."
                        },
                        {
                            "name": "onRowMouseLeave",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TreeTableRowMouseEvent",
                                    "description": "Custom row mouse event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a row is navigated away from with mouse."
                        },
                        {
                            "name": "onSelect",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TreeTableEvent",
                                    "description": "Custom treetable event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is selected."
                        },
                        {
                            "name": "onSelectionChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TreeTableSelectionEvent",
                                    "description": "Custom selection event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when selection changes."
                        },
                        {
                            "name": "onSort",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TreeTableSortEvent",
                                    "description": "Custom sort event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on sort."
                        },
                        {
                            "name": "onToggle",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TreeTableToggleEvent",
                                    "description": "Custom toggle event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is toggled."
                        },
                        {
                            "name": "onUnselect",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TreeTableEvent",
                                    "description": "Custom treetable event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is unselected."
                        },
                        {
                            "name": "rowClassName",
                            "parameters": [
                                {
                                    "name": "data",
                                    "optional": false,
                                    "type": "TreeNode",
                                    "description": "Value displayed by the treetable."
                                }
                            ],
                            "returnType": "object",
                            "description": "Function that takes the row data and returns an object in {'styleclass' : condition} format to define a classname for a particular now."
                        }
                    ]
                }
            }
        },
        "events": {
            "description": "Defines the custom events used by the component's callbacks.",
            "values": {
                "TreeTableEvent": {
                    "description": "Custom treetable event.",
                    "relatedProp": "onCollapse",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Browser event."
                        },
                        {
                            "name": "node",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeNode",
                            "description": "Expanded node instance."
                        }
                    ]
                },
                "TreeTableToggleEvent": {
                    "description": "Custom toggle event.",
                    "relatedProp": "onToggle",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Browser event."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeTableExpandedKeysType",
                            "description": "Collapsed state as a boolean."
                        }
                    ]
                },
                "TreeTablePageEvent": {
                    "description": "Custom page event.",
                    "relatedProp": "onPage",
                    "props": [
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Index of the first row."
                        },
                        {
                            "name": "rows",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Rows per page."
                        },
                        {
                            "name": "page",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Value of the new page."
                        },
                        {
                            "name": "pageCount",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Total number of pages."
                        }
                    ]
                },
                "TreeTableSortEvent": {
                    "description": "Custom sort event.",
                    "relatedProp": "onSort",
                    "props": [
                        {
                            "name": "sortField",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Field to sort against."
                        },
                        {
                            "name": "sortOrder",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | null | 0 | 1 | -1",
                            "description": "Sort order as integer."
                        },
                        {
                            "name": "multiSortMeta",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | null | TreeTableSortMeta[]",
                            "description": "MultiSort metadata."
                        }
                    ]
                },
                "TreeTableSelectionEvent": {
                    "description": "Custom selection event.",
                    "relatedProp": "onContextMenuSelectionChange",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>",
                            "description": "Browser event."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeTableSelectionKeysType",
                            "description": "Selected node key."
                        }
                    ]
                },
                "TreeTableColumnResizeEndEvent": {
                    "description": "Custom resize event.",
                    "relatedProp": "onColumnResizeEnd",
                    "props": [
                        {
                            "name": "element",
                            "optional": false,
                            "readonly": false,
                            "type": "HTMLElement",
                            "description": "DOM element of the resized."
                        },
                        {
                            "name": "column",
                            "optional": false,
                            "readonly": false,
                            "type": "ColumnProps",
                            "description": "Properties of the resized column."
                        },
                        {
                            "name": "delta",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Change in column width."
                        }
                    ]
                },
                "TreeTableColReorderEvent": {
                    "description": "Custom column reorder event.",
                    "relatedProp": "onColReorder",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "DragEvent<HTMLElement>",
                            "description": "Browser event."
                        },
                        {
                            "name": "dragIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Index of the dragged column."
                        },
                        {
                            "name": "dropIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Index of the dropped column."
                        },
                        {
                            "name": "columns",
                            "optional": false,
                            "readonly": false,
                            "type": "ReactElement<any, string | JSXElementConstructor<any>>",
                            "description": "Columns array after reorder."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "TreeTablePassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeTableProps"
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeTableState"
                        }
                    ],
                    "callbacks": []
                },
                "TreeTablePassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "loadingWrapper",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the loading wrapper's DOM element."
                        },
                        {
                            "name": "loadingOverlay",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the loading overlay's DOM element."
                        },
                        {
                            "name": "loadingIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the loading icon's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "paginator",
                            "optional": true,
                            "readonly": false,
                            "type": "PaginatorPassThroughOptions",
                            "description": "Uses to pass attributes to the Paginator component."
                        },
                        {
                            "name": "wrapper",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the wrapper's DOM element."
                        },
                        {
                            "name": "table",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughType<HTMLAttributes<HTMLTableElement>>",
                            "description": "Uses to pass attributes to the table's DOM element."
                        },
                        {
                            "name": "thead",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the thead's DOM element."
                        },
                        {
                            "name": "headerRow",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughType<HTMLAttributes<HTMLTableRowElement>>",
                            "description": "Uses to pass attributes to the header row's DOM element."
                        },
                        {
                            "name": "headerCell",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughType<HTMLAttributes<HTMLTableCellElement>>",
                            "description": "Uses to pass attributes to the header cell's DOM element."
                        },
                        {
                            "name": "tbody",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughType<HTMLAttributes<HTMLTableSectionElement>>",
                            "description": "Uses to pass attributes to the tbody's DOM element."
                        },
                        {
                            "name": "emptyMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughType<HTMLAttributes<HTMLTableRowElement>>",
                            "description": "Uses to pass attributes to the empty message's DOM element."
                        },
                        {
                            "name": "bodyCell",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughType<HTMLAttributes<HTMLTableCellElement>>",
                            "description": "Uses to pass attributes to the body cell's DOM element."
                        },
                        {
                            "name": "tfoot",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughType<HTMLAttributes<HTMLTableSectionElement>>",
                            "description": "Uses to pass attributes to the tfoot's DOM element."
                        },
                        {
                            "name": "footerRow",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughType<HTMLAttributes<HTMLTableRowElement>>",
                            "description": "Uses to pass attributes to the footer row's DOM element."
                        },
                        {
                            "name": "footer",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the footer's DOM element."
                        },
                        {
                            "name": "resizeHelper",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the resize helper's DOM element."
                        },
                        {
                            "name": "rowToggler",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughType<HTMLAttributes<HTMLButtonElement>>",
                            "description": "Uses to pass attributes to the row toggler's DOM element."
                        },
                        {
                            "name": "rowTogglerIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the row toggler icon's DOM element."
                        },
                        {
                            "name": "columnResizer",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the column resizer's DOM element."
                        },
                        {
                            "name": "sortBadge",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the sort badge's DOM element."
                        },
                        {
                            "name": "headerTitle",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the header title's DOM element."
                        },
                        {
                            "name": "checkboxWrapper",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the checkbox wrapper's DOM element."
                        },
                        {
                            "name": "checkbox",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the checkbox's DOM element."
                        },
                        {
                            "name": "checkboxIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the checkbox icon's DOM element."
                        },
                        {
                            "name": "filterInput",
                            "optional": true,
                            "readonly": false,
                            "type": "InputTextPassThroughOptions",
                            "description": "Uses to pass attributes to the resize helper's DOM element."
                        },
                        {
                            "name": "sortIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the sort icon label's DOM element."
                        },
                        {
                            "name": "scrollableWrapper",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the scrollable wrapper's DOM element."
                        },
                        {
                            "name": "scrollable",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the scrollable's DOM element."
                        },
                        {
                            "name": "scrollableHeader",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the scrollable header's DOM element."
                        },
                        {
                            "name": "scrollableHeaderBox",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the scrollable header box's DOM element."
                        },
                        {
                            "name": "scrollableHeaderTable",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughType<HTMLAttributes<HTMLTableElement>>",
                            "description": "Uses to pass attributes to the scrollable header table's DOM element."
                        },
                        {
                            "name": "scrollableBody",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the scrollable body's DOM element."
                        },
                        {
                            "name": "scrollableBodyBox",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the scrollable body box's DOM element."
                        },
                        {
                            "name": "scrollableBodyTable",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughType<HTMLAttributes<HTMLTableElement>>",
                            "description": "Uses to pass attributes to the scrollable body table's DOM element."
                        },
                        {
                            "name": "scrollableFooter",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the scrollable footer's DOM element."
                        },
                        {
                            "name": "scrollableFooterBox",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the scrollable footer box's DOM element."
                        },
                        {
                            "name": "scrollableFooterTable",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughType<HTMLAttributes<HTMLTableElement>>",
                            "description": "Uses to pass attributes to the scrollable footer table's DOM element."
                        },
                        {
                            "name": "editorKeyHelper",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughType<HTMLAttributes<HTMLAnchorElement>>",
                            "description": "Uses to pass attributes to the editor key helper's DOM element."
                        },
                        {
                            "name": "editorKeyHelperLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the editor key helper label's DOM element."
                        },
                        {
                            "name": "hiddenInputWrapper",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the hidden input wrapper's DOM element."
                        },
                        {
                            "name": "hiddenInput",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughType<HTMLAttributes<HTMLInputElement>>",
                            "description": "Uses to pass attributes to the hidden input's DOM element."
                        }
                    ],
                    "callbacks": []
                },
                "TreeTableState": {
                    "description": "Defines current inline state in TreeTable component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Current index of first record as a number."
                        },
                        {
                            "name": "rows",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Current number of rows to display in new page as a number."
                        },
                        {
                            "name": "sortField",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | string | Function",
                            "description": "Current sort field."
                        },
                        {
                            "name": "sortOrder",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Current order to sort the data by default."
                        },
                        {
                            "name": "multiSortMeta",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeTableSortMeta[]",
                            "description": "Current sortmeta objects to sort the data."
                        },
                        {
                            "name": "columnOrder",
                            "optional": false,
                            "readonly": false,
                            "type": "string[]",
                            "description": "Current order of the columns."
                        },
                        {
                            "name": "filters",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeTableFilterMeta",
                            "description": "Current filters object."
                        },
                        {
                            "name": "editing",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current editing as a boolean."
                        }
                    ],
                    "callbacks": []
                },
                "TreeTableTogglerTemplateOptions": {
                    "description": "Custom treetable toggler template options",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "containerClassName",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the panels container."
                        },
                        {
                            "name": "iconClassName",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Icon classname."
                        },
                        {
                            "name": "element",
                            "optional": false,
                            "readonly": false,
                            "type": "Element",
                            "description": "JSX element to be used as the template options."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeTableProps",
                            "description": "The props of Tree component"
                        },
                        {
                            "name": "expanded",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether the tree node is expanded or not."
                        },
                        {
                            "name": "buttonStyle",
                            "optional": false,
                            "readonly": false,
                            "type": "CSSProperties",
                            "description": "Button style for tree indentation"
                        }
                    ],
                    "callbacks": [
                        {
                            "name": "onClick",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on click."
                        }
                    ]
                },
                "TreeTableSelectionKeysType": {
                    "description": "Custom selection keys type.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean | TreeTableCheckboxSelectionKeyType | undefined"
                        }
                    ],
                    "callbacks": []
                },
                "TreeTableCheckboxSelectionKeyType": {
                    "description": "Custom treetable checkbox selection type",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "checked",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether the checkbox is checked or not."
                        },
                        {
                            "name": "partialChecked",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether the checkbox is partially checked or not."
                        }
                    ],
                    "callbacks": []
                },
                "TreeTableSortMeta": {
                    "description": "Custom treetable sort meta.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "field",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "The field to sort against."
                        },
                        {
                            "name": "order",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | null | 0 | 1 | -1",
                            "description": "Sort order as integer."
                        }
                    ],
                    "callbacks": []
                },
                "TreeTableFilterMetaData": {
                    "description": "Custom treetable filter metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Value to filter against."
                        },
                        {
                            "name": "matchMode",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | \"endsWith\" | \"startsWith\" | \"custom\" | \"contains\" | \"in\" | \"equals\" | \"notEquals\" | \"lt\" | \"lte\" | \"gt\" | \"gte\"",
                            "description": "Type of filter match."
                        }
                    ],
                    "callbacks": []
                },
                "TreeTableFilterMeta": {
                    "description": "Custom treetable filter meta.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeTableFilterMetaData"
                        }
                    ],
                    "callbacks": []
                },
                "TreeTableRowMouseEvent": {
                    "description": "Custom row mouse event.",
                    "relatedProp": "onRowMouseEnter",
                    "props": [
                        {
                            "name": "node",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeNode",
                            "description": "Expanded node instance."
                        },
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "MouseEvent<HTMLElement, MouseEvent>",
                            "description": "Browser event."
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Clicked row data index"
                        }
                    ],
                    "callbacks": [],
                    "extendedTypes": "Omit<TreeTableEvent, \"originalEvent\">"
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "TreeTablePassThroughType": {
                    "values": "PassThroughType<T, TreeTablePassThroughMethodOptions>"
                },
                "TreeTableExpandedKeysType": {
                    "values": "{}",
                    "description": "Custom expanded keys type."
                }
            }
        }
    },
    "tristatecheckbox": {
        "description": "TriStateCheckbox is used to select either \"true\", \"false\" or \"null\" as the value.\n\n[Live Demo](https://www.primereact.org/tristatecheckbox/)",
        "components": {
            "TriStateCheckbox": {
                "description": "TriStateCheckbox is used to select either \"true\", \"false\" or \"null\" as the value.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "focus",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Used to focus the component."
                        },
                        {
                            "name": "getElement",
                            "parameters": [],
                            "returnType": "HTMLDivElement",
                            "description": "Used to get container element."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in TriStateCheckbox component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "values": [
                        {
                            "name": "autoFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should automatically get focus on load."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "null | boolean",
                            "default": "",
                            "description": "Value of the TriStateCheckbox."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the element value cannot be altered."
                        },
                        {
                            "name": "readOnly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the value cannot be changed."
                        },
                        {
                            "name": "checkIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<TriStateCheckboxProps>",
                            "default": "",
                            "description": "Icon of the checkbox when checked."
                        },
                        {
                            "name": "uncheckIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<TriStateCheckboxProps>",
                            "default": "",
                            "description": "Icon of the checkbox when unchecked."
                        },
                        {
                            "name": "tooltip",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Content of the tooltip."
                        },
                        {
                            "name": "tooltipOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "TooltipOptions",
                            "default": "",
                            "description": "Configuration of the tooltip, refer to the tooltip documentation for more information."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "TriStateCheckboxPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TriStateCheckboxChangeEvent",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on value change"
                        }
                    ]
                }
            }
        },
        "events": {
            "description": "Defines the custom events used by the component's callbacks.",
            "values": {
                "TriStateCheckboxChangeEvent": {
                    "description": "Custom change event.",
                    "relatedProp": "onChange",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": true,
                            "readonly": false,
                            "type": "SyntheticEvent<Element, Event>"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "Nullable<boolean>"
                        },
                        {
                            "name": "checked",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean"
                        },
                        {
                            "name": "target",
                            "optional": false,
                            "readonly": false,
                            "type": "FormTarget<boolean>"
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "TriStateCheckboxPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "TriStateCheckboxProps"
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "TriStateCheckboxState"
                        }
                    ],
                    "callbacks": []
                },
                "TriStateCheckboxPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "TriStateCheckboxPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "checkbox",
                            "optional": true,
                            "readonly": false,
                            "type": "TriStateCheckboxPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the checkbox box's DOM element."
                        },
                        {
                            "name": "tooltip",
                            "optional": true,
                            "readonly": false,
                            "type": "TooltipPassThroughOptions",
                            "description": "Uses to pass attributes tooltip's DOM element."
                        },
                        {
                            "name": "checkIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "TriStateCheckboxPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the check icon's DOM element."
                        },
                        {
                            "name": "uncheckIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "TriStateCheckboxPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the uncheck icon's DOM element."
                        },
                        {
                            "name": "srOnlyAria",
                            "optional": true,
                            "readonly": false,
                            "type": "TriStateCheckboxPassThroughType<HTMLAttributes<HTMLSpanElement>>",
                            "description": "Uses to pass attributes to the sr only aria's DOM element."
                        }
                    ],
                    "callbacks": []
                },
                "TriStateCheckboxState": {
                    "description": "Defines current inline state in TriStateCheckbox component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Focused state as a boolean."
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "TriStateCheckboxPassThroughType": {
                    "values": "PassThroughType<T, TriStateCheckboxPassThroughMethodOptions>"
                }
            }
        }
    },
    "ts-helpers": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "FormTarget": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": false,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "Nullable<T>"
                        },
                        {
                            "name": "checked",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean"
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "callbacks": []
                },
                "FormEvent": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": true,
                            "readonly": false,
                            "type": "E"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "Nullable<T>"
                        },
                        {
                            "name": "checked",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean"
                        },
                        {
                            "name": "target",
                            "optional": false,
                            "readonly": false,
                            "type": "FormTarget<T>"
                        }
                    ],
                    "callbacks": [
                        {
                            "name": "stopPropagation",
                            "parameters": [],
                            "returnType": "void"
                        },
                        {
                            "name": "preventDefault",
                            "parameters": [],
                            "returnType": "void"
                        }
                    ],
                    "extendedBy": "AutoCompleteChangeEvent,CalendarChangeEvent,CheckboxChangeEvent,CheckboxClickEvent,ChipsChangeEvent,ColorPickerChangeEvent,DropdownChangeEvent,InputMaskChangeEvent,InputNumberValueChangeEvent,InputSwitchChangeEvent,RadioButtonChangeEvent,RadioButtonClickEvent,RatingChangeEvent,SelectButtonChangeEvent,TreeSelectChangeEvent,TriStateCheckboxChangeEvent"
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "Booleanish": {
                    "values": "boolean | \"true\" | \"false\""
                },
                "Numberish": {
                    "values": "number | string"
                },
                "Nullable": {
                    "values": "T | null | undefined"
                }
            }
        }
    },
    "utils": {
        "description": "",
        "functions": {
            "description": "Defines the custom functions used by the module.",
            "values": {
                "classNames": {
                    "name": "classNames",
                    "parameters": [
                        {
                            "name": "args",
                            "type": "any[]"
                        }
                    ],
                    "returnType": "string | undefined"
                },
                "mergeProps": {
                    "name": "mergeProps",
                    "parameters": [
                        {
                            "name": "args",
                            "type": "object[]"
                        }
                    ],
                    "returnType": "object | undefined"
                },
                "EventBus": {
                    "name": "EventBus",
                    "parameters": [],
                    "returnType": "Object"
                },
                "mask": {
                    "name": "mask",
                    "parameters": [
                        {
                            "name": "el",
                            "type": "HTMLElement"
                        },
                        {
                            "name": "options",
                            "type": "object"
                        }
                    ],
                    "returnType": "Object"
                },
                "UniqueComponentId": {
                    "name": "UniqueComponentId",
                    "parameters": [
                        {
                            "name": "prefix",
                            "type": "string"
                        }
                    ],
                    "returnType": "string"
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "IconOptions": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "iconProps",
                            "optional": false,
                            "readonly": false,
                            "type": "HTMLProps<HTMLElement>"
                        },
                        {
                            "name": "element",
                            "optional": false,
                            "readonly": false,
                            "type": "ReactNode"
                        },
                        {
                            "name": "props",
                            "optional": true,
                            "readonly": false,
                            "type": "ParentProps"
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "callbacks": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "IconType": {
                    "values": "React.ReactNode | Function"
                },
                "TemplateType": {
                    "values": "React.ReactNode | Function"
                },
                "PassThroughType": {
                    "values": "T | Function | null | undefined"
                }
            }
        }
    },
    "virtualscroller": {
        "description": "VirtualScroller is a performant approach to handle huge data efficiently.\n\n[Live Demo](https://www.primereact.org/virtualscroller/)",
        "components": {
            "VirtualScroller": {
                "description": "VirtualScroller is a performant approach to handle huge data efficiently.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "getElementRef",
                            "parameters": [],
                            "returnType": "Ref<HTMLDivElement>",
                            "description": "Returns the reference of virtualScroller's container."
                        },
                        {
                            "name": "scrollTo",
                            "parameters": [
                                {
                                    "name": "options",
                                    "type": "VirtualScrollerOptionsType",
                                    "description": "Custom virtual scroller options."
                                }
                            ],
                            "returnType": "void",
                            "description": "Scroll to move to a specific position."
                        },
                        {
                            "name": "scrollToIndex",
                            "parameters": [
                                {
                                    "name": "index",
                                    "type": "number | number[]",
                                    "description": "Index of item according to orientation mode."
                                },
                                {
                                    "name": "behavior",
                                    "type": "\"auto\" | \"smooth\"",
                                    "description": "Behavior of scroll, valid values are 'auto' and 'smooth'"
                                }
                            ],
                            "returnType": "void",
                            "description": "Scroll to move to a specific item."
                        },
                        {
                            "name": "scrollInView",
                            "parameters": [
                                {
                                    "name": "index",
                                    "type": "number | number[]",
                                    "description": "Index of item according to orientation mode."
                                },
                                {
                                    "name": "to",
                                    "type": "\"to-start\" | \"to-end\"",
                                    "description": "Defines the location of the item in view, valid values are 'to-start' and 'to-end'."
                                },
                                {
                                    "name": "behavior",
                                    "type": "\"auto\" | \"smooth\"",
                                    "description": "Behavior of scroll, valid values are 'auto' and 'smooth'"
                                }
                            ],
                            "returnType": "void",
                            "description": "It is used to move the specified index into the view. It is a method that will usually be needed when keyboard support is added to the virtualScroller component."
                        },
                        {
                            "name": "getRenderedRange",
                            "parameters": [],
                            "returnType": "VirtualScrollerRenderedRange",
                            "description": "Returns the range of items added to the DOM."
                        }
                    ]
                },
                "props": {
                    "description": "Defines valid properties in VirtualScroller component.",
                    "values": [
                        {
                            "name": "id",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Unique identifier of the element."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "CSSProperties",
                            "default": "",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "className",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "tabIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "items",
                            "optional": true,
                            "readonly": false,
                            "type": "null | any[] | any[][]",
                            "default": "",
                            "description": "An array of objects to display."
                        },
                        {
                            "name": "itemSize",
                            "optional": true,
                            "readonly": false,
                            "type": "number | number[]",
                            "default": "",
                            "description": "The height/width of item according to orientation."
                        },
                        {
                            "name": "scrollHeight",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Height of the scroll viewport."
                        },
                        {
                            "name": "scrollWidth",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Width of the scroll viewport."
                        },
                        {
                            "name": "orientation",
                            "optional": true,
                            "readonly": false,
                            "type": "\"both\" | \"horizontal\" | \"vertical\"",
                            "default": "'vertical'",
                            "description": "The orientation of scrollbar, valid values are 'vertical', 'horizontal' and 'both'."
                        },
                        {
                            "name": "step",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Used to specify how many items to load in each load method in lazy mode."
                        },
                        {
                            "name": "numToleratedItems",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Determines how many additional elements to add to the DOM outside of the view. According to the scrolls made up and down, extra items are added in a certain algorithm in the form of multiples of this number. Default value is half the number of items shown in the view."
                        },
                        {
                            "name": "delay",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Delay in scroll before new data is loaded."
                        },
                        {
                            "name": "resizeDelay",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "10",
                            "description": "Delay after window's resize finishes."
                        },
                        {
                            "name": "appendOnly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Used to append each loaded item to top without removing any items from the DOM. Using very large data may cause the browser to crash."
                        },
                        {
                            "name": "inline",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, positions the content as inline."
                        },
                        {
                            "name": "lazy",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if data is loaded and interacted with in lazy manner."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "If disabled, the VirtualScroller feature is eliminated and the content is displayed directly."
                        },
                        {
                            "name": "loaderDisabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Used to implement a custom loader instead of using the loader feature in the VirtualScroller."
                        },
                        {
                            "name": "columns",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Columns of the virtual scroller for vertical option."
                        },
                        {
                            "name": "loading",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the data is loaded."
                        },
                        {
                            "name": "autoSize",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to dynamically change the height or width of scrollable container."
                        },
                        {
                            "name": "showSpacer",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Used to implement a custom spacer instead of using the spacer feature in the VirtualScroller."
                        },
                        {
                            "name": "showLoader",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to show loader."
                        },
                        {
                            "name": "loadingIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "IconType<VirtualScrollerProps>",
                            "default": "",
                            "description": "The icon to show while indicating data load is in progress."
                        },
                        {
                            "name": "loadingTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "The template of loader."
                        },
                        {
                            "name": "loaderIconTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "The template of loader's icon.",
                            "deprecated": "Since v9.2.3, use "
                        },
                        {
                            "name": "itemTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "The template of item."
                        },
                        {
                            "name": "contentTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "default": "",
                            "description": "The template of item's wrapper element."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": true,
                            "type": "ReactNode",
                            "default": "",
                            "description": "Used to get the child elements of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "VirtualScrollerPassThroughOptions",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        }
                    ]
                },
                "callbacks": {
                    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onScroll",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "UIEvent<HTMLElement, UIEvent>",
                                    "description": "Browser event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when scroll position changes."
                        },
                        {
                            "name": "onScrollIndexChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "VirtualScrollerChangeEvent",
                                    "description": "Custom change event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when scroll position and item's range in view changes."
                        },
                        {
                            "name": "onLazyLoad",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "VirtualScrollerLazyEvent",
                                    "description": "Custom lazy load event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke in lazy mode to load new data."
                        }
                    ]
                }
            }
        },
        "events": {
            "description": "Defines the custom events used by the component's callbacks.",
            "values": {
                "VirtualScrollerChangeEvent": {
                    "description": "Custom change event.",
                    "relatedProp": "onScrollIndexChange",
                    "props": [
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "number | VirtualScrollerState",
                            "description": "First index of the new data range to be loaded."
                        },
                        {
                            "name": "last",
                            "optional": false,
                            "readonly": false,
                            "type": "number | VirtualScrollerState",
                            "description": "Last index of the new data range to be loaded."
                        }
                    ],
                    "extendedBy": "VirtualScrollerLazyEvent"
                },
                "VirtualScrollerLazyEvent": {
                    "description": "Custom lazy load event.",
                    "relatedProp": "onLazyLoad",
                    "props": [
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "number | VirtualScrollerState",
                            "description": "First index of the new data range to be loaded."
                        },
                        {
                            "name": "last",
                            "optional": false,
                            "readonly": false,
                            "type": "number | VirtualScrollerState",
                            "description": "Last index of the new data range to be loaded."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": {
                "VirtualScrollerPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "VirtualScrollerProps"
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "VirtualScrollerState"
                        }
                    ],
                    "callbacks": []
                },
                "VirtualScrollerPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "VirtualScrollerPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "VirtualScrollerPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "loader",
                            "optional": true,
                            "readonly": false,
                            "type": "VirtualScrollerPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the loader's DOM element."
                        },
                        {
                            "name": "loadingIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "VirtualScrollerPassThroughType<HTMLAttributes<HTMLSpanElement> | SVGProps<SVGSVGElement>>",
                            "description": "Uses to pass attributes to the loading icon's DOM element."
                        },
                        {
                            "name": "spacer",
                            "optional": true,
                            "readonly": false,
                            "type": "VirtualScrollerPassThroughType<HTMLAttributes<HTMLDivElement>>",
                            "description": "Uses to pass attributes to the spacer's DOM element."
                        }
                    ],
                    "callbacks": []
                },
                "VirtualScrollerState": {
                    "description": "Defines current inline state in VirtualScroller component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "First index of the new data range to be loaded as a number."
                        },
                        {
                            "name": "last",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Last index of the new data range to be loaded as a number."
                        },
                        {
                            "name": "page",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Index of the first item as a number."
                        },
                        {
                            "name": "numItemsInViewport",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Visible item count in the viewport as a number."
                        },
                        {
                            "name": "numToleratedItems",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Additional elements to add to the DOM outside of the view as a number."
                        },
                        {
                            "name": "loading",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Current loading state as a boolean."
                        },
                        {
                            "name": "loaderArr",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "description": "Loadable items array."
                        },
                        {
                            "name": "rows",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Number of rows to be rendered."
                        },
                        {
                            "name": "cols",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Number of columns to be rendered."
                        }
                    ],
                    "callbacks": []
                },
                "VirtualScrollerOptionsType": {
                    "description": "Custom virtual scroller options type.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "left",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Left position of scroll."
                        },
                        {
                            "name": "top",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Top position of scroll"
                        },
                        {
                            "name": "behavior",
                            "optional": false,
                            "readonly": false,
                            "type": "\"auto\" | \"smooth\"",
                            "description": "Behavior of scroll, valid values are 'auto' and 'smooth'"
                        }
                    ],
                    "callbacks": []
                },
                "VirtualScrollerViewportRenderedRange": {
                    "description": "Viewport rendered range.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "The first number of the current viewport."
                        },
                        {
                            "name": "last",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "The last number of the current viewport."
                        }
                    ],
                    "callbacks": []
                },
                "VirtualScrollerRenderedRange": {
                    "description": "Virtual scroller rendered range.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "First index of the new data range to be rendered."
                        },
                        {
                            "name": "last",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Last index of the new data range to be rendered."
                        },
                        {
                            "name": "viewport",
                            "optional": false,
                            "readonly": false,
                            "type": "VirtualScrollerViewportRenderedRange",
                            "description": "Viewport of the rendered range."
                        }
                    ],
                    "callbacks": []
                },
                "VirtualScrollerTemplateOptions": {
                    "description": "Custom template options.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Index of the item."
                        },
                        {
                            "name": "count",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Total numbers of items."
                        },
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether this is the first item."
                        },
                        {
                            "name": "last",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether this is the last item."
                        },
                        {
                            "name": "even",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether the index is even."
                        },
                        {
                            "name": "odd",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether the index is odd."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "VirtualScrollerProps",
                            "description": "The props of the virtual scroller."
                        }
                    ],
                    "callbacks": [],
                    "extendedBy": "VirtualScrollerLoadingTemplateOptions"
                },
                "VirtualScrollerLoadingTemplateOptions": {
                    "description": "Custom template options.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Index of the item."
                        },
                        {
                            "name": "count",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Total numbers of items."
                        },
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether this is the first item."
                        },
                        {
                            "name": "last",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether this is the last item."
                        },
                        {
                            "name": "even",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether the index is even."
                        },
                        {
                            "name": "odd",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether the index is odd."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "VirtualScrollerProps",
                            "description": "The props of the virtual scroller."
                        },
                        {
                            "name": "numCols",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Total number of columns in a row in 'both' orientation mode in view."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "callbacks": [],
                    "extendedTypes": "VirtualScrollerTemplateOptions"
                },
                "VirtualScrollerLoaderIconTemplateOptions": {
                    "description": "Custom loader icon template props.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "className",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the loader icon."
                        },
                        {
                            "name": "element",
                            "optional": false,
                            "readonly": false,
                            "type": "Element",
                            "description": "The JSX element that represents the loader icon."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "VirtualScrollerProps",
                            "description": "The props of the VirtualScroller component."
                        }
                    ],
                    "callbacks": []
                },
                "VirtualScrollerContentTemplateOptions": {
                    "description": "Custom content template options.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "className",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the wrapper element."
                        },
                        {
                            "name": "contentRef",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Ref of wrapper element."
                        },
                        {
                            "name": "spacerRef",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Ref of spacer element."
                        },
                        {
                            "name": "stickyRef",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Ref of sticky element in content."
                        },
                        {
                            "name": "items",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | null | any[] | any[][]",
                            "description": "Loaded data."
                        },
                        {
                            "name": "children",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Items of wrapper element."
                        },
                        {
                            "name": "element",
                            "optional": false,
                            "readonly": false,
                            "type": "Element",
                            "description": "Default wrapper element."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "VirtualScrollerProps",
                            "description": "Props of VirtualScroller component."
                        },
                        {
                            "name": "loading",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether the data is loaded."
                        },
                        {
                            "name": "loadingTemplate",
                            "optional": false,
                            "readonly": false,
                            "type": "ReactNode | Function",
                            "description": "Template of loading item."
                        },
                        {
                            "name": "itemSize",
                            "optional": false,
                            "readonly": false,
                            "type": "number | number[]",
                            "description": "The height/width of item according to orientation."
                        },
                        {
                            "name": "rows",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "description": "Rows of the virtual scroller."
                        },
                        {
                            "name": "columns",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "description": "Columns of the virtual scroller."
                        },
                        {
                            "name": "vertical",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether the orientation is vertical."
                        },
                        {
                            "name": "horizontal",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether the orientation is horizontal."
                        },
                        {
                            "name": "both",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether the orientation is both."
                        }
                    ],
                    "callbacks": [
                        {
                            "name": "getItemOptions",
                            "parameters": [
                                {
                                    "name": "index",
                                    "optional": false,
                                    "type": "number",
                                    "description": "Index of the template item."
                                }
                            ],
                            "returnType": "VirtualScrollerTemplateOptions",
                            "description": "Information of any item."
                        },
                        {
                            "name": "getLoaderOptions",
                            "parameters": [
                                {
                                    "name": "index",
                                    "optional": false,
                                    "type": "number",
                                    "description": "Index of the item."
                                },
                                {
                                    "name": "ext",
                                    "optional": true,
                                    "type": "object",
                                    "description": "The extra options to pass to the content."
                                }
                            ],
                            "returnType": "VirtualScrollerLoadingTemplateOptions",
                            "description": "Information of any item during the loading."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "VirtualScrollerPassThroughType": {
                    "values": "PassThroughType<T, VirtualScrollerPassThroughMethodOptions>"
                }
            }
        }
    }
}